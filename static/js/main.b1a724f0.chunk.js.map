{"version":3,"sources":["../src sync ///translations//.*/.json$","../src sync ///on-startup/.(ts|tsx)$","../src sync //.css$","app/robot-widget/store/selectors.ts","app/robot-widget/index.tsx","app/common/cube/libs/algorithms.ts","app/common/cube/libs/cube.ts","app/common/cube/libs/tools.ts","app/common/cube/libs/coordinates.ts","app/common/cube/libs/cfop-criteria.ts","app/common/cube/scramblers/full.ts","app/common/cube/solvers/five-side-solver.ts","app/common/cube/libs/move-table.ts","app/common/cube/libs/pruning-table.ts","app/common/cube/libs/search.ts","app/common/cube/libs/scramble-pieces.ts","app/common/cube/solvers/cross-solver.ts","app/common/cube/libs/cube-preview.ts","app/cube-preview/index.tsx","app/common/gan-robot.ts","app/common/array-reducers.ts","app/cfop-scramble/index.tsx","app/common/cube/scramblers/cfop.ts","app/random-scramble/index.tsx","app/manual-scramble/index.tsx","app/main-screen/index.tsx","app/common/webpack.ts","translations/index.ts","serviceWorker.ts","index.tsx","app/common/store-reducers.ts","app/robot-widget/store/reducer.ts","app/robot-widget/store/on-startup.ts","app/robot-widget/store/actions.ts","app/common/store.ts"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","getRobotDevice","state","robot","device","getRobotServer","robotDevice","gatt","connected","ConnectedRobotWidget","connect","registerRobot","unregisterRobot","props","IconButton","color","onClick","a","navigator","bluetooth","requestDevice","filters","namePrefix","optionalServices","server","getPrimaryService","deviceInfoService","getCharacteristic","modelCharacteristic","readValue","modelNumberValue","TextDecoder","decode","toUpperCase","addEventListener","console","log","BluetoothConnected","Bluetooth","powers","2","validateAlgorithm","algorithm","test","wideMoves","f","r","u","b","l","d","M","S","E","rotations","x","y","z","normalize","moves","reduce","acc","move","axis","charAt","pow","concat","m","output","totalRotation","i","includes","unshift","j","outputMove","indexOf","length","parseAlgorithm","returnTotalRotation","result","match","forEach","moveNum","push","invertAlgorithm","reverse","inv","join","formatAlgorithm","sequence","Math","floor","trim","Centers","Edges","Corners","identity","center","ep","eo","cp","co","allMoves","fiveSideMoves","moveHelper","cube","moveIndex","fn","doCenterMove","newCenter","fromIndex","toIndex","Array","doEdgeMove","newCube","doCornerMove","doMove","doAlgorithm","factorials","factorial","n","binomials","choose","k","s","nextRow","prev","getRandomInt","min","max","random","rotateLeft","pieces","left","right","original","rotateRight","getIndexFromOrientation","flipCount","sum","getOrientationFromIndex","index","numPieces","numFlips","orientation","parity","ori","getParity","getIndexFromPermutation","affected","reversed","offset","position","edges","permutation","getPermutationFromIndex","size","base","binomial","arePiecesPermutated","cubeState","corners","edgeIdx","cornerIdx","arePiecesOriented","arePiecesPermutatedAndOriented","isTopCrossSolved","isF2LSolved","isCrossSolved","isFirstLookOLLSolved","isOLLSolved","isFirstLookPLLSolved","isCubeSolved","cubeFaces","moveModifiers","generateScramble","total","scramble","URFToDLF","slice","merge","previousCubeStates","Set","currentState","newState","stateHashCode","getStateHashCode","has","add","cpIndex","coIndex","epIndex","eoIndex","MoveTable","settings","name","defaultIndex","solvedIndexes","table","this","cubieMove","getVector","getIndex","vector","createMoveHandler","createMoveTable","inverse","createEdgePermutationTable","getCorrectOrientations","numStates","indexes","target","every","piece","createEdgeOrientationTable","createCornerOrientationTable","PruningTable","moveTables","computePruningTable","value","obj","depth","done","permutations","arg","helper","arr","copy","cartesian","data","setPruningValue","find","check","getPruningValue","currentIndex","Search","createTables","initialized","pruningTables","moveTableNames","moveTableIndexes","sort","mappedTables","pruningTable","solution","lastMove","minimumDistance","power","distance","handleSolution","updatedIndexes","search","initialize","maxDepth","format","solutionRotation","formatted","phaseTwoMoves","phaseTwoSearch","getMergeCoord","fiveSideSearch","args","phaseTwoSolution","solve","fiveSideSolver","isArray","solveCoordinates","getEdgeOrientation","enabled","orientLastLayer","fill","getCornerOrientation","getPermutationFromEnabled","getScrambleForPieces","scrambleEdges","scrambleCorners","isScrambleSolved","CrossSearch","crossSolver","centerFacelets","cornerFacelets","edgeFacelets","mod","getFaceletIndex","facelet","Number","getCornerFacelet","cornerIndex","orientationIndex","getEdgeFacelet","edgeIndex","doRotations","rotationAlg","split","rotation","CubePreview","cubeIndexes","scrambleCode","colorMap","defaultColorMap","svgString","options","facelets","centerIndex","corner","faceletIndex","faceletValue","filter","edge","getFaceletArray","faceKey","replace","template","className","dangerouslySetInnerHTML","__html","U","R","F","D","L","B","G","moveMap","R2","F2","D2","L2","B2","getGANEncoding","Uint8Array","chunckSize","currentChunk","accumulator","currentValue","chunkReducer","executeScramble","robotServer","scrambleService","scrambleExecuteCharacteristic","writeValue","invertedColorMap","crossFilter","f2lFilter","ollFilter","intermediate","cross","f2l","firstLookOll","secondLookOll","advanced","oll","ContentContainer","styled","div","attrs","ContentGroup","ConnectedCFOPScramble","useState","cfopLevel","setCFOPLevel","cfopPhase","setCFOPPhase","setScramble","FormControl","component","Select","labelId","onChange","MenuItem","RadioGroup","row","aria-label","currentTarget","FormControlLabel","control","Radio","label","Button","variant","solveCode","ollScramble","firstLookOllScramble","secondLookOllScramble","pllScramble","firstLookPllScramble","secondLookPllScramble","disabled","Boolean","ConnectedRandomScramble","Typography","ConnectedManualScramble","hasError","setHasError","noValidate","autoComplete","TextField","multiline","rowsMax","fullWidth","error","helperText","onBlur","event","manualScrambleValue","fiveSideSolve","fiveSideScramble","Screen","IconContainer","MainScreen","React","navigationValue","setNavigation","useEffect","window","screen","lock","AppBar","Toolbar","Paper","List","ListItem","button","key","selected","ListItemIcon","Shuffle","ListItemText","primary","Layers","Edit","BottomNavigation","showLabels","newValue","BottomNavigationAction","icon","importAll","requireContext","importCache","moduleKey","translations","require","messageMap","filepath","locale","pathParse","flattenTranslations","trans","currentKeys","language","messages","toLowerCase","isLocalhost","location","hostname","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","store","createStore","ReactDOM","render","StylesProvider","injectFirst","document","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","status","ready","unregister","reload","checkValidServiceWorker","payloadReducer","action","payload","combineReducers","createReducer","builder","addCase","registerReducer","reducer","createAction","makeRestartable","rootSaga","reducerRegistry","sagaRegistry","saga","call","delay","spawn","sagaMiddleware","createSagaMiddleware","configureStore","middleware","run"],"mappings":"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","file":"static/js/main.b1a724f0.chunk.js","sourcesContent":["var map = {\n\t\"./translations/en-us.json\": 122\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 121;","var map = {\n\t\"./app/robot-widget/store/on-startup.ts\": 128\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 123;","var map = {\n\t\"./assets/styles/main.css\": 125,\n\t\"./tailwind.css\": 126\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 124;","import { ApplicationState } from \"app/common/store\";\nimport { RobotState } from \"app/robot-widget/store/types\";\n\nexport const getRobotDevice = (state: ApplicationState): RobotState[\"device\"] =>\n  state.robot.device;\n\nexport const getRobotServer = (\n  state: ApplicationState\n): BluetoothRemoteGATTServer | null => {\n  const robotDevice = getRobotDevice(state);\n  return robotDevice && robotDevice.gatt?.connected ? robotDevice.gatt : null;\n};\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { IconButton } from \"@material-ui/core\";\nimport { BluetoothConnected, Bluetooth } from \"@material-ui/icons\";\n\nimport { ApplicationState } from \"app/common/store\";\n\nimport { unregisterRobot, registerRobot } from \"app/robot-widget/store/actions\";\nimport { getRobotDevice } from \"app/robot-widget/store/selectors\";\nimport { RobotState } from \"app/robot-widget/store/types\";\n\nconst DEVICE_INFO_SERVICE_UUID = 0x180a;\nconst MODEL_NUMBER_SERVICE_UUID = 0x2a24;\n\nconst SCRAMBLE_SERVICE_UUID = 0xfff0;\n\ninterface RobotWidgetProps {\n  registerRobot: typeof registerRobot;\n  unregisterRobot: typeof unregisterRobot;\n  robotDevice?: RobotState[\"device\"];\n}\n\nexport function RobotWidget(props: RobotWidgetProps): JSX.Element {\n  // TODO pull callback into useCallback hook\n  // TODO pull async with dispatch into a saga\n  return (\n    <IconButton\n      color=\"inherit\"\n      onClick={async () => {\n        try {\n          const device = await navigator.bluetooth.requestDevice({\n            filters: [{ namePrefix: \"GAN\" }],\n            optionalServices: [SCRAMBLE_SERVICE_UUID, DEVICE_INFO_SERVICE_UUID],\n          });\n          const server = await device.gatt?.connect();\n          if (server) {\n            const deviceInfoService = await server.getPrimaryService(\n              DEVICE_INFO_SERVICE_UUID\n            );\n            const modelCharacteristic = await deviceInfoService.getCharacteristic(\n              MODEL_NUMBER_SERVICE_UUID\n            );\n            const modelNumberValue = await modelCharacteristic.readValue();\n            const modelNumber = new TextDecoder().decode(modelNumberValue);\n            if (modelNumber.toUpperCase() === \"GAN ROBOTCUBE\") {\n              device.addEventListener(\"gattserverdisconnected\", () =>\n                props.unregisterRobot()\n              );\n              props.registerRobot(device);\n            } else {\n              //TODO show error message for connecting to wrong type of GAN device\n            }\n          }\n        } catch (error) {\n          console.log(error);\n        }\n      }}\n    >\n      {props.robotDevice ? <BluetoothConnected /> : <Bluetooth />}\n    </IconButton>\n  );\n}\n\nexport const ConnectedRobotWidget = connect(\n  (state: ApplicationState) => ({\n    robotDevice: getRobotDevice(state),\n  }),\n  {\n    registerRobot,\n    unregisterRobot,\n  }\n)(RobotWidget);\n","// Numeric representation of the different powers of moves.\nconst powers: Record<string, number> = {\n  \"\": 0,\n  2: 1,\n  \"'\": 2,\n};\n\n/**\n * Check whether or not we are able to parse the given algorithm string.\n */\nexport const validateAlgorithm = (algorithm: string): boolean =>\n  /^([FRUBLDfrubldxyzMSE][2']?\\s*)+$/.test(algorithm);\n\n// Map single-power wide moves to a rotation + moves.\nconst wideMoves: Record<string, string[]> = {\n  f: [\"z\", \"B\"],\n  r: [\"x\", \"L\"],\n  u: [\"y\", \"D\"],\n  b: [\"z'\", \"F\"],\n  l: [\"x'\", \"R\"],\n  d: [\"y'\", \"U\"],\n  M: [\"x'\", \"R\", \"L'\"],\n  S: [\"z\", \"F'\", \"B\"],\n  E: [\"y'\", \"U\", \"D'\"],\n};\n\n// Specifies the translation of FRUBLD as performed by rotations.\nconst rotations: Record<string, string> = {\n  x: \"DRFULB\",\n  y: \"RBULFD\",\n  z: \"FULBDR\",\n};\n\n/**\n * Strip rotations and wide moves from an algorithm. Returns\n * an array of moves as strings.\n */\nconst normalize = (moves: string[]) => {\n  // Replace wide moves with rotations + moves.\n  moves = moves.reduce((acc: string[], move: string) => {\n    const axis: keyof typeof wideMoves = move.charAt(0);\n    const pow = move.charAt(1);\n\n    if (wideMoves[axis]) {\n      return acc.concat(wideMoves[axis].map((m) => m + pow));\n    }\n\n    return acc.concat(move);\n  }, []);\n\n  let output: string[] = [];\n\n  // We store all rotations that were encountered, to map the\n  // solution to the same final rotation as the scramble.\n  const totalRotation: string[] = [];\n\n  // Remove rotations by mapping all moves to the right of the rotation.\n  for (let i = moves.length - 1; i >= 0; i -= 1) {\n    const axis = moves[i].charAt(0);\n    const pow = powers[moves[i].charAt(1)];\n\n    if (\"xyz\".includes(axis)) {\n      totalRotation.unshift(moves[i]);\n\n      for (let j = 0; j <= pow; j += 1) {\n        output = output.map(\n          (outputMove) =>\n            rotations[axis][\"FRUBLD\".indexOf(outputMove[0])] +\n            outputMove.charAt(1)\n        );\n      }\n    } else {\n      output.unshift(moves[i]);\n    }\n  }\n\n  return [output, totalRotation];\n};\n\n/**\n * Parses a scramble, returning an array of integers describing the moves.\n */\nexport function parseAlgorithm(algorithm: string): number[];\nexport function parseAlgorithm(\n  algorithm: string,\n  returnTotalRotation: boolean\n): [number[], string[]];\nexport function parseAlgorithm(\n  algorithm: string,\n  returnTotalRotation = false\n): number[] | [number[], string[]] {\n  if (!validateAlgorithm(algorithm)) {\n    throw new Error(\"Invalid algorithm provided to algorithm parser\");\n  }\n\n  const result: number[] = [];\n\n  const [moves, totalRotation] = normalize(\n    algorithm.match(/[FRUBLDfrubldxyzMSE][2']?/g) || []\n  );\n\n  moves.forEach((move) => {\n    const moveNum = \"FRUBLD\".indexOf(move.charAt(0));\n    const pow = powers[move.charAt(1)];\n    result.push(moveNum * 3 + pow);\n  });\n\n  if (returnTotalRotation) {\n    return [result, totalRotation];\n  }\n\n  return result;\n}\n\n/**\n * Computes the inverse of a given algorithm. Rotations are supported.\n */\nexport const invertAlgorithm = (algorithm: string): string => {\n  if (!validateAlgorithm(algorithm)) {\n    throw new Error(\"Invalid algorithm provided to algorithm parser\");\n  }\n\n  const moves = algorithm.match(/[FRUBLDfrubldxyzMSE][2']?/g) || [];\n\n  const inverted = moves.reverse().map((move) => {\n    const axis = move.charAt(0);\n    const pow = powers[move.charAt(1)];\n    const inv = pow - 2 * (pow % 3) + 2;\n\n    if (inv === 1) {\n      return `${axis}2`;\n    }\n\n    if (inv === 2) {\n      return `${axis}'`;\n    }\n\n    return axis;\n  });\n\n  return inverted.join(\" \");\n};\n\n/**\n * Convert an array of integers to a human-readable representation.\n */\nexport const formatAlgorithm = (moves: number[]): string => {\n  let sequence = \"\";\n\n  moves.forEach((move) => {\n    sequence += \" \";\n    sequence += \"FRUBLD\".charAt(Math.floor(move / 3));\n\n    switch (move % 3) {\n      case 1:\n        sequence += \"2\";\n        break;\n\n      case 2:\n        sequence += \"'\";\n        break;\n\n      default:\n    }\n  });\n\n  // Trim extra spaces.\n  return sequence.trim();\n};\n","import { parseAlgorithm } from \"./algorithms\";\n\nexport const Centers = {\n  U: 0,\n  R: 1,\n  F: 2,\n  D: 3,\n  L: 4,\n  B: 5,\n};\n\nexport const Edges = {\n  UR: 0,\n  UF: 1,\n  UL: 2,\n  UB: 3,\n  DR: 4,\n  DF: 5,\n  DL: 6,\n  DB: 7,\n  FR: 8,\n  FL: 9,\n  BL: 10,\n  BR: 11,\n};\n\nexport const Corners = {\n  URF: 0,\n  UFL: 1,\n  ULB: 2,\n  UBR: 3,\n  DFR: 4,\n  DLF: 5,\n  DBL: 6,\n  DBR: 7,\n};\n\nconst { F, R, U, B, L, D } = Centers;\nconst { UR, UF, UL, UB, DR, DF, DL, DB, FR, FL, BL, BR } = Edges;\nconst { URF, UFL, ULB, UBR, DFR, DLF, DBL, DBR } = Corners;\n\nexport interface CubeIndexes {\n  center: number[];\n  ep: number[];\n  eo: number[];\n  cp: number[];\n  co: number[];\n}\n\n// The identity cube.\nexport const identity: CubeIndexes = {\n  center: [0, 1, 2, 3, 4, 5],\n  ep: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],\n  eo: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n  cp: [0, 1, 2, 3, 4, 5, 6, 7],\n  co: [0, 0, 0, 0, 0, 0, 0, 0],\n};\n\nexport const moves = [\n  // F\n  {\n    center: identity.center,\n    cp: [UFL, DLF, 2, 3, URF, DFR, 6, 7],\n    co: [1, 2, 0, 0, 2, 1, 0, 0],\n    ep: [0, FL, 2, 3, 4, FR, 6, 7, UF, DF, 10, 11],\n    eo: [0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0],\n  },\n\n  // R\n  {\n    center: identity.center,\n    cp: [DFR, 1, 2, URF, DBR, 5, 6, UBR],\n    co: [2, 0, 0, 1, 1, 0, 0, 2],\n    ep: [FR, 1, 2, 3, BR, 5, 6, 7, DR, 9, 10, UR],\n    eo: identity.eo,\n  },\n\n  // U\n  {\n    center: identity.center,\n    cp: [UBR, URF, UFL, ULB, 4, 5, 6, 7],\n    co: identity.co,\n    ep: [UB, UR, UF, UL, 4, 5, 6, 7, 8, 9, 10, 11],\n    eo: identity.eo,\n  },\n\n  // B\n  {\n    center: identity.center,\n    cp: [0, 1, UBR, DBR, 4, 5, ULB, DBL],\n    co: [0, 0, 1, 2, 0, 0, 2, 1],\n    ep: [0, 1, 2, BR, 4, 5, 6, BL, 8, 9, UB, DB],\n    eo: [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1],\n  },\n\n  // L\n  {\n    center: identity.center,\n    cp: [0, ULB, DBL, 3, 4, UFL, DLF, 7],\n    co: [0, 1, 2, 0, 0, 2, 1, 0],\n    ep: [0, 1, BL, 3, 4, 5, FL, 7, 8, UL, DL, 11],\n    eo: identity.eo,\n  },\n\n  // D\n  {\n    center: identity.center,\n    cp: [0, 1, 2, 3, DLF, DBL, DBR, DFR],\n    co: identity.co,\n    ep: [0, 1, 2, 3, DF, DL, DB, DR, 8, 9, 10, 11],\n    eo: identity.eo,\n  },\n\n  // E\n  {\n    center: [0, F, L, 3, B, R],\n    cp: identity.cp,\n    co: identity.co,\n    ep: [0, 1, 2, 3, 4, 5, 6, 7, FL, BL, BR, FR],\n    eo: [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1],\n  },\n\n  // M\n  {\n    center: [B, 1, U, F, 4, D],\n    cp: identity.cp,\n    co: identity.co,\n    ep: [0, UB, 2, DB, 4, UF, 6, DF, 8, 9, 10, 11],\n    eo: [0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0],\n  },\n\n  // S\n  {\n    center: [L, U, 2, R, D, 5],\n    cp: identity.cp,\n    co: identity.co,\n    ep: [UL, 1, DL, 3, UR, 5, DR, 7, 8, 9, 10, 11],\n    eo: [1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0],\n  },\n];\n\nexport const allMoves = [\n  0, // F\n  1,\n  2,\n  3, // R\n  4,\n  5,\n  6, // U\n  7,\n  8,\n  9, // B\n  10,\n  11,\n  12, // L\n  13,\n  14,\n  15, // D\n  16,\n  17,\n];\n\nexport const fiveSideMoves = [\n  3,\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  10,\n  11,\n  12,\n  13,\n  14,\n  15,\n  16,\n  17,\n];\n\nexport const moveHelper = <T>(\n  cube: T,\n  moveIndex: number,\n  fn: (cube: T, move: CubeIndexes) => T\n): T => {\n  const move = moves[Math.floor(moveIndex / 3)];\n  const pow = (moveIndex % 3) + 1;\n  for (let i = 0; i < pow; i++) {\n    cube = fn(cube, move);\n  }\n  return cube;\n};\n\nexport const doCenterMove = (center: number[], move: CubeIndexes): number[] =>\n  move.center === identity.center\n    ? move.center\n    : move.center.reduce((newCenter, fromIndex, toIndex) => {\n        newCenter[toIndex] = center[fromIndex];\n        return newCenter;\n      }, new Array(6));\n\nexport const doEdgeMove = (\n  cube: Pick<CubeIndexes, \"eo\" | \"ep\">,\n  move: CubeIndexes\n): typeof cube =>\n  move.ep.reduce(\n    (newCube, fromIndex, toIndex) => {\n      newCube.ep[toIndex] = cube.ep[fromIndex];\n      newCube.eo[toIndex] = (cube.eo[fromIndex] + move.eo[toIndex]) % 2;\n      return newCube;\n    },\n    {\n      ep: new Array(12),\n      eo: new Array(12),\n    }\n  );\n\nexport const doCornerMove = (\n  cube: Pick<CubeIndexes, \"co\" | \"cp\">,\n  move: CubeIndexes\n): typeof cube =>\n  move.cp.reduce(\n    (newCube, fromIndex, toIndex) => {\n      newCube.cp[toIndex] = cube.cp[fromIndex];\n      newCube.co[toIndex] = (cube.co[fromIndex] + move.co[toIndex]) % 3;\n      return newCube;\n    },\n    {\n      cp: new Array(8),\n      co: new Array(8),\n    }\n  );\n\nexport const doMove = (cube: CubeIndexes, moveIndex: number): CubeIndexes => {\n  return {\n    ...moveHelper(cube, moveIndex, doCornerMove),\n    ...moveHelper(cube, moveIndex, doEdgeMove),\n    center: moveHelper(cube.center, moveIndex, doCenterMove),\n  };\n};\n\nexport const doAlgorithm = (algorithm: string, cube = identity): CubeIndexes =>\n  !algorithm ? cube : parseAlgorithm(algorithm).reduce(doMove, cube);\n","const factorials: number[] = [];\n\n/**\n * Calculates n factorial and attempts to cache\n * as much information as possible.\n */\nexport const factorial = (n: number): number => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n\n  if (factorials[n] > 0) {\n    return factorials[n];\n  }\n\n  factorials[n] = factorial(n - 1) * n;\n\n  return factorials[n];\n};\n\nconst binomials: number[][] = [];\n\n/**\n * Calculates n choose k using cached binomial numbers.\n */\nexport const choose = (n: number, k: number): number => {\n  if (k > n) {\n    return 0;\n  }\n\n  while (n >= binomials.length) {\n    const s = binomials.length;\n    const nextRow = [];\n\n    nextRow[0] = 1;\n\n    for (let i = 1, prev = s - 1; i < s; i += 1) {\n      nextRow[i] = binomials[prev][i - 1] + binomials[prev][i];\n    }\n\n    nextRow[s] = 1;\n\n    binomials.push(nextRow);\n  }\n\n  return binomials[n][k];\n};\n\n/**\n * Cartesian product of a given nested array.\n */\nexport const cartesian = (arg: number[][]): number[][] => {\n  const result: number[][] = [];\n  const max = arg.length - 1;\n\n  const helper = (arr: number[], i: number) => {\n    for (let j = 0; j < arg[i].length; j += 1) {\n      const copy = arr.slice(0);\n\n      copy.push(arg[i][j]);\n\n      if (i === max) {\n        result.push(copy);\n      } else {\n        helper(copy, i + 1);\n      }\n    }\n  };\n\n  helper([], 0);\n\n  return result;\n};\n\n// Ger a random integer in the provided range, inclusive.\nexport const getRandomInt = (min: number, max: number): number =>\n  Math.floor(Math.random() * (max - min + 1)) + min;\n\nexport const permute = (n: number, r: number): number =>\n  factorial(n) / factorial(n - r);\n\n/**\n * Rotates the subarray containing the affected pieces\n * to the right by one.\n */\nexport const rotateParts = (pieces: number[], affected: number[]): number[] => {\n  const updatedPieces = pieces.slice(0);\n\n  updatedPieces[affected[0]] = pieces[affected[affected.length - 1]];\n\n  for (let i = 1; i < affected.length; i += 1) {\n    updatedPieces[affected[i]] = pieces[affected[i - 1]];\n  }\n\n  return updatedPieces;\n};\n","import { factorial, choose } from \"app/common/cube/libs/tools\";\n\n/**\n * In-place rotation of the subarray determined by the two\n * indexes left and right to the left by one.\n */\nconst rotateLeft = (pieces: number[], left: number, right: number): void => {\n  const original = pieces[left];\n\n  for (let i = left; i < right; i += 1) {\n    pieces[i] = pieces[i + 1];\n  }\n\n  pieces[right] = original;\n};\n\n/**\n * In-place rotation of the subarray determined by the two\n * indexes left and right to the right by one.\n */\nconst rotateRight = (pieces: number[], left: number, right: number): void => {\n  const original = pieces[right];\n\n  for (let i = right; i > left; i -= 1) {\n    pieces[i] = pieces[i - 1];\n  }\n\n  pieces[left] = original;\n};\n\n/**\n * Bijection which encodes a given orientation vector to an unique index.\n * The flip count is the number of ways in which a single piece in the\n * orientation vector may be oriented. For edges, this number is 2 flips,\n * and for corners there are 3 possible twists. Thus, edges are encoded\n * using a binary number system, and corners using a trinary number system.\n */\nexport const getIndexFromOrientation = (\n  pieces: number[],\n  flipCount: number\n): number => {\n  let sum = 0;\n\n  // Note that we do not include the last element in the vector here.\n  // This is because the orientation of the last piece if determined\n  // by the orientation of all the other pieces - when you rotate any\n  // axis on the cube, only an even number of pieces is affected.\n  for (let i = 0; i < pieces.length - 1; i += 1) {\n    sum = flipCount * sum + pieces[i];\n  }\n\n  return sum;\n};\n\n/**\n * Returns the original orientation vector given the number which\n * describes it, the number of pieces in the vector, and the number\n * of ways in which an individual piece may be oriented.\n */\nexport const getOrientationFromIndex = (\n  index: number,\n  numPieces: number,\n  numFlips: number\n): number[] => {\n  const orientation = [];\n\n  let parity = 0;\n\n  for (let i = numPieces - 2; i >= 0; i -= 1) {\n    const ori = index % numFlips;\n    index = Math.floor(index / numFlips);\n    orientation[i] = ori;\n    parity += ori;\n  }\n\n  // Restore the last piece based on the orientation of the other pieces.\n  orientation[numPieces - 1] = (numFlips - (parity % numFlips)) % numFlips;\n\n  return orientation;\n};\n\n/**\n * Each move on a cube perform an even number of swaps when considering\n * both edges and corner pieces at the same time. Thus, only half of all\n * cube states are reachable using legal moves. This also implies that\n * for a cube to be solvable, the parity of both corners and edges must\n * both be either even or odd. We use this to verify that a cube is\n * solvable when generating random state scrambles, and also to\n * describe the overall cube permutation using only 10 edges, 6 corners\n * and the parity of either the corners or the edges.\n */\nexport const getParity = (pieces: number[]): number => {\n  let sum = 0;\n\n  for (let i = pieces.length - 1; i > 0; i -= 1) {\n    for (let j = i - 1; j >= 0; j -= 1) {\n      if (pieces[j] > pieces[i]) {\n        sum += 1;\n      }\n    }\n  }\n\n  return sum % 2;\n};\n\n/**\n * Encodes the permutation of the affected pieces within the entire\n * permutation vector, by encoding both their position and then the\n * permutation of the affected pieces within the permutation vector\n * using a variable-base number system. If reversed is true, the\n * values are assigned right-to-left. This is used in the Kociemba\n * solver, so that 0 is used as the solved coordinate for the move\n * table describing the UD-slice edges.\n */\nexport const getIndexFromPermutation = (\n  pieces: number[],\n  affected: number[],\n  reversed = false\n): number => {\n  let offset = pieces.length - 1;\n  let position = 0;\n  let k = 1;\n\n  // Store the permutation of the subarray containing\n  // only the affected pieces.\n  const edges = [];\n\n  // Encode the position of the affected pieces in a number\n  // from 0 up to n choose k, where n is the number of pieces\n  // in the permutation vector and k is the number of affected pieces.\n  if (reversed) {\n    for (let n = pieces.length - 1; n >= 0; n -= 1) {\n      if (affected.indexOf(pieces[n]) >= 0) {\n        offset = Math.min(offset, pieces[n]);\n        position += choose(pieces.length - 1 - n, k);\n        edges.unshift(pieces[n]);\n        k += 1;\n      }\n    }\n  } else {\n    for (let n = 0; n < pieces.length; n += 1) {\n      if (affected.indexOf(pieces[n]) >= 0) {\n        offset = Math.min(offset, pieces[n]);\n        position += choose(n, k);\n        edges.push(pieces[n]);\n        k += 1;\n      }\n    }\n  }\n\n  let permutation = 0;\n\n  // Encode the position of the subarray as a number from 0 and up\n  // to n factorial, where n is the number of affected pieces.\n  for (let i = edges.length - 1; i > 0; i -= 1) {\n    let s = 0;\n\n    while (edges[i] !== affected[i]) {\n      rotateLeft(edges, 0, i);\n      s += 1;\n    }\n\n    permutation = (i + 1) * permutation + s;\n  }\n\n  // Encode both the position and the permutation\n  // as a number using a variable base.\n  return factorial(affected.length) * position + permutation;\n};\n\n/**\n * Restores the permutation described by an index, number of affected\n * pieces and the permutation vector size. If reversed is true, the\n * indexes have been assigned right-to-left.\n */\nexport const getPermutationFromIndex = (\n  index: number,\n  affected: number[],\n  size: number,\n  reversed = false\n): number[] => {\n  const base = factorial(affected.length);\n\n  let position = Math.floor(index / base);\n  let permutation = index % base;\n\n  const pieces = [];\n\n  for (let i = 0; i < size; i += 1) {\n    pieces.push(-1);\n  }\n\n  for (let i = 1; i < affected.length; i += 1) {\n    let s = permutation % (i + 1);\n    permutation = Math.floor(permutation / (i + 1));\n\n    while (s > 0) {\n      rotateRight(affected, 0, i);\n      s -= 1;\n    }\n  }\n\n  let k = affected.length - 1;\n\n  if (reversed) {\n    for (let n = 0; n < size; n += 1) {\n      const binomial = choose(size - 1 - n, k + 1);\n\n      if (position - binomial >= 0) {\n        pieces[n] = affected[affected.length - 1 - k];\n        position -= binomial;\n        k -= 1;\n      }\n    }\n  } else {\n    for (let n = size - 1; n >= 0; n -= 1) {\n      const binomial = choose(n, k + 1);\n\n      if (position - binomial >= 0) {\n        pieces[n] = affected[k];\n        position -= binomial;\n        k -= 1;\n      }\n    }\n  }\n\n  return pieces;\n};\n","import { CubeIndexes, Corners, Edges } from \"app/common/cube/libs/cube\";\n\nconst arePiecesPermutated = (\n  cubeState: CubeIndexes,\n  edges: number[],\n  corners: number[]\n) => {\n  for (const edgeIdx of edges)\n    if (cubeState.ep[edgeIdx] !== edgeIdx) return false;\n  for (const cornerIdx of corners)\n    if (cubeState.cp[cornerIdx] !== cornerIdx) return false;\n  return true;\n};\n\nconst arePiecesOriented = (\n  cubeState: CubeIndexes,\n  edges: number[],\n  corners: number[]\n) => {\n  for (const edgeIdx of edges) if (cubeState.eo[edgeIdx] !== 0) return false;\n  for (const cornerIdx of corners)\n    if (cubeState.co[cornerIdx] !== 0) return false;\n  return true;\n};\n\nconst arePiecesPermutatedAndOriented = (\n  cubeState: CubeIndexes,\n  edges: number[],\n  corners: number[]\n) =>\n  arePiecesOriented(cubeState, edges, corners) &&\n  arePiecesPermutated(cubeState, edges, corners);\n\nexport const isCrossSolved = (cubeState: CubeIndexes): boolean =>\n  arePiecesPermutatedAndOriented(\n    cubeState,\n    [Edges.DB, Edges.DF, Edges.DL, Edges.DR],\n    []\n  );\n\nexport const isTopCrossSolved = (cubeState: CubeIndexes): boolean =>\n  arePiecesPermutatedAndOriented(\n    cubeState,\n    [Edges.DB, Edges.DF, Edges.DL, Edges.DR],\n    []\n  );\n\nexport const isF2LSolved = (cubeState: CubeIndexes): boolean =>\n  isCrossSolved(cubeState) &&\n  arePiecesPermutatedAndOriented(\n    cubeState,\n    [Edges.BL, Edges.BR, Edges.FL, Edges.FR],\n    [Corners.DBL, Corners.DBR, Corners.DFR, Corners.DLF]\n  );\n\nexport const isFirstLookOLLSolved = (cubeState: CubeIndexes): boolean =>\n  isF2LSolved &&\n  arePiecesOriented(cubeState, [Edges.UB, Edges.UF, Edges.UL, Edges.UR], []);\n\nexport const isOLLSolved = (cubeState: CubeIndexes): boolean =>\n  isF2LSolved &&\n  arePiecesOriented(\n    cubeState,\n    [Edges.UB, Edges.UF, Edges.UL, Edges.UR],\n    [Corners.UBR, Corners.UFL, Corners.ULB, Corners.URF]\n  );\n\n// TODO test if when top layer is rotated if cube pll first look solved\nexport const isFirstLookPLLSolved = (cubeState: CubeIndexes): boolean =>\n  isOLLSolved &&\n  arePiecesPermutated(\n    cubeState,\n    [],\n    [Corners.UBR, Corners.UFL, Corners.ULB, Corners.URF]\n  );\n\nexport const isCubeSolved = (cubeState: CubeIndexes): boolean =>\n  isF2LSolved &&\n  arePiecesPermutatedAndOriented(\n    cubeState,\n    [Edges.UB, Edges.UF, Edges.UL, Edges.UR],\n    [Corners.UBR, Corners.UFL, Corners.ULB, Corners.URF]\n  );\n","import { doAlgorithm, identity, CubeIndexes } from \"app/common/cube/libs/cube\";\nimport {\n  getIndexFromOrientation,\n  getIndexFromPermutation,\n} from \"app/common/cube/libs/coordinates\";\nimport { isTopCrossSolved } from \"app/common/cube/libs/cfop-criteria\";\n\nconst cubeFaces = [\"D\", \"L\", \"B\", \"U\", \"R\", \"F\"];\nconst moveModifiers = [\"\", \"2\", \"'\"];\n\nexport function generateScramble(total = 26): string {\n  return scramble(total).join(\" \");\n}\n\nconst scramble = (total = 26): string[] => {\n  const previousCubeStates = new Set();\n  let currentState = identity;\n  const moves = [];\n\n  while (moves.length < total) {\n    // Generate a random move\n    const move =\n      cubeFaces[Math.floor(Math.random() * 6)] +\n      moveModifiers[Math.floor(Math.random() * 3)];\n    if (move.charAt(0) === \"U\") {\n      continue;\n    }\n    // Don't move the same face twice in a row\n    if (\n      moves.length > 0 &&\n      move.charAt(0) === moves[moves.length - 1].charAt(0)\n    ) {\n      continue;\n    }\n    // Avoid move sequences like \"R L R\", which is the same as \"R2 L\"\n    if (\n      moves.length > 1 &&\n      move.charAt(0) === moves[moves.length - 2].charAt(0) &&\n      moves[moves.length - 1].charAt(0) ===\n        cubeFaces[(cubeFaces.indexOf(move.charAt(0)) + 3) % 6]\n    ) {\n      continue;\n    }\n\n    // ensure state has not been repeated earlier in the scramble\n    const newState = doAlgorithm(move, currentState);\n    const stateHashCode = getStateHashCode(newState);\n    if (!previousCubeStates.has(stateHashCode)) {\n      moves.push(move);\n      previousCubeStates.add(stateHashCode);\n      currentState = newState;\n    }\n  }\n  return isTopCrossSolved(currentState) ? scramble(total) : moves;\n};\n\nconst getStateHashCode = (cubeState: CubeIndexes) => {\n  const cpIndex = getIndexFromPermutation(cubeState.cp, identity.cp);\n  const coIndex = getIndexFromOrientation(cubeState.co, 3);\n  const epIndex = getIndexFromPermutation(cubeState.ep, identity.ep);\n  const eoIndex = getIndexFromOrientation(cubeState.co, 2);\n  return `${cpIndex}:${coIndex}:${epIndex}:${eoIndex}`;\n};\n","import {\n  getIndexFromPermutation,\n  getPermutationFromIndex,\n  getIndexFromOrientation,\n  getParity,\n} from \"app/common/cube/libs/coordinates\";\n\nimport {\n  MoveTable,\n  createEdgePermutationTable,\n  createCornerPermutationTable,\n  createEdgeOrientationTable,\n  createCornerOrientationTable,\n} from \"app/common/cube/libs/move-table\";\n\nimport Search, { SearchSolution } from \"app/common/cube/libs/search\";\n\nimport { fiveSideMoves } from \"app/common/cube/libs/cube\";\n\n// In phase two, only quarter moves of U and D and double turns of\n// all the other faces are allowed, in order to keep the cube in\n// the phase two group G1.\nconst phaseTwoMoves = [10, 4, 13, 6, 7, 8, 15, 16, 17];\n\n// The following tables are being used in both phases.\nlet parity: MoveTable;\nlet URFToDLF: MoveTable;\nlet slice: MoveTable;\nlet merge: number[][];\n\nconst phaseTwoSearch = new Search(() => {\n  // In order to start phase two, we need to know the positions\n  // in which the pieces landed after solving the cube into G1.\n  // Since returning to the cubie level to perform the solution\n  // would be slow, we use two helper tables in phase one which\n  // later are merged into the final phase two coordinate.\n  const getMergeCoord = (x: number, y: number) => {\n    const a = getPermutationFromIndex(x, [0, 1, 2], 12);\n    const b = getPermutationFromIndex(y, [3, 4, 5], 12);\n\n    for (let i = 0; i < 8; i += 1) {\n      if (a[i] !== -1) {\n        if (b[i] !== -1) {\n          return -1;\n        }\n        b[i] = a[i];\n      }\n    }\n\n    return getIndexFromPermutation(b, [0, 1, 2, 3, 4, 5]);\n  };\n\n  merge = [];\n\n  // Due to the sorted nature of our coordinate definitions, the\n  // index of both the coordinates will be less than 336 when phase\n  // one is finished. This allows for a pretty small merging table.\n  for (let i = 0; i < 336; i += 1) {\n    merge.push([]);\n\n    for (let j = 0; j < 336; j += 1) {\n      merge[i][j] = getMergeCoord(i, j);\n    }\n  }\n\n  return {\n    moveTables: [\n      // The permutation of the slice pices, which already\n      // are in the correct positions on the cube.\n      new MoveTable({\n        name: \"slicePermutation\",\n        size: 24,\n        table: slice.table,\n      }),\n\n      parity,\n      URFToDLF,\n\n      createEdgePermutationTable({\n        name: \"URToDF\",\n        size: 20160,\n        moves: phaseTwoMoves,\n        affected: [0, 1, 2, 3, 4, 5],\n      }),\n    ],\n\n    pruningTables: [\n      [\"slicePermutation\", \"parity\", \"URFToDLF\"],\n      [\"slicePermutation\", \"parity\", \"URToDF\"],\n    ],\n  };\n}, phaseTwoMoves);\n\nclass TwoPhaseSearch extends Search {\n  maxDepth: number;\n  solution: number[];\n\n  constructor(...args: ConstructorParameters<typeof Search>) {\n    super(...args);\n\n    this.maxDepth = 40;\n    this.solution = [];\n  }\n\n  handleSolution(\n    solution: number[],\n    indexes: number[]\n  ): SearchSolution | false {\n    const lastMove = solution.slice(-1)[0];\n\n    // We do not allow solutions which end in a phase two move, as we then\n    // would end up duplicating work.\n    if (\n      lastMove % 2 === 0 &&\n      Math.floor(lastMove / 3) === 6 &&\n      Math.floor(lastMove / 3) === 15\n    ) {\n      return false;\n    }\n\n    const phaseTwoSolution = phaseTwoSearch.solve({\n      indexes: [\n        indexes[3],\n        indexes[4],\n        indexes[5],\n        merge[indexes[6]][indexes[7]],\n      ],\n      maxDepth: this.maxDepth - solution.length,\n      lastMove,\n      format: false,\n    });\n\n    if (phaseTwoSolution) {\n      this.solution = solution.concat(phaseTwoSolution.solution);\n\n      if (this.maxDepth <= this.settings.maxDepth) {\n        return {\n          solution: this.solution,\n          indexes,\n        };\n      }\n\n      this.maxDepth = this.solution.length - 1;\n    }\n\n    return false;\n  }\n}\n\nexport const fiveSideSearch = new TwoPhaseSearch(() => {\n  // The parity move table is so small that we inline it. It\n  // describes the parity of both the edge and corner pieces,\n  // which must be equal for the cube to be solvable. The\n  // coordinate is included in both phases, but only used\n  // in phase two.\n  parity = new MoveTable({\n    name: \"parity\",\n\n    size: 2,\n\n    table: [\n      [1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1],\n      [0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0],\n    ],\n  });\n\n  URFToDLF = createCornerPermutationTable({\n    name: \"URFToDLF\",\n    affected: [0, 1, 2, 3, 4, 5],\n  });\n\n  // This table is not used directly. This coordinate modulo 24 gives the\n  // permutation of the subarray containing the UD-slice pieces, while this\n  // coordinate divided by 24 gives the position of the UD-slice pieces.\n  // Two smaller move tables are created using this table, one to solve the\n  // position of the UD-slice pieces in phase one, and one to solve the\n  // pieces in phase two. Due to the reduced move set in phase two, the pruning\n  // table for this coordinate is smaller than it would normally be.\n  slice = createEdgePermutationTable({\n    name: \"slice\",\n    affected: [8, 9, 10, 11],\n    reversed: true,\n  });\n\n  // Initialize phase two, since it now is guaranteed that the\n  // heper move tables have finished generating.\n  phaseTwoSearch.initialize();\n\n  return {\n    moveTables: [\n      new MoveTable({\n        // The position of the slice edges. When this coordinate is\n        // solved, the UD-slice pieces are in the UD-slice, but they\n        // are not necessarily permuted.\n        name: \"slicePosition\",\n        size: 495,\n        table: slice.table,\n        doMove: (table, index, move) =>\n          Math.floor(table[index * 24][move] / 24),\n      }),\n\n      createCornerOrientationTable({\n        name: \"twist\",\n        affected: [0, 1, 2, 3, 4, 5, 6, 7],\n      }),\n\n      createEdgeOrientationTable({\n        name: \"flip\",\n        affected: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],\n      }),\n\n      slice,\n      parity,\n      URFToDLF,\n\n      createEdgePermutationTable({\n        name: \"URToUL\",\n        affected: [0, 1, 2],\n      }),\n\n      createEdgePermutationTable({\n        name: \"UBToDF\",\n        affected: [3, 4, 5],\n      }),\n    ],\n\n    pruningTables: [\n      [\"slicePosition\", \"flip\"],\n      [\"slicePosition\", \"twist\"],\n    ],\n  };\n}, fiveSideMoves);\n\nexport const fiveSideSolver = (\n  scramble: string | number[],\n  maxDepth = 40\n): false | string => {\n  if (Array.isArray(scramble)) {\n    return fiveSideSearch.solve({\n      indexes: scramble,\n      maxDepth,\n    });\n  }\n\n  return fiveSideSearch.solve({\n    scramble,\n    maxDepth,\n  });\n};\n\nexport const solveCoordinates = (\n  eo: number[],\n  ep: number[],\n  co: number[],\n  cp: number[]\n): ReturnType<typeof fiveSideSolver> =>\n  fiveSideSolver([\n    Math.floor(getIndexFromPermutation(ep, [8, 9, 10, 11], true) / 24),\n    getIndexFromOrientation(co, 3),\n    getIndexFromOrientation(eo, 2),\n    getIndexFromPermutation(ep, [8, 9, 10, 11], true),\n    getParity(cp),\n    getIndexFromPermutation(cp, [0, 1, 2, 3, 4, 5]),\n    getIndexFromPermutation(ep, [0, 1, 2]),\n    getIndexFromPermutation(ep, [3, 4, 5]),\n  ]);\n","import {\n  getPermutationFromIndex,\n  getIndexFromPermutation,\n  getOrientationFromIndex,\n  getIndexFromOrientation,\n} from \"./coordinates\";\n\nimport {\n  doEdgeMove,\n  doCornerMove,\n  moveHelper,\n  allMoves,\n  identity,\n} from \"./cube\";\n\nimport { factorial } from \"./tools\";\n\n/**\n * Create a function which performs a move on a coordinate.\n */\nconst createMoveHandler = (\n  getVector: GetVectorCallback,\n  cubieMove: CubieMoveCallback,\n  getIndex: GetIndexCallback\n) => (index: number, move: number) => {\n  let vector = getVector(index);\n  vector = cubieMove(vector, move);\n  return getIndex(vector);\n};\n\ntype GetVectorCallback = (index: number) => number[];\ntype CubieMoveCallback = (pieces: number[], moveIndex: number) => number[];\ntype GetIndexCallback = (pieces: number[]) => number;\n\ninterface BaseMoveTableSettings {\n  name: string;\n  size: number;\n  defaultIndex?: number;\n  solvedIndexes?: number[];\n  doMove?: (table: number[][], index: number, move: number) => number;\n}\n\ninterface MoveTableSettingsWithTable extends BaseMoveTableSettings {\n  table: number[][];\n}\n\nexport interface MoveTableSettingsWithoutTable extends BaseMoveTableSettings {\n  moves?: number[];\n  getVector: GetVectorCallback;\n  cubieMove: (pieces: number[], moveIndex: number) => number[];\n  getIndex: GetIndexCallback;\n}\n\nexport type MoveTableSettings =\n  | MoveTableSettingsWithTable\n  | MoveTableSettingsWithoutTable;\n\nexport class MoveTable {\n  name: string;\n  size: number;\n  defaultIndex: number;\n  solvedIndexes: number[];\n  table: number[][];\n\n  constructor(settings: MoveTableSettings) {\n    // A name must be provided if the generic solver is being used, as\n    // we use them to create the pruning tables.\n    this.name = settings.name;\n\n    // Some tables in the Kociemba solver define their own size, as\n    // they are a subset of another already generated helper table.\n    this.size = settings.size;\n\n    this.defaultIndex = settings.defaultIndex || 0;\n    this.solvedIndexes = settings.solvedIndexes || [this.defaultIndex];\n\n    // We allow defining a custom function that returns the updated\n    // index. This is useful for helper tables which are subsets\n    // of already generated tables.\n    const doMove = settings.doMove;\n    if (doMove) {\n      this.doMove = (index, move) => doMove(this.table, index, move);\n    }\n\n    if (\"table\" in settings) {\n      this.table = settings.table;\n\n      // If a pre-generated table is provide, do not generate another one.\n      return;\n    }\n\n    const cubieMove = createMoveHandler(\n      settings.getVector,\n      settings.cubieMove,\n      settings.getIndex\n    );\n\n    this.table = this.createMoveTable(settings.size, cubieMove, settings.moves);\n  }\n\n  doMove(index: number, move: number): number {\n    return this.table[index][move];\n  }\n\n  createMoveTable(\n    size: number,\n    cubieMove: ReturnType<typeof createMoveHandler>,\n    moves = allMoves\n  ): number[][] {\n    const table: number[][] = [];\n\n    for (let i = 0; i < size; i += 1) {\n      table.push([]);\n    }\n\n    // Create a matrix which stores the result after\n    // applying a move to a coordinate.\n    for (let i = 0; i < size; i += 1) {\n      for (let j = 0; j < moves.length; j += 1) {\n        const move = moves[j];\n\n        if (!table[i][move]) {\n          // Assign both the value and its inverse at once\n          // to avoid exess computing on the cubie level.\n          const result = cubieMove(i, move);\n          const inverse = move - 2 * (move % 3) + 2;\n          table[i][move] = result;\n          table[result][inverse] = i;\n        }\n      }\n    }\n\n    return table;\n  }\n}\n\nexport interface PermutationTableSettings {\n  name: string;\n  moves?: number[];\n  affected: number[];\n  reversed?: boolean;\n  size?: number;\n}\n\nexport const createCornerPermutationTable = (\n  settings: PermutationTableSettings\n): MoveTable =>\n  new MoveTable({\n    name: settings.name,\n    moves: settings.moves,\n    defaultIndex: getIndexFromPermutation(\n      [0, 1, 2, 3, 4, 5, 6, 7],\n      settings.affected,\n      settings.reversed\n    ),\n    size:\n      settings.size || factorial(8) / factorial(8 - settings.affected.length),\n    getVector: (index) =>\n      getPermutationFromIndex(\n        index,\n        settings.affected.slice(),\n        8,\n        settings.reversed\n      ),\n    cubieMove: (pieces, moveIndex) =>\n      moveHelper({ cp: pieces, co: identity.co }, moveIndex, doCornerMove).cp,\n    getIndex: (pieces) =>\n      getIndexFromPermutation(pieces, settings.affected, settings.reversed),\n  });\n\nexport const createEdgePermutationTable = (\n  settings: PermutationTableSettings\n): MoveTable =>\n  new MoveTable({\n    name: settings.name,\n    moves: settings.moves,\n    defaultIndex: getIndexFromPermutation(\n      [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],\n      settings.affected,\n      settings.reversed\n    ),\n    size:\n      settings.size || factorial(12) / factorial(12 - settings.affected.length),\n    getVector: (index) =>\n      getPermutationFromIndex(\n        index,\n        settings.affected.slice(),\n        12,\n        settings.reversed\n      ),\n    cubieMove: (pieces, moveIndex) =>\n      moveHelper({ ep: pieces, eo: identity.eo }, moveIndex, doEdgeMove).ep,\n    getIndex: (pieces) =>\n      getIndexFromPermutation(pieces, settings.affected, settings.reversed),\n  });\n\nconst getCorrectOrientations = (\n  affected: number[],\n  numPieces: number,\n  numStates: number\n) => {\n  const indexes = [];\n\n  const size = numStates ** (numPieces - 1);\n\n  const target = numStates ** (numPieces - affected.length - 1);\n\n  for (let i = 0; i < size && indexes.length < target; i += 1) {\n    const orientation = getOrientationFromIndex(i, numPieces, numStates);\n\n    if (affected.every((piece) => orientation[piece] === 0)) {\n      indexes.push(i);\n    }\n  }\n\n  return indexes;\n};\n\nexport interface OrientationTableSettings {\n  name: string;\n  affected: number[];\n}\n\nexport const createEdgeOrientationTable = (\n  settings: OrientationTableSettings\n): MoveTable =>\n  new MoveTable({\n    name: settings.name,\n    size: 2048,\n    solvedIndexes: getCorrectOrientations(settings.affected, 12, 2),\n    getVector: (index) => getOrientationFromIndex(index, 12, 2),\n    cubieMove: (pieces, moveIndex) =>\n      moveHelper({ ep: identity.ep, eo: pieces }, moveIndex, doEdgeMove).eo,\n    getIndex: (pieces) => getIndexFromOrientation(pieces, 2),\n  });\n\nexport const createCornerOrientationTable = (\n  settings: OrientationTableSettings\n): MoveTable =>\n  new MoveTable({\n    name: settings.name,\n    size: 2187,\n    solvedIndexes: getCorrectOrientations(settings.affected, 8, 3),\n    getVector: (index) => getOrientationFromIndex(index, 8, 3),\n    cubieMove: (pieces, moveIndex) =>\n      moveHelper({ cp: identity.cp, co: pieces }, moveIndex, doCornerMove).co,\n    getIndex: (pieces) => getIndexFromOrientation(pieces, 3),\n  });\n","import { cartesian } from \"./tools\";\nimport { MoveTable } from \"./move-table\";\n\n/**\n * A pruning table gives a lower bound on the number of moves\n * required to reach a target state.\n */\nclass PruningTable {\n  table: number[];\n  constructor(moveTables: MoveTable[], moves: number[]) {\n    this.table = [];\n    this.computePruningTable(moveTables, moves);\n  }\n\n  setPruningValue(index: number, value: number): void {\n    this.table[index >> 3] ^= (0xf ^ value) << ((index & 7) << 2);\n  }\n\n  getPruningValue(index: number): number {\n    return (this.table[index >> 3] >> ((index & 7) << 2)) & 0xf;\n  }\n\n  computePruningTable(moveTables: MoveTable[], moves: number[]): void {\n    const size = moveTables.reduce((acc, obj) => acc * obj.size, 1);\n\n    this.table.length = 0;\n\n    for (let i = 0; i < (size + 7) >> 3; i += 1) {\n      this.table.push(-1);\n    }\n\n    let depth = 0;\n    let done = 0;\n\n    const powers = [1];\n\n    for (let i = 1; i < moveTables.length; i += 1) {\n      powers.push(moveTables[i - 1].size * powers[i - 1]);\n    }\n\n    const permutations = cartesian(\n      moveTables.map((data) => data.solvedIndexes)\n    );\n\n    for (let i = 0; i < permutations.length; i += 1) {\n      let index = 0;\n\n      for (let j = 0; j < permutations[i].length; j += 1) {\n        index += powers[j] * permutations[i][j];\n      }\n\n      this.setPruningValue(index, 0);\n\n      done += 1;\n    }\n\n    // We generate the table using a BFS. Depth 0 contains all positions which\n    // are solved, and we loop through the correct indexes and apply all 18 moves\n    // to the correct states. Then we visit all positions at depth 2, and apply\n    // the 18 moves, and so on.\n    while (done !== size) {\n      // When half the table is generated, we switch to a backward search\n      // where we apply the 18 moves to all empty entries. If the result\n      // is a position which corresponds to the previous depth, we set the\n      // index to the current depth.\n      const inverse = done > size / 2;\n      const find = inverse ? 0xf : depth;\n      const check = inverse ? depth : 0xf;\n\n      depth += 1;\n\n      for (let index = 0; index < size; index += 1) {\n        if (this.getPruningValue(index) === find) {\n          for (let moveIndex = 0; moveIndex < moves.length; moveIndex += 1) {\n            const move = moves[moveIndex];\n\n            let currentIndex = index;\n            let position = 0;\n\n            for (let i = powers.length - 1; i >= 0; i -= 1) {\n              position +=\n                powers[i] *\n                moveTables[i].doMove(\n                  Math.floor(currentIndex / powers[i]),\n                  move\n                );\n              currentIndex %= powers[i];\n            }\n\n            if (this.getPruningValue(position) === check) {\n              done += 1;\n\n              if (inverse) {\n                this.setPruningValue(index, depth);\n                break;\n              }\n\n              this.setPruningValue(position, depth);\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nexport default PruningTable;\n","import { parseAlgorithm, formatAlgorithm, invertAlgorithm } from \"./algorithms\";\nimport PruningTable from \"./pruning-table\";\nimport { allMoves } from \"./cube\";\nimport { MoveTable } from \"./move-table\";\n\nexport interface CreateTableCallback {\n  (): {\n    moveTables: MoveTable[];\n    pruningTables: string[][];\n  };\n}\n\nexport interface SearchSolution {\n  indexes: number[];\n  solution: number[]; // array of move indexes\n}\n\ninterface BaseSearchSettings {\n  scramble?: string;\n  maxDepth?: number;\n  lastMove?: number;\n  format?: boolean;\n  indexes?: number[];\n}\n\nexport interface SearchSettingsWithoutFormat extends BaseSearchSettings {\n  format: false;\n}\n\nexport interface SearchSettingsWithFormat extends BaseSearchSettings {\n  format?: true;\n}\n\nexport type SearchSettings =\n  | SearchSettingsWithFormat\n  | SearchSettingsWithoutFormat;\n\ntype DefaultedSearchSettings = Required<\n  Pick<SearchSettings, \"maxDepth\" | \"lastMove\" | \"format\">\n> &\n  SearchSettings;\n\nclass Search {\n  moves: number[];\n  initialized!: boolean;\n  moveTables!: MoveTable[];\n  settings!: DefaultedSearchSettings;\n  pruningTables!: Array<{\n    pruningTable: PruningTable;\n    moveTableIndexes: number[];\n  }>;\n  createTables: CreateTableCallback;\n\n  constructor(createTables: CreateTableCallback, moves = allMoves) {\n    this.createTables = createTables;\n    this.moves = moves;\n  }\n\n  initialize(): void {\n    if (this.initialized) {\n      return;\n    }\n\n    this.initialized = true;\n\n    const { moveTables, pruningTables } = this.createTables();\n\n    this.moveTables = moveTables;\n\n    this.pruningTables = [];\n\n    pruningTables.forEach((moveTableNames) => {\n      const moveTableIndexes = moveTableNames.map((name) =>\n        this.moveTables.map((table) => table.name).indexOf(name)\n      );\n\n      moveTableIndexes.sort(\n        (a, b) => this.moveTables[a].size - this.moveTables[b].size\n      );\n\n      const mappedTables: MoveTable[] = [];\n\n      moveTableIndexes.forEach((i) => mappedTables.push(this.moveTables[i]));\n\n      const pruningTable = new PruningTable(mappedTables, this.moves);\n\n      this.pruningTables.push({\n        pruningTable,\n        moveTableIndexes,\n      });\n    });\n  }\n\n  handleSolution(\n    solution: number[],\n    indexes: number[]\n  ): SearchSolution | false {\n    return {\n      solution,\n      indexes,\n    };\n  }\n\n  search(\n    indexes: number[],\n    depth: number,\n    lastMove: number,\n    solution: number[]\n  ): SearchSolution | false {\n    let minimumDistance = 0;\n\n    for (let i = 0; i < this.pruningTables.length; i += 1) {\n      let index = indexes[this.pruningTables[i].moveTableIndexes[0]];\n      let power = 1;\n\n      for (\n        let j = 1;\n        j < this.pruningTables[i].moveTableIndexes.length;\n        j += 1\n      ) {\n        power *= this.moveTables[this.pruningTables[i].moveTableIndexes[j - 1]]\n          .size;\n        index += indexes[this.pruningTables[i].moveTableIndexes[j]] * power;\n      }\n\n      const distance = this.pruningTables[i].pruningTable.getPruningValue(\n        index\n      );\n\n      if (distance > depth) {\n        return false;\n      }\n\n      // The true minimum distance to the solved indexes is\n      // given by the pruning table with the largest distance.\n      if (distance > minimumDistance) {\n        minimumDistance = distance;\n      }\n    }\n\n    if (minimumDistance === 0) {\n      return this.handleSolution(solution, indexes);\n    }\n\n    if (depth > 0) {\n      for (let i = 0; i < this.moves.length; i += 1) {\n        const move = this.moves[i];\n\n        if (\n          Math.floor(move / 3) !== Math.floor(lastMove / 3) &&\n          Math.floor(move / 3) !== Math.floor(lastMove / 3) - 3\n        ) {\n          const updatedIndexes = [];\n\n          for (let j = 0; j < indexes.length; j += 1) {\n            updatedIndexes.push(this.moveTables[j].doMove(indexes[j], move));\n          }\n\n          const result = this.search(\n            updatedIndexes,\n            depth - 1,\n            move,\n            solution.concat([move])\n          );\n\n          if (result) {\n            return result;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  solve(settings: SearchSettingsWithFormat): string | false;\n  solve(settings: SearchSettingsWithoutFormat): SearchSolution | false;\n  solve(settings: SearchSettings): SearchSolution | string | false {\n    this.initialize();\n\n    this.settings = {\n      maxDepth: 22, // For the Kociemba solver.\n      lastMove: 0,\n      format: true,\n      ...settings,\n    };\n\n    const indexes = this.settings.indexes || [];\n\n    let solutionRotation;\n\n    if (this.settings.scramble) {\n      const [moves, totalRotation] = parseAlgorithm(\n        `x ${this.settings.scramble}`,\n        true\n      );\n\n      if (totalRotation.length > 0) {\n        solutionRotation = invertAlgorithm(totalRotation.join(\" \"));\n      }\n\n      for (let i = 0; i < this.moveTables.length; i += 1) {\n        indexes.push(this.moveTables[i].defaultIndex);\n      }\n\n      moves.forEach((move) => {\n        for (let i = 0; i < indexes.length; i += 1) {\n          indexes[i] = this.moveTables[i].doMove(indexes[i], move);\n        }\n      });\n    }\n\n    for (let depth = 0; depth <= this.settings.maxDepth; depth += 1) {\n      const solution = this.search(indexes, depth, this.settings.lastMove, []);\n\n      if (solution) {\n        if (this.settings.format) {\n          const formatted = formatAlgorithm(solution.solution);\n\n          if (solutionRotation) {\n            // If we have rotations in the scramble, apply them to the solution\n            // and then parse again to remove the rotations. This results in a\n            // solution that can be applied from the result scramble orientation.\n            return formatAlgorithm(\n              parseAlgorithm(`${solutionRotation} ${formatted}`)\n            );\n          }\n\n          return formatted;\n        }\n\n        return solution;\n      }\n    }\n\n    return false;\n  }\n}\n\nexport default Search;\n","import {\n  getPermutationFromIndex,\n  getOrientationFromIndex,\n  getParity,\n} from \"app/common/cube/libs/coordinates\";\n\nimport { getRandomInt, factorial } from \"app/common/cube/libs/tools\";\n\nimport { identity, CubeIndexes } from \"app/common/cube/libs/cube\";\n\nimport {\n  solveCoordinates,\n  fiveSideSolver,\n} from \"app/common/cube/solvers/five-side-solver\";\n\nconst getEdgeOrientation = (enabled: number[], orientLastLayer: boolean) => {\n  const pieces = getOrientationFromIndex(\n    getRandomInt(0, 2 ** (enabled.length - 1)),\n    enabled.length,\n    2\n  );\n\n  const orientation = Array(12).fill(0);\n\n  if (!orientLastLayer) {\n    enabled.forEach((piece, i) => {\n      orientation[piece] = pieces[i];\n    });\n  }\n\n  return orientation;\n};\n\nconst getCornerOrientation = (enabled: number[], orientLastLayer: boolean) => {\n  const pieces = getOrientationFromIndex(\n    getRandomInt(0, 3 ** (enabled.length - 1)),\n    enabled.length,\n    3\n  );\n\n  const orientation = Array(8).fill(0);\n\n  if (!orientLastLayer) {\n    enabled.forEach((piece, i) => {\n      orientation[piece] = pieces[i];\n    });\n  }\n\n  return orientation;\n};\n\n/**\n * Returns a permutation vector where all pieces are\n * solved, except for the given enabled pieces.\n */\nconst getPermutationFromEnabled = (enabled: number[], size: number) => {\n  const pieces = getPermutationFromIndex(\n    getRandomInt(0, factorial(enabled.length)),\n    enabled.slice(0),\n    enabled.length\n  );\n\n  const permutation = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11].slice(0, size);\n\n  enabled.forEach((piece, i) => {\n    permutation[piece] = pieces[i];\n  });\n\n  return permutation;\n};\n\n/**\n * Generates a random scramble where all pieces are solved, except\n * for the provided edges and corners, which will be scrambled randomly.\n */\nexport const getScrambleForPieces = (\n  scrambleEdges: number[],\n  scrambleCorners: number[],\n  isScrambleSolved: (state: CubeIndexes) => boolean,\n  orientLastLayer = false\n): string | false => {\n  let ep, eo, cp, co;\n  const center = identity.center;\n\n  do {\n    ep = getPermutationFromEnabled(scrambleEdges, 12);\n    eo = getEdgeOrientation(scrambleEdges, orientLastLayer);\n    cp = getPermutationFromEnabled(scrambleCorners, 8);\n    co = getCornerOrientation(scrambleCorners, orientLastLayer);\n    console.log(`eo:${eo} ep:${ep} co:${co} cp:${cp}`);\n  } while (\n    getParity(ep) !== getParity(cp) ||\n    isScrambleSolved({ ep, eo, cp, co, center })\n  );\n\n  const solution = solveCoordinates(eo, ep, co, cp);\n  if (solution) {\n    return fiveSideSolver(solution);\n  }\n  return false;\n};\n\nexport default getScrambleForPieces;\n","import {\n  createEdgePermutationTable,\n  createEdgeOrientationTable,\n} from \"app/common/cube/libs/move-table\";\n\nimport Search from \"app/common/cube/libs/search\";\n\nimport { fiveSideMoves, Edges } from \"app/common/cube/libs/cube\";\n\nexport const CrossSearch = new Search(\n  () => ({\n    moveTables: [\n      createEdgePermutationTable({\n        name: \"EdgePermutation\",\n        affected: [Edges.DB, Edges.DF, Edges.DL, Edges.DR],\n      }),\n\n      createEdgeOrientationTable({\n        name: \"EdgeOrientation\",\n        affected: [Edges.DB, Edges.DF, Edges.DL, Edges.DR],\n      }),\n    ],\n\n    pruningTables: [[\"EdgePermutation\"], [\"EdgeOrientation\"]],\n  }),\n  fiveSideMoves\n);\n\nexport const crossSolver = (scramble: string): string | false =>\n  CrossSearch.solve({ scramble });\n","import {\n  CubeIndexes,\n  Centers,\n  Edges,\n  Corners,\n  identity,\n  doEdgeMove,\n  doCornerMove,\n  doCenterMove,\n} from \"./cube\";\n\nconst centerFacelets = [\"U\", \"R\", \"F\", \"D\", \"L\", \"B\"];\n\nconst cornerFacelets = [\n  [\"U8\", \"R0\", \"F2\"],\n  [\"U6\", \"F0\", \"L2\"],\n  [\"U0\", \"L0\", \"B2\"],\n  [\"U2\", \"B0\", \"R2\"],\n  [\"D2\", \"F8\", \"R6\"],\n  [\"D0\", \"L8\", \"F6\"],\n  [\"D6\", \"B8\", \"L6\"],\n  [\"D8\", \"R8\", \"B6\"],\n];\n\nconst edgeFacelets = [\n  [\"U5\", \"R1\"],\n  [\"U7\", \"F1\"],\n  [\"U3\", \"L1\"],\n  [\"U1\", \"B1\"],\n  [\"D5\", \"R7\"],\n  [\"D1\", \"F7\"],\n  [\"D3\", \"L7\"],\n  [\"D7\", \"B7\"],\n  [\"F5\", \"R3\"],\n  [\"F3\", \"L5\"],\n  [\"B5\", \"L3\"],\n  [\"B3\", \"R5\"],\n];\n\nconst { F, R, U, B, L, D } = Centers;\nconst { UR, UF, UL, UB, DR, DF, DL, DB, FR, FL, BL, BR } = Edges;\nconst { URF, UFL, ULB, UBR, DFR, DLF, DBL, DBR } = Corners;\n\nexport const rotations: Record<string, CubeIndexes> = {\n  x: {\n    center: [F, 1, D, B, 4, U],\n    cp: [DFR, DLF, UFL, URF, DBR, DBL, ULB, UBR],\n    co: [2, 1, 2, 1, 1, 2, 1, 2],\n    ep: [FR, DF, FL, UF, BR, DB, BL, UB, DR, DL, UL, UR],\n    eo: [0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0],\n  },\n  y: {\n    center: [0, B, R, 3, F, L],\n    cp: [UBR, URF, UFL, ULB, DBR, DFR, DLF, DBL],\n    co: identity.co,\n    ep: [3, 0, 1, 2, 7, 4, 5, 6, 11, 8, 9, 10],\n    eo: [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1],\n  },\n  z: {\n    center: [L, U, 2, R, D, 5],\n    cp: [UFL, DLF, DBL, ULB, URF, DFR, DBR, UBR],\n    co: [1, 2, 1, 2, 2, 1, 2, 1],\n    ep: [UL, FL, DF, BL, UR, FR, DR, BR, UF, DL, DB, UB],\n    eo: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n  },\n};\n\nconst mod = (n: number, m: number) => ((n % m) + m) % m;\n\nconst getFaceletIndex = (facelet: string) =>\n  centerFacelets.indexOf(facelet[0]) * 9 + Number(facelet[1]);\nconst getCornerFacelet = (\n  cube: CubeIndexes,\n  cornerIndex: number,\n  orientationIndex: number\n) => {\n  return cornerFacelets[cube.cp[cornerIndex]][\n    mod(orientationIndex - cube.co[cornerIndex], 3)\n  ][0];\n};\n\nconst getEdgeFacelet = (\n  cube: CubeIndexes,\n  edgeIndex: number,\n  orientationIndex: number\n) =>\n  edgeFacelets[cube.ep[edgeIndex]][\n    mod(orientationIndex - cube.eo[edgeIndex], 2)\n  ][0];\n\nexport interface FaceletArrayFilter {\n  edges?: number[];\n  corners?: number[];\n  facelets?: string[];\n}\n\nexport interface FaceletArrayOptions {\n  filter?: FaceletArrayFilter;\n  rotations?: string;\n}\n\nexport const getFaceletArray = (\n  cube: CubeIndexes,\n  options: FaceletArrayOptions = {}\n): string[] => {\n  const facelets: string[] = [];\n\n  if (options.rotations) {\n    cube = doRotations(cube, options.rotations);\n  }\n\n  // add center facelets to array\n  centerFacelets.forEach((facelet, centerIndex) => {\n    facelets[9 * cube.center[centerIndex] + 4] = facelet;\n  });\n\n  // add corner cubie facelets\n  cornerFacelets.forEach((corner, cornerIndex) => {\n    corner.forEach((facelet, orientation) => {\n      const faceletIndex = getFaceletIndex(facelet);\n      const faceletValue = getCornerFacelet(cube, cornerIndex, orientation);\n\n      facelets[faceletIndex] =\n        !options.filter ||\n        options.filter.corners?.includes(cube.cp[cornerIndex]) ||\n        options.filter.facelets?.includes(faceletValue)\n          ? faceletValue\n          : \"G\";\n    });\n  });\n\n  // add edge cubie facelets\n  edgeFacelets.forEach((edge, edgeIndex) => {\n    edge.forEach((facelet, orientation) => {\n      const faceletIndex = getFaceletIndex(facelet);\n      const faceletValue = getEdgeFacelet(cube, edgeIndex, orientation);\n\n      facelets[faceletIndex] =\n        !options.filter ||\n        options.filter.edges?.includes(cube.ep[edgeIndex]) ||\n        options.filter.facelets?.includes(faceletValue)\n          ? faceletValue\n          : \"G\";\n    });\n  });\n\n  return facelets;\n};\n\nconst powers: Record<string, number> = {\n  \"\": 1,\n  2: 2,\n  \"'\": 3,\n};\n\nexport const doRotations = (\n  cube: CubeIndexes,\n  rotationAlg: string\n): CubeIndexes => {\n  return rotationAlg\n    .split(\" \")\n    .map((rotation: string) => ({\n      move: rotations[rotation.charAt(0)],\n      pow: powers[rotation.charAt(1)],\n    }))\n    .reduce((newCube, { move, pow }) => {\n      for (let i = 0; i < pow; i++) {\n        newCube = {\n          center: doCenterMove(newCube.center, move),\n          ...doEdgeMove(newCube, move),\n          ...doCornerMove(newCube, move),\n        };\n      }\n      return newCube;\n    }, cube);\n};\n","import React from \"react\";\n\nimport { doAlgorithm } from \"app/common/cube/libs/cube\";\nimport {\n  getFaceletArray,\n  FaceletArrayFilter,\n} from \"app/common/cube/libs/cube-preview\";\n\ninterface CubePreviewProps {\n  scrambleCode: string;\n  filter?: FaceletArrayFilter;\n  colorMap?: Record<string, string>;\n}\n\nexport function CubePreview(props: CubePreviewProps): JSX.Element {\n  const cubeIndexes = doAlgorithm(props.scrambleCode);\n  const colorMap = props.colorMap ?? defaultColorMap;\n  const svgString = getFaceletArray(cubeIndexes, {\n    filter: props.filter,\n  })\n    .map((faceKey) => colorMap[faceKey])\n    .reduce((acc, color) => acc.replace(\"{}\", color), template);\n\n  return (\n    <div\n      className=\"computer:w-96 computer:self-start phone:w-3/4 phone:self-center\"\n      dangerouslySetInnerHTML={{ __html: svgString }}\n    ></div>\n  );\n}\n\nconst defaultColorMap: Record<string, string> = {\n  U: \"white\",\n  R: \"red\",\n  F: \"green\",\n  D: \"yellow\",\n  L: \"orange\",\n  B: \"blue\",\n  G: \"gray\",\n};\n\nconst template = `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"-5 -5 258 196\" style=\"stroke-linejoin:round;\">\n  <g>\n    <rect x=\"64\" y=\"2\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"84\" y=\"2\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"104\" y=\"2\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"64\" y=\"22\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"84\" y=\"22\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"104\" y=\"22\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"64\" y=\"42\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"84\" y=\"42\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"104\" y=\"42\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"126\" y=\"64\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"146\" y=\"64\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"166\" y=\"64\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"126\" y=\"84\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"146\" y=\"84\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"166\" y=\"84\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"126\" y=\"104\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"146\" y=\"104\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"166\" y=\"104\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"64\" y=\"64\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"84\" y=\"64\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"104\" y=\"64\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"64\" y=\"84\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"84\" y=\"84\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"104\" y=\"84\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"64\" y=\"104\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"84\" y=\"104\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"104\" y=\"104\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"64\" y=\"126\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"84\" y=\"126\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"104\" y=\"126\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"64\" y=\"146\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"84\" y=\"146\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"104\" y=\"146\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"64\" y=\"166\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"84\" y=\"166\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"104\" y=\"166\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"2\" y=\"64\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"22\" y=\"64\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"42\" y=\"64\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"2\" y=\"84\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"22\" y=\"84\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"42\" y=\"84\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"2\" y=\"104\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"22\" y=\"104\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"42\" y=\"104\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"188\" y=\"64\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"208\" y=\"64\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"228\" y=\"64\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"188\" y=\"84\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"208\" y=\"84\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"228\" y=\"84\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"188\" y=\"104\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"208\" y=\"104\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"228\" y=\"104\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n  </g>\n</svg>`;\n","import { chunkReducer } from \"app/common/array-reducers\";\n\nconst SCRAMBLE_SERVICE_UUID = 0xfff0;\nconst SCRAMBLE_CHARACTERISTIC_UUID = 0xfff3;\n\nconst moveMap: Record<string, number> = {\n  R: 0,\n  R2: 1,\n  \"R'\": 2,\n  F: 3,\n  F2: 4,\n  \"F'\": 5,\n  D: 6,\n  D2: 7,\n  \"D'\": 8,\n  L: 9,\n  L2: 10,\n  \"L'\": 11,\n  B: 12,\n  B2: 13,\n  \"B'\": 14,\n};\n\nexport function getGANEncoding(scramble: string): Uint8Array {\n  return new Uint8Array(\n    scramble\n      .split(\" \")\n      .map((move) => moveMap[move])\n      .reduce(chunkReducer(2), [])\n      .map((moves) => moves[0] * 16 + (moves[1] ?? 15))\n  );\n}\n\nexport const executeScramble = async (\n  robotServer: BluetoothRemoteGATTServer | null,\n  scramble: string\n): Promise<void> => {\n  try {\n    if (robotServer) {\n      const scrambleService = await robotServer.getPrimaryService(\n        SCRAMBLE_SERVICE_UUID\n      );\n      const scrambleExecuteCharacteristic = await scrambleService.getCharacteristic(\n        SCRAMBLE_CHARACTERISTIC_UUID\n      );\n\n      await scrambleExecuteCharacteristic.writeValue(getGANEncoding(scramble));\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\n","interface Reducer<T, K> {\n  (acc: T, curr: K): T;\n}\n\nexport const chunkReducer = <T>(\n  chunckSize: number\n): Reducer<Array<Array<T>>, T> => {\n  let currentChunk: Array<T>;\n  return (accumulator: Array<Array<T>>, currentValue: T) => {\n    if (!currentChunk || currentChunk.length === chunckSize) {\n      currentChunk = [];\n      accumulator.push(currentChunk);\n    }\n    currentChunk.push(currentValue);\n    return accumulator;\n  };\n};\n","import React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n  Button,\n  FormControl,\n  RadioGroup,\n  FormControlLabel,\n  Radio,\n  Select,\n  MenuItem,\n} from \"@material-ui/core\";\nimport { FormattedMessage } from \"react-intl\";\nimport styled from \"styled-components/macro\";\n\nimport { ApplicationState } from \"app/common/store\";\n\nimport { getRobotServer } from \"app/robot-widget/store/selectors\";\n\nimport { generateScramble } from \"app/common/cube/scramblers/full\";\nimport {\n  generateOLLScramble,\n  generateFirstLookOLLScramble,\n  generateSecondLookOLLScramble,\n  generatePLLScramble,\n  generateFirstLookPLLScramble,\n  generateSecondLookPLLScramble,\n} from \"app/common/cube/scramblers/cfop\";\nimport { crossSolver } from \"app/common/cube/solvers/cross-solver\";\nimport { CubePreview } from \"app/cube-preview\";\nimport { executeScramble } from \"app/common/gan-robot\";\nimport { doAlgorithm, Edges, Corners } from \"app/common/cube/libs/cube\";\nimport { FaceletArrayFilter } from \"app/common/cube/libs/cube-preview\";\nimport { isF2LSolved } from \"app/common/cube/libs/cfop-criteria\";\n\ninterface CFOPScrambleProps {\n  robotServer: BluetoothRemoteGATTServer | null;\n}\n\ntype CFOPPhaseType =\n  | \"cross\"\n  | \"f2l\"\n  | \"oll\"\n  | \"firstLookOll\"\n  | \"secondLookOll\"\n  | \"pll\"\n  | \"firstLookPll\"\n  | \"secondLookPll\";\n\nconst invertedColorMap: Record<string, string> = {\n  U: \"yellow\",\n  R: \"red\",\n  F: \"blue\",\n  D: \"white\",\n  L: \"orange\",\n  B: \"green\",\n  G: \"gray\",\n};\n\ntype CFOPLevelType = \"beginner\" | \"intermediate\" | \"advanced\";\n\nconst crossFilter = {\n  edges: [Edges.DB, Edges.DF, Edges.DR, Edges.DL],\n};\n\nconst f2lFilter = {\n  edges: [\n    Edges.DB,\n    Edges.DF,\n    Edges.DR,\n    Edges.DL,\n    Edges.BL,\n    Edges.BR,\n    Edges.FL,\n    Edges.FR,\n  ],\n  corners: [Corners.DBR, Corners.DLF, Corners.DBL, Corners.DFR],\n};\n\nconst ollFilter = {\n  edges: [\n    Edges.DB,\n    Edges.DF,\n    Edges.DR,\n    Edges.DL,\n    Edges.BL,\n    Edges.BR,\n    Edges.FL,\n    Edges.FR,\n  ],\n  corners: [Corners.DBR, Corners.DLF, Corners.DBL, Corners.DFR],\n  facelets: [\"U\"],\n};\n\nconst filters: Record<string, Record<string, FaceletArrayFilter>> = {\n  intermediate: {\n    cross: crossFilter,\n    f2l: f2lFilter,\n    firstLookOll: ollFilter,\n    secondLookOll: ollFilter,\n  },\n  advanced: {\n    cross: crossFilter,\n    f2l: f2lFilter,\n    oll: ollFilter,\n  },\n};\n\nconst ContentContainer = styled.div.attrs({\n  className: \"flex flex-col m-med children:mt-lg children:first:mt-0\",\n})``;\n\nconst ContentGroup = styled.div.attrs({\n  className:\n    \"flex flex-col children:mt-sm children:first:mt-0 computer:items-start\",\n})``;\n\nexport function CFOPScramble(props: CFOPScrambleProps): JSX.Element {\n  const [cfopLevel, setCFOPLevel] = useState<CFOPLevelType>(\"advanced\");\n  const [cfopPhase, setCFOPPhase] = useState<CFOPPhaseType>(\"cross\");\n  const [scramble, setScramble] = useState<string>(\"\");\n  return (\n    <ContentContainer>\n      <ContentGroup>\n        <FormControl component=\"fieldset\">\n          <Select\n            labelId=\"demo-simple-select-label\"\n            id=\"demo-simple-select\"\n            value={cfopLevel}\n            onChange={(e) => {\n              setCFOPPhase(\"cross\");\n              setCFOPLevel(e.target.value as CFOPLevelType);\n            }}\n          >\n            <MenuItem value=\"intermediate\">Intermediate</MenuItem>\n            <MenuItem value=\"advanced\">Advanced</MenuItem>\n          </Select>\n          {/* <FormLabel component=\"legend\">Scramble Type</FormLabel> */}\n          <RadioGroup\n            row\n            aria-label=\"Scramble Type\"\n            name=\"scrambleType\"\n            value={cfopPhase}\n            onChange={(e) => {\n              if (e.currentTarget.value !== cfopPhase) {\n                setScramble(\"\");\n              }\n              setCFOPPhase(e.currentTarget.value as CFOPPhaseType);\n            }}\n          >\n            {cfopLevel === \"intermediate\" && (\n              <>\n                <FormControlLabel\n                  value=\"cross\"\n                  control={<Radio />}\n                  label=\"Cross\"\n                />\n                <FormControlLabel value=\"f2l\" control={<Radio />} label=\"F2L\" />\n                <FormControlLabel\n                  value=\"firstLookOll\"\n                  control={<Radio />}\n                  label=\"First-look OLL\"\n                />\n                <FormControlLabel\n                  value=\"secondLookOll\"\n                  control={<Radio />}\n                  label=\"Second-look OLL\"\n                />\n                <FormControlLabel\n                  value=\"firstLookPll\"\n                  control={<Radio />}\n                  label=\"First-Look PLL\"\n                />\n                <FormControlLabel\n                  value=\"secondLookPll\"\n                  control={<Radio />}\n                  label=\"Second-Look PLL\"\n                />\n              </>\n            )}\n            {cfopLevel === \"advanced\" && (\n              <>\n                <FormControlLabel\n                  value=\"cross\"\n                  control={<Radio />}\n                  label=\"Cross\"\n                />\n                <FormControlLabel value=\"f2l\" control={<Radio />} label=\"F2L\" />\n                <FormControlLabel value=\"oll\" control={<Radio />} label=\"OLL\" />\n                <FormControlLabel value=\"pll\" control={<Radio />} label=\"PLL\" />\n              </>\n            )}\n          </RadioGroup>\n        </FormControl>\n\n        <Button\n          variant=\"contained\"\n          onClick={() => {\n            switch (cfopPhase) {\n              case \"cross\":\n                setScramble(generateScramble());\n                break;\n              case \"f2l\":\n                // faster to do cross solve than scrambling all pieces but the cross\n                // and completing a full solve\n                while (true) {\n                  const scramble = generateScramble();\n                  const solveCode = crossSolver(scramble);\n                  if (solveCode) {\n                    if (!isF2LSolved(doAlgorithm(solveCode))) {\n                      setScramble(`${scramble} ${solveCode}`);\n                      break;\n                    }\n                  }\n                }\n                break;\n              case \"oll\":\n                const ollScramble = generateOLLScramble();\n                if (ollScramble) {\n                  setScramble(ollScramble);\n                }\n                break;\n              case \"firstLookOll\":\n                const firstLookOllScramble = generateFirstLookOLLScramble();\n                if (firstLookOllScramble) {\n                  setScramble(firstLookOllScramble);\n                }\n                break;\n              case \"secondLookOll\":\n                const secondLookOllScramble = generateSecondLookOLLScramble();\n                if (secondLookOllScramble) {\n                  setScramble(secondLookOllScramble);\n                }\n                break;\n              case \"pll\":\n                const pllScramble = generatePLLScramble();\n                if (pllScramble) {\n                  setScramble(pllScramble);\n                }\n                break;\n              case \"firstLookPll\":\n                const firstLookPllScramble = generateFirstLookPLLScramble();\n                if (firstLookPllScramble) {\n                  setScramble(firstLookPllScramble);\n                }\n                break;\n              case \"secondLookPll\":\n                const secondLookPllScramble = generateSecondLookPLLScramble();\n                if (secondLookPllScramble) {\n                  setScramble(secondLookPllScramble);\n                }\n                break;\n            }\n          }}\n        >\n          <FormattedMessage id=\"scramble.actions.scramble\" />\n        </Button>\n      </ContentGroup>\n\n      <ContentGroup>\n        <CubePreview\n          scrambleCode={scramble}\n          filter={filters[cfopLevel][cfopPhase]}\n          colorMap={invertedColorMap}\n        />\n        <Button\n          variant=\"contained\"\n          disabled={!Boolean(scramble) || !Boolean(props.robotServer)}\n          onClick={() => executeScramble(props.robotServer, scramble)}\n        >\n          <FormattedMessage id=\"scramble.actions.send\" />\n        </Button>\n      </ContentGroup>\n    </ContentContainer>\n  );\n}\n\nexport const ConnectedCFOPScramble = connect((state: ApplicationState) => ({\n  robotServer: getRobotServer(state),\n}))(CFOPScramble);\n","import getScrambleForPieces from \"app/common/cube/libs/scramble-pieces\";\nimport { Edges, Corners } from \"app/common/cube/libs/cube\";\nimport {\n  isOLLSolved,\n  isFirstLookOLLSolved,\n  isFirstLookPLLSolved,\n  isCubeSolved,\n} from \"app/common/cube/libs/cfop-criteria\";\n\nexport const generateOLLScramble = (): string | false =>\n  getScrambleForPieces(\n    [Edges.UR, Edges.UF, Edges.UL, Edges.UB],\n    [Corners.URF, Corners.UFL, Corners.ULB, Corners.UBR],\n    isOLLSolved\n  );\n\nexport const generateFirstLookOLLScramble = (): string | false =>\n  getScrambleForPieces(\n    [Edges.UR, Edges.UF, Edges.UL, Edges.UB],\n    [Corners.URF, Corners.UFL, Corners.ULB, Corners.UBR],\n    isFirstLookOLLSolved\n  );\n\nexport const generateSecondLookOLLScramble = (): string | false =>\n  getScrambleForPieces(\n    [],\n    [Corners.URF, Corners.UFL, Corners.ULB, Corners.UBR],\n    isOLLSolved\n  );\n\nexport const generatePLLScramble = (): string | false =>\n  getScrambleForPieces(\n    [Edges.UR, Edges.UF, Edges.UL, Edges.UB],\n    [Corners.URF, Corners.UFL, Corners.ULB, Corners.UBR],\n    isCubeSolved,\n    true\n  );\n\nexport const generateFirstLookPLLScramble = (): string | false =>\n  getScrambleForPieces(\n    [Edges.UR, Edges.UF, Edges.UL, Edges.UB],\n    [Corners.URF, Corners.UFL, Corners.ULB, Corners.UBR],\n    isFirstLookPLLSolved,\n    true\n  );\n\nexport const generateSecondLookPLLScramble = (): string | false =>\n  getScrambleForPieces(\n    [Edges.UR, Edges.UF, Edges.UL, Edges.UB],\n    [],\n    isCubeSolved,\n    true\n  );\n","import React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button, Typography } from \"@material-ui/core\";\nimport { FormattedMessage } from \"react-intl\";\nimport styled from \"styled-components/macro\";\n\nimport { ApplicationState } from \"app/common/store\";\n\nimport { getRobotServer } from \"app/robot-widget/store/selectors\";\n\nimport { generateScramble } from \"app/common/cube/scramblers/full\";\nimport { CubePreview } from \"app/cube-preview\";\nimport { executeScramble } from \"app/common/gan-robot\";\n\ninterface RandomScrambleProps {\n  robotServer: BluetoothRemoteGATTServer | null;\n}\n\nconst ContentContainer = styled.div.attrs({\n  className: \"flex flex-col m-med children:mt-lg children:first:mt-0\",\n})``;\n\nconst ContentGroup = styled.div.attrs({\n  className:\n    \"flex flex-col children:mt-sm children:first:mt-0 computer:items-start\",\n})``;\n\nexport function RandomScramble(props: RandomScrambleProps): JSX.Element {\n  const [scramble, setScramble] = useState<string>(\"\");\n  return (\n    <ContentContainer>\n      <ContentGroup>\n        <Button\n          variant=\"contained\"\n          onClick={() => {\n            setScramble(generateScramble());\n          }}\n        >\n          <FormattedMessage id=\"scramble.actions.scramble\" />\n        </Button>\n      </ContentGroup>\n\n      <ContentGroup>\n        <Typography variant=\"body1\">{scramble}</Typography>\n        <CubePreview scrambleCode={scramble} />\n        <Button\n          variant=\"contained\"\n          size=\"large\"\n          disabled={!Boolean(props.robotServer)}\n          onClick={() => executeScramble(props.robotServer, scramble)}\n        >\n          <FormattedMessage id=\"scramble.actions.send\" />\n        </Button>\n      </ContentGroup>\n    </ContentContainer>\n  );\n}\n\nexport const ConnectedRandomScramble = connect((state: ApplicationState) => ({\n  robotServer: getRobotServer(state),\n}))(RandomScramble);\n","import React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button, TextField } from \"@material-ui/core\";\nimport { FormattedMessage } from \"react-intl\";\nimport styled from \"styled-components/macro\";\n\nimport { ApplicationState } from \"app/common/store\";\n\nimport { getRobotServer } from \"app/robot-widget/store/selectors\";\n\nimport { fiveSideSolver } from \"app/common/cube/solvers/five-side-solver\";\nimport { CubePreview } from \"app/cube-preview\";\nimport {\n  validateAlgorithm,\n  invertAlgorithm,\n} from \"app/common/cube/libs/algorithms\";\nimport { executeScramble } from \"app/common/gan-robot\";\n\ninterface ManualScrambleProps {\n  robotServer: BluetoothRemoteGATTServer | null;\n}\n\nconst ContentContainer = styled.div.attrs({\n  className: \"flex flex-col m-med children:mt-lg children:first:mt-0\",\n})``;\n\nconst ContentGroup = styled.div.attrs({\n  className:\n    \"flex flex-col children:mt-sm children:first:mt-0 computer:items-start\",\n})``;\n\nexport function ManualScramble(props: ManualScrambleProps): JSX.Element {\n  const [scramble, setScramble] = useState<string>(\"\");\n  const [hasError, setHasError] = useState(false);\n  return (\n    <ContentContainer>\n      <ContentGroup>\n        <form noValidate autoComplete=\"off\" className=\"container\">\n          <TextField\n            id=\"manual-scramble\"\n            label=\"Manual Scramble\"\n            multiline\n            rowsMax={4}\n            fullWidth\n            error={hasError}\n            helperText={hasError && \"Invalid Scramble Code\"}\n            onBlur={(event: React.FocusEvent<HTMLInputElement>) => {\n              const manualScrambleValue = event.target.value;\n              if (manualScrambleValue.length > 0) {\n                if (validateAlgorithm(manualScrambleValue)) {\n                  const fiveSideSolve = fiveSideSolver(manualScrambleValue);\n                  if (fiveSideSolve) {\n                    const fiveSideScramble = invertAlgorithm(fiveSideSolve);\n                    setScramble(fiveSideScramble);\n                  }\n                } else {\n                  setHasError(true);\n                  setScramble(\"\");\n                }\n              } else {\n                setHasError(false);\n                setScramble(\"\");\n              }\n            }}\n          />\n        </form>\n      </ContentGroup>\n\n      <ContentGroup>\n        <CubePreview scrambleCode={scramble} />\n        <Button\n          variant=\"contained\"\n          disabled={!Boolean(props.robotServer) && Boolean(scramble)}\n          onClick={() => executeScramble(props.robotServer, scramble)}\n        >\n          <FormattedMessage id=\"scramble.actions.send\" />\n        </Button>\n      </ContentGroup>\n    </ContentContainer>\n  );\n}\n\nexport const ConnectedManualScramble = connect((state: ApplicationState) => ({\n  robotServer: getRobotServer(state),\n}))(ManualScramble);\n","import React, { useEffect } from \"react\";\nimport {\n  AppBar,\n  Toolbar,\n  Typography,\n  BottomNavigation,\n  BottomNavigationAction,\n  Paper,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n} from \"@material-ui/core\";\nimport { Shuffle, Layers, Edit } from \"@material-ui/icons\";\nimport { FormattedMessage } from \"react-intl\";\nimport styled from \"styled-components/macro\";\n\nimport { ConnectedRobotWidget } from \"app/robot-widget\";\nimport { ConnectedCFOPScramble } from \"app/cfop-scramble\";\nimport { fiveSideSearch } from \"app/common/cube/solvers/five-side-solver\";\nimport { ConnectedRandomScramble } from \"app/random-scramble\";\nimport { ConnectedManualScramble } from \"app/manual-scramble\";\n\nconst Screen = styled.div.attrs({ className: \"flex flex-col h-screen\" })``;\n\nconst IconContainer = styled.div.attrs({\n  className: \"flex flex-row ml-auto\",\n})``;\n\nexport function MainScreen(): JSX.Element {\n  const [navigationValue, setNavigation] = React.useState(\"random\");\n  const handleChange = (\n    event: React.ChangeEvent<unknown>,\n    newValue: string\n  ) => {\n    setNavigation(newValue);\n  };\n\n  useEffect(() => {\n    window.screen.orientation.lock(\"portrait\");\n    fiveSideSearch.initialize();\n  }, []);\n\n  return (\n    <Screen>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h5\">\n            <FormattedMessage id=\"appTitle\" />\n          </Typography>\n          <IconContainer>\n            <ConnectedRobotWidget />\n          </IconContainer>\n        </Toolbar>\n      </AppBar>\n\n      <div className=\"flex flex-row h-full w-full\">\n        <Paper className=\"w-48 hidden computer:block\">\n          <List>\n            <ListItem\n              button\n              key=\"random\"\n              selected={navigationValue === \"random\"}\n              onClick={() => setNavigation(\"random\")}\n            >\n              <ListItemIcon>\n                <Shuffle />\n              </ListItemIcon>\n              <ListItemText primary=\"RANDOM\" />\n            </ListItem>\n\n            <ListItem\n              button\n              key=\"cfop\"\n              selected={navigationValue === \"cfop\"}\n              onClick={() => setNavigation(\"cfop\")}\n            >\n              <ListItemIcon>\n                <Layers />\n              </ListItemIcon>\n              <ListItemText primary=\"CFOP\" />\n            </ListItem>\n\n            <ListItem\n              button\n              key=\"manual\"\n              selected={navigationValue === \"manual\"}\n              onClick={() => setNavigation(\"manual\")}\n            >\n              <ListItemIcon>\n                <Edit />\n              </ListItemIcon>\n              <ListItemText primary=\"MANUAL\" />\n            </ListItem>\n          </List>\n        </Paper>\n\n        <div className=\"flex flex-grow flex-col h-full\">\n          {navigationValue === \"random\" && <ConnectedRandomScramble />}\n          {navigationValue === \"cfop\" && <ConnectedCFOPScramble />}\n          {navigationValue === \"manual\" && <ConnectedManualScramble />}\n\n          <div className=\"computer:hidden w-full mt-auto\">\n            <BottomNavigation\n              showLabels\n              value={navigationValue}\n              onChange={handleChange}\n              className=\"w-full\"\n            >\n              <BottomNavigationAction\n                icon={<Shuffle />}\n                value=\"random\"\n                label=\"RANDOM\"\n                aria-label=\"random\"\n              />\n              <BottomNavigationAction\n                icon={<Layers />}\n                value=\"cfop\"\n                label=\"CFOP\"\n                aria-label=\"cfop\"\n              />\n              <BottomNavigationAction\n                icon={<Edit />}\n                value=\"manual\"\n                label=\"MANUAL\"\n                aria-label=\"manual\"\n              />\n            </BottomNavigation>\n          </div>\n        </div>\n      </div>\n    </Screen>\n  );\n}\n","export function importAll<T = unknown>(\n  requireContext: __WebpackModuleApi.RequireContext\n): Record<string, T> {\n  const importCache: Record<string, T> = {};\n  requireContext\n    .keys()\n    .forEach(\n      (moduleKey: string) =>\n        (importCache[moduleKey] = requireContext(moduleKey))\n    );\n  return importCache;\n}\n","import pathParse from \"path-parse\";\nimport { importAll } from \"app/common/webpack\";\n\ninterface Translations {\n  [key: string]: string | Translations;\n}\n\n// import json translations\nconst translations = importAll<Translations>(\n  require.context(\"../\", true, /\\/translations\\/.*\\.json$/)\n);\n\nconst flattenTranslations = (trans: Translations, keys: string[] = []) =>\n  Object.keys(trans).reduce((acc, key) => {\n    const currentKeys = [...keys, key];\n    const value = trans[key];\n    if (typeof value === \"object\")\n      acc = { ...acc, ...flattenTranslations(value, currentKeys) };\n    else acc[currentKeys.join(\".\")] = value;\n    return acc;\n  }, {} as Record<string, string>);\n\n// merge translation files with the same locale\nconst messageMap = Object.keys(translations).reduce((acc, filepath) => {\n  const locale = pathParse(filepath).name;\n  acc[locale] = {\n    ...acc[locale],\n    ...flattenTranslations(translations[filepath]),\n  };\n  return acc;\n}, {} as Record<string, Record<string, string>>);\n\nexport const locale = navigator.language;\nexport const messages = messageMap[locale.toLowerCase()];\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config): void {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister(): void {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { IntlProvider } from \"react-intl\";\nimport { StylesProvider } from \"@material-ui/core/styles\";\n\nimport { MainScreen } from \"app/main-screen\";\nimport { createStore } from \"app/common/store\";\nimport { messages, locale } from \"translations\";\nimport { importAll } from \"app/common/webpack\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\n// execute any init scripts\nimportAll(require.context(\"./\", true, /\\/on-startup\\.(ts|tsx)$/));\n\n// include all global stylesheets\nimportAll(require.context(\"./\", true, /\\.css$/));\n\n// create store\nconst store = createStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <IntlProvider locale={locale} messages={messages}>\n      <StylesProvider injectFirst>\n        <MainScreen />\n      </StylesProvider>\n    </IntlProvider>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","import { PayloadAction } from \"@reduxjs/toolkit\";\n\nexport const payloadReducer = <S, P>(state: S, action: PayloadAction<P>): P => {\n  return action.payload;\n};\n\nexport const valueReducer = <T>(value: T): (() => T) => () => value;\n","import { createReducer, combineReducers } from \"@reduxjs/toolkit\";\nimport { registerRobot, unregisterRobot } from \"app/robot-widget/store/actions\";\nimport { RobotState } from \"app/robot-widget/store/types\";\nimport { payloadReducer, valueReducer } from \"app/common/store-reducers\";\n\nexport default combineReducers<RobotState>({\n  device: createReducer<RobotState[\"device\"]>(null, (builder) => {\n    builder.addCase(registerRobot, payloadReducer);\n    builder.addCase(unregisterRobot, valueReducer(null));\n  }),\n});\n","import { registerReducer } from \"app/common/store\";\n\nimport { RobotState } from \"app/robot-widget/store/types\";\nimport reducer from \"app/robot-widget/store/reducer\";\n\ndeclare module \"app/common/store\" {\n  interface ApplicationState {\n    robot: RobotState;\n  }\n}\n\nregisterReducer(\"robot\", reducer);\n","import { createAction } from \"@reduxjs/toolkit\";\n\nconst actionPrefix = \"setup\";\n\nexport const registerRobot = createAction<BluetoothDevice>(\n  `${actionPrefix}/register_robot`\n);\n\nexport const unregisterRobot = createAction(`${actionPrefix}/unregister_robot`);\n","import { Reducer } from \"redux\";\nimport { configureStore, EnhancedStore } from \"@reduxjs/toolkit\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { SagaIterator } from \"redux-saga\";\nimport { call, spawn, delay } from \"redux-saga/effects\";\n\n// ApplicationState will be dynamically populated from on-startup.ts scripts\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface ApplicationState {}\nconst reducerRegistry: Record<string, Reducer> = {};\n\nexport function registerReducer<TKey extends keyof ApplicationState>(\n  key: TKey,\n  reducer: Reducer<ApplicationState[TKey]>\n): void {\n  reducerRegistry[key] = reducer;\n}\n\nexport type Saga = (...args: unknown[]) => SagaIterator;\nconst sagaRegistry: Saga[] = [];\n\nexport function registerSagas(sagas: Saga[]): void {\n  sagaRegistry.push(...sagas);\n}\n\nfunction* makeRestartable(saga: Saga) {\n  while (true) {\n    try {\n      yield call(saga);\n      console.error(\"Unexpected root saga termination\", saga);\n    } catch (e) {\n      console.error(\"Saga error, the saga will be restarted\", e);\n    }\n    yield delay(500);\n  }\n}\n\nfunction* rootSaga() {\n  yield sagaRegistry.map((saga) => spawn(makeRestartable, saga));\n}\n\nexport function createStore(): EnhancedStore {\n  const sagaMiddleware = createSagaMiddleware();\n  const store = configureStore({\n    reducer: reducerRegistry,\n    middleware: [sagaMiddleware],\n  });\n  sagaMiddleware.run(rootSaga);\n  return store;\n}\n"],"sourceRoot":""}