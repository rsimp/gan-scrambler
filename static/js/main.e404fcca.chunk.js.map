{"version":3,"sources":["../src sync ///translations//.*/.json$","../src sync ///on-startup/.(ts|tsx)$","../src sync //.global/.css$","app/robot-widget/store/selectors.ts","app/robot-widget/index.tsx","app/common/array-reducers.ts","app/common/cube/scramble.ts","app/cube-preview/index.tsx","app/common/cube/preview.ts","app/scramble-generator/index.tsx","app/main-screen/index.tsx","app/common/webpack.ts","translations/index.ts","serviceWorker.ts","index.tsx","app/common/store-reducers.ts","app/robot-widget/store/reducer.ts","app/robot-widget/store/on-startup.ts","app/robot-widget/store/actions.ts","app/common/store.ts","app/robot-widget/styles.module.css"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","getRobotDevice","state","robot","device","getRobotServer","robotDevice","gatt","connected","RobotWidgetContainer","connect","registerRobot","unregisterRobot","props","Box","flexDirection","flexGrow","className","styles","robotWidgetContainer","IconButton","color","onClick","a","navigator","bluetooth","requestDevice","filters","services","optionalServices","server","getPrimaryService","deviceInfoService","getCharacteristic","modelCharacteristic","readValue","modelNumberValue","TextDecoder","decode","toUpperCase","addEventListener","console","log","BluetoothConnected","Bluetooth","chunkReducer","chunckSize","currentChunk","accumulator","currentValue","length","push","cubeFaces","moveModifiers","moveMap","R","R2","F","F2","D","D2","L","L2","B","B2","faceEdges","U","generateScramble","cube","cubeHistory","twist","cubeStateStr","move","cubeFace","charAt","cubeFaceIdx","indexOf","rotationMultiplier","cubeState","split","prevCubeState","slice","faceletOffset","rotationOffset","edgeIdx","rotatedEdgeIdx","join","scramble","total","moves","currentState","Math","floor","random","newState","reset","splice","createCube","moveList","GANEncoding","reduce","CubePreview","svgString","scrambleCode","Cube","asString","createScramblePreview","style","width","dangerouslySetInnerHTML","__html","ScrambleGeneratorContainer","robotServer","useState","scrambleType","setScrambleType","setScramble","display","alignItems","FormControl","component","FormLabel","RadioGroup","row","aria-label","name","value","onChange","currentTarget","FormControlLabel","control","Radio","label","Button","variant","Typography","disabled","Boolean","scrambleService","scrambleExecuteCharacteristic","writeValue","Uint8Array","MainScreen","AppBar","position","Toolbar","importAll","requireContext","importCache","forEach","moduleKey","translations","require","messageMap","acc","filepath","locale","pathParse","flattenTranslations","trans","key","currentKeys","language","messages","toLowerCase","isLocalhost","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","store","createStore","ReactDOM","render","document","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","status","ready","unregister","reload","checkValidServiceWorker","payloadReducer","action","payload","combineReducers","createReducer","builder","addCase","registerReducer","reducer","createAction","makeRestartable","rootSaga","reducerRegistry","sagaRegistry","saga","call","delay","spawn","sagaMiddleware","createSagaMiddleware","configureStore","middleware","run"],"mappings":"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","file":"static/js/main.e404fcca.chunk.js","sourcesContent":["var map = {\n\t\"./translations/en-us.json\": 108\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 107;","var map = {\n\t\"./app/robot-widget/store/on-startup.ts\": 113\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 109;","var map = {\n\t\"./styles/main.global.css\": 111\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 110;","import { ApplicationState } from \"app/common/store\";\nimport { RobotState } from \"app/robot-widget/store/types\";\n\nexport const getRobotDevice = (state: ApplicationState): RobotState[\"device\"] =>\n  state.robot.device;\n\nexport const getRobotServer = (\n  state: ApplicationState\n): BluetoothRemoteGATTServer | null => {\n  const robotDevice = getRobotDevice(state);\n  return robotDevice && robotDevice.gatt?.connected ? robotDevice.gatt : null;\n};\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { IconButton, Box } from \"@material-ui/core\";\nimport { BluetoothConnected, Bluetooth } from \"@material-ui/icons\";\n\nimport { ApplicationState } from \"app/common/store\";\n\nimport { unregisterRobot, registerRobot } from \"app/robot-widget/store/actions\";\nimport { getRobotDevice } from \"app/robot-widget/store/selectors\";\nimport { RobotState } from \"app/robot-widget/store/types\";\n\nimport styles from \"./styles.module.css\";\n\nconst DEVICE_INFO_SERVICE_UUID = 0x180a;\nconst MODEL_NUMBER_SERVICE_UUID = 0x2a24;\n\nconst SCRAMBLE_SERVICE_UUID = 0xfff0;\n\ninterface RobotWidgetProps {\n  registerRobot: typeof registerRobot;\n  unregisterRobot: typeof unregisterRobot;\n  robotDevice?: RobotState[\"device\"];\n}\n\nexport function RobotWidget(props: RobotWidgetProps): JSX.Element {\n  // TODO pull callback into useCallback hook\n  // TODO pull async with dispatch into a saga\n  return (\n    <Box flexDirection=\"row\" flexGrow={1}>\n      <div className={styles.robotWidgetContainer}>\n        <IconButton\n          color=\"inherit\"\n          onClick={async () => {\n            try {\n              const device = await navigator.bluetooth.requestDevice({\n                filters: [\n                  //{ namePrefix: \"GAN\" },\n                  { services: [DEVICE_INFO_SERVICE_UUID] },\n                ],\n                optionalServices: [SCRAMBLE_SERVICE_UUID],\n              });\n              const server = await device.gatt?.connect();\n              if (server) {\n                const deviceInfoService = await server.getPrimaryService(\n                  DEVICE_INFO_SERVICE_UUID\n                );\n                const modelCharacteristic = await deviceInfoService.getCharacteristic(\n                  MODEL_NUMBER_SERVICE_UUID\n                );\n                const modelNumberValue = await modelCharacteristic.readValue();\n                const modelNumber = new TextDecoder().decode(modelNumberValue);\n                if (modelNumber.toUpperCase() === \"GAN ROBOTCUBE\") {\n                  device.addEventListener(\"gattserverdisconnected\", () =>\n                    props.unregisterRobot()\n                  );\n                  props.registerRobot(device);\n                } else {\n                  //TODO show error message for connecting to wrong type of GAN device\n                }\n              }\n            } catch (error) {\n              console.log(error);\n            }\n          }}\n        >\n          {props.robotDevice ? <BluetoothConnected /> : <Bluetooth />}\n        </IconButton>\n      </div>\n    </Box>\n  );\n}\n\nexport const RobotWidgetContainer = connect(\n  (state: ApplicationState) => ({\n    robotDevice: getRobotDevice(state),\n  }),\n  {\n    registerRobot,\n    unregisterRobot,\n  }\n)(RobotWidget);\n","interface Reducer<T, K> {\n  (acc: T, curr: K): T;\n}\n\nexport const chunkReducer = <T>(\n  chunckSize: number\n): Reducer<Array<Array<T>>, T> => {\n  let currentChunk: Array<T>;\n  return (accumulator: Array<Array<T>>, currentValue: T) => {\n    if (!currentChunk || currentChunk.length === chunckSize) {\n      currentChunk = [];\n      accumulator.push(currentChunk);\n    }\n    currentChunk.push(currentValue);\n    return accumulator;\n  };\n};\n","import { chunkReducer } from \"app/common/array-reducers\";\n\nconst cubeFaces = [\"D\", \"L\", \"B\", \"U\", \"R\", \"F\"];\nconst moveModifiers = [\"\", \"2\", \"'\"];\nconst moveMap: Record<string, number> = {\n  R: 0,\n  R2: 1,\n  \"R'\": 2,\n  F: 3,\n  F2: 4,\n  \"F'\": 5,\n  D: 6,\n  D2: 7,\n  \"D'\": 8,\n  L: 9,\n  L2: 10,\n  \"L'\": 11,\n  B: 12,\n  B2: 13,\n  \"B'\": 14,\n};\n\n/*\n           +----------+\n           | 24 25 26 |\n           | 31  U 27 |\n           | 30 29 28 |\n+----------+----------+----------+----------+\n| 08 09 10 | 40 41 42 | 32 33 34 | 16 17 18 |\n| 15  L 11 | 47  F 43 | 39  R 35 | 23  B 19 |\n| 14 13 12 | 46 45 44 | 38 37 36 | 22 21 20 |\n+----------+----------+----------+----------+\n           | 00 01 02 |\n           | 07  D 03 |\n           | 06 05 04 |\n           +----------+\n*/\nconst faceEdges: Record<string, Array<number>> = {\n  D: [46, 45, 44, 38, 37, 36, 22, 21, 20, 14, 13, 12],\n  L: [24, 31, 30, 40, 47, 46, 0, 7, 6, 20, 19, 18],\n  B: [26, 25, 24, 8, 15, 14, 6, 5, 4, 36, 35, 34],\n  U: [18, 17, 16, 34, 33, 32, 42, 41, 40, 10, 9, 8],\n  R: [28, 27, 26, 16, 23, 22, 4, 3, 2, 44, 43, 42],\n  F: [30, 29, 28, 32, 39, 38, 2, 1, 0, 12, 11, 10],\n};\n\nexport interface Scramble {\n  code: string;\n  cubeState: string;\n  GANEncoding: Array<number>;\n}\n\nexport function generateScramble(): Scramble {\n  const cube = createCube();\n  const moveList = cube.scramble();\n  return {\n    code: moveList.join(\" \"),\n    GANEncoding: moveList\n      .map((move) => moveMap[move])\n      .reduce(chunkReducer(2), [])\n      .map((moves) => moves[0] * 16 + moves[1]),\n    cubeState: cube.currentState,\n  };\n}\n\nfunction createCube() {\n  const cubeHistory = [\"DDDDDDDDLLLLLLLLBBBBBBBBUUUUUUUURRRRRRRRFFFFFFFF\"];\n  const reset = () => cubeHistory.splice(1);\n  const twist = (cubeStateStr: string, move: string) => {\n    const cubeFace = move.charAt(0);\n    const cubeFaceIdx = cubeFaces.indexOf(cubeFace) * 8;\n    const rotationMultiplier =\n      move.length > 1 ? (move.charAt(1) === \"2\" ? 2 : 3) : 1;\n\n    const cubeState = cubeStateStr.split(\"\"); // convert to array in order to edit\n    const prevCubeState = cubeState.slice(0);\n\n    // Rotate the stickers on the face itself\n    for (let faceletOffset = 0; faceletOffset < 8; faceletOffset++) {\n      const rotationOffset = (faceletOffset + 6 * rotationMultiplier) % 8;\n      cubeState[cubeFaceIdx + faceletOffset] =\n        prevCubeState[cubeFaceIdx + rotationOffset];\n    }\n\n    // Rotate the adjacent stickers that are part of the same layer\n    for (let edgeIdx = 0; edgeIdx < 12; edgeIdx++) {\n      const rotatedEdgeIdx = (edgeIdx + 9 * rotationMultiplier) % 12;\n      cubeState[faceEdges[cubeFace][edgeIdx]] =\n        prevCubeState[faceEdges[cubeFace][rotatedEdgeIdx]];\n    }\n\n    return cubeState.join(\"\");\n  };\n  const scramble = (total = 26) => {\n    const moves = [];\n    let currentState = cubeHistory[cubeHistory.length - 1];\n\n    while (moves.length < total) {\n      // Generate a random move\n      const move =\n        cubeFaces[Math.floor(Math.random() * 6)] +\n        moveModifiers[Math.floor(Math.random() * 3)];\n      if (move.charAt(0) === \"U\") {\n        continue;\n      }\n      // Don't move the same face twice in a row\n      if (\n        moves.length > 0 &&\n        move.charAt(0) === moves[moves.length - 1].charAt(0)\n      ) {\n        continue;\n      }\n      // Avoid move sequences like \"R L R\", which is the same as \"R2 L\"\n      if (\n        moves.length > 1 &&\n        move.charAt(0) === moves[moves.length - 2].charAt(0) &&\n        moves[moves.length - 1].charAt(0) ===\n          cubeFaces[(cubeFaces.indexOf(move.charAt(0)) + 3) % 6]\n      ) {\n        continue;\n      }\n      const newState = twist(currentState, move);\n      if (cubeHistory.indexOf(newState) === -1) {\n        // If this state hasn't yet been encountered, save it and move on\n        moves.push(move);\n        cubeHistory.push(newState);\n        currentState = newState;\n      }\n    }\n    return moves;\n  };\n\n  return {\n    scramble,\n    reset,\n    twist,\n    currentState: cubeHistory[cubeHistory.length - 1],\n  };\n}\n","import React from \"react\";\nimport { Scramble } from \"app/common/cube/scramble\";\nimport { createScramblePreview } from \"app/common/cube/preview\";\n\ninterface CubePreviewProps {\n  scramble: Scramble;\n}\n\nexport function CubePreview(props: CubePreviewProps): JSX.Element {\n  const svgString = createScramblePreview(props.scramble.code);\n  return (\n    <div\n      style={{ width: \"50%\" }}\n      dangerouslySetInnerHTML={{ __html: svgString }}\n    ></div>\n  );\n}\n","import Cube from \"cubejs\";\nimport CubePreview from \"cube-preview\";\n\nexport function createScramblePreview(scrambleCode: string): string {\n  const cube = new Cube();\n  cube.move(scrambleCode);\n  return new CubePreview().svgString(cube.asString());\n}\n","import React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n  Button,\n  Box,\n  Typography,\n  FormControl,\n  FormLabel,\n  RadioGroup,\n  FormControlLabel,\n  Radio,\n} from \"@material-ui/core\";\nimport { FormattedMessage } from \"react-intl\";\n\nimport { ApplicationState } from \"app/common/store\";\n\nimport { getRobotServer } from \"app/robot-widget/store/selectors\";\n\nimport { generateScramble, Scramble } from \"app/common/cube/scramble\";\nimport { CubePreview } from \"app/cube-preview\";\n\nconst SCRAMBLE_SERVICE_UUID = 0xfff0;\nconst SCRAMBLE_CHARACTERISTIC_UUID = 0xfff3;\n\ninterface ScrambleGeneratorProps {\n  robotServer: BluetoothRemoteGATTServer | null;\n}\n\ntype ScrambleType = \"full\" | \"cross\" | \"f2l\" | \"oll\" | \"pll\";\n\nexport function ScrambleGenerator(props: ScrambleGeneratorProps): JSX.Element {\n  const [scrambleType, setScrambleType] = useState<ScrambleType>(\"full\");\n  const [scramble, setScramble] = useState<Scramble | null>(null);\n  return (\n    <Box display=\"flex\" flexDirection=\"column\" alignItems=\"flex-start\">\n      <FormControl component=\"fieldset\">\n        <FormLabel component=\"legend\">Scramble Type</FormLabel>\n        <RadioGroup\n          row\n          aria-label=\"Scramble Type\"\n          name=\"scrambleType\"\n          value={scrambleType}\n          onChange={(e) =>\n            setScrambleType(e.currentTarget.value as ScrambleType)\n          }\n        >\n          <FormControlLabel value=\"full\" control={<Radio />} label=\"Full\" />\n        </RadioGroup>\n      </FormControl>\n      <Button\n        variant=\"contained\"\n        onClick={() => {\n          setScramble(generateScramble());\n        }}\n      >\n        <FormattedMessage id=\"scrambleGenerator.actions.generate\" />\n      </Button>\n      {scramble && (\n        <>\n          <Typography variant=\"body1\">{scramble.code}</Typography>\n          <CubePreview scramble={scramble} />\n          <Button\n            variant=\"contained\"\n            disabled={!Boolean(props.robotServer)}\n            onClick={async () => {\n              try {\n                if (props.robotServer) {\n                  const scrambleService = await props.robotServer.getPrimaryService(\n                    SCRAMBLE_SERVICE_UUID\n                  );\n                  const scrambleExecuteCharacteristic = await scrambleService.getCharacteristic(\n                    SCRAMBLE_CHARACTERISTIC_UUID\n                  );\n\n                  await scrambleExecuteCharacteristic.writeValue(\n                    new Uint8Array(scramble.GANEncoding)\n                  );\n                }\n              } catch (error) {\n                console.log(error);\n              }\n            }}\n          >\n            <FormattedMessage id=\"scrambleGenerator.actions.execute\" />\n          </Button>\n        </>\n      )}\n    </Box>\n  );\n}\n\nexport const ScrambleGeneratorContainer = connect(\n  (state: ApplicationState) => ({\n    robotServer: getRobotServer(state),\n  })\n)(ScrambleGenerator);\n","import React from \"react\";\nimport { AppBar, Toolbar, Typography, Box } from \"@material-ui/core\";\nimport { FormattedMessage } from \"react-intl\";\n\nimport { RobotWidgetContainer } from \"app/robot-widget\";\nimport { ScrambleGeneratorContainer } from \"app/scramble-generator\";\n\nexport function MainScreen(): JSX.Element {\n  return (\n    <Box flexGrow={1}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h5\">\n            <FormattedMessage id=\"appTitle\" />\n          </Typography>\n          <RobotWidgetContainer />\n        </Toolbar>\n      </AppBar>\n\n      <ScrambleGeneratorContainer />\n    </Box>\n  );\n}\n","export function importAll<T = unknown>(\n  requireContext: __WebpackModuleApi.RequireContext\n): Record<string, T> {\n  const importCache: Record<string, T> = {};\n  requireContext\n    .keys()\n    .forEach(\n      (moduleKey: string) =>\n        (importCache[moduleKey] = requireContext(moduleKey))\n    );\n  return importCache;\n}\n","import pathParse from \"path-parse\";\nimport { importAll } from \"app/common/webpack\";\n\ninterface Translations {\n  [key: string]: string | Translations;\n}\n\n// import json translations\nconst translations = importAll<Translations>(\n  require.context(\"../\", true, /\\/translations\\/.*\\.json$/)\n);\n\nconst flattenTranslations = (trans: Translations, keys: string[] = []) =>\n  Object.keys(trans).reduce((acc, key) => {\n    const currentKeys = [...keys, key];\n    const value = trans[key];\n    if (typeof value === \"object\")\n      acc = { ...acc, ...flattenTranslations(value, currentKeys) };\n    else acc[currentKeys.join(\".\")] = value;\n    return acc;\n  }, {} as Record<string, string>);\n\n// merge translation files with the same locale\nconst messageMap = Object.keys(translations).reduce((acc, filepath) => {\n  const locale = pathParse(filepath).name;\n  acc[locale] = {\n    ...acc[locale],\n    ...flattenTranslations(translations[filepath]),\n  };\n  return acc;\n}, {} as Record<string, Record<string, string>>);\n\nexport const locale = navigator.language;\nexport const messages = messageMap[locale.toLowerCase()];\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config): void {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister(): void {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { IntlProvider } from \"react-intl\";\n\nimport { MainScreen } from \"app/main-screen\";\nimport { createStore } from \"app/common/store\";\nimport { messages, locale } from \"translations\";\nimport { importAll } from \"app/common/webpack\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\n// execute any init scripts\nimportAll(require.context(\"./\", true, /\\/on-startup\\.(ts|tsx)$/));\n\n// include all global stylesheets\nimportAll(require.context(\"./\", true, /\\.global\\.css$/));\n\n// create store\nconst store = createStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <IntlProvider locale={locale} messages={messages}>\n      <MainScreen />\n    </IntlProvider>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","import { PayloadAction } from \"@reduxjs/toolkit\";\n\nexport const payloadReducer = <S, P>(state: S, action: PayloadAction<P>): P => {\n  return action.payload;\n};\n\nexport const valueReducer = <T>(value: T): (() => T) => () => value;\n","import { createReducer, combineReducers } from \"@reduxjs/toolkit\";\nimport { registerRobot, unregisterRobot } from \"app/robot-widget/store/actions\";\nimport { RobotState } from \"app/robot-widget/store/types\";\nimport { payloadReducer, valueReducer } from \"app/common/store-reducers\";\n\nexport default combineReducers<RobotState>({\n  device: createReducer<RobotState[\"device\"]>(null, (builder) => {\n    builder.addCase(registerRobot, payloadReducer);\n    builder.addCase(unregisterRobot, valueReducer(null));\n  }),\n});\n","import { registerReducer } from \"app/common/store\";\n\nimport { RobotState } from \"app/robot-widget/store/types\";\nimport reducer from \"app/robot-widget/store/reducer\";\n\ndeclare module \"app/common/store\" {\n  interface ApplicationState {\n    robot: RobotState;\n  }\n}\n\nregisterReducer(\"robot\", reducer);\n","import { createAction } from \"@reduxjs/toolkit\";\n\nconst actionPrefix = \"setup\";\n\nexport const registerRobot = createAction<BluetoothDevice>(\n  `${actionPrefix}/register_robot`\n);\n\nexport const unregisterRobot = createAction(`${actionPrefix}/unregister_robot`);\n","import { Reducer } from \"redux\";\nimport { configureStore, EnhancedStore } from \"@reduxjs/toolkit\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { SagaIterator } from \"redux-saga\";\nimport { call, spawn, delay } from \"redux-saga/effects\";\n\n// ApplicationState will be dynamically populated from on-startup.ts scripts\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface ApplicationState {}\nconst reducerRegistry: Record<string, Reducer> = {};\n\nexport function registerReducer<TKey extends keyof ApplicationState>(\n  key: TKey,\n  reducer: Reducer<ApplicationState[TKey]>\n): void {\n  reducerRegistry[key] = reducer;\n}\n\nexport type Saga = (...args: unknown[]) => SagaIterator;\nconst sagaRegistry: Saga[] = [];\n\nexport function registerSagas(sagas: Saga[]): void {\n  sagaRegistry.push(...sagas);\n}\n\nfunction* makeRestartable(saga: Saga) {\n  while (true) {\n    try {\n      yield call(saga);\n      console.error(\"Unexpected root saga termination\", saga);\n    } catch (e) {\n      console.error(\"Saga error, the saga will be restarted\", e);\n    }\n    yield delay(500);\n  }\n}\n\nfunction* rootSaga() {\n  yield sagaRegistry.map((saga) => spawn(makeRestartable, saga));\n}\n\nexport function createStore(): EnhancedStore {\n  const sagaMiddleware = createSagaMiddleware();\n  const store = configureStore({\n    reducer: reducerRegistry,\n    middleware: [sagaMiddleware],\n  });\n  sagaMiddleware.run(rootSaga);\n  return store;\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"robotWidgetContainer\":\"styles_robotWidgetContainer__1NUaw\"};"],"sourceRoot":""}