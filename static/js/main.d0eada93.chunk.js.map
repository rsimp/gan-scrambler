{"version":3,"sources":["../src sync ///translations//.*/.json$","../src sync ///on-startup/.(ts|tsx)$","../src sync //.css$","app/robot-widget/store/selectors.ts","app/robot-widget/index.tsx","app/common/cube/scramblers/full.ts","app/common/cube/libs/tools.ts","app/common/cube/libs/coordinates.ts","app/common/cube/libs/algorithms.ts","app/common/cube/solvers/five-side-solver.ts","app/common/cube/libs/cube.ts","app/common/cube/libs/cube-preview.ts","app/common/cube/libs/move-table.ts","app/common/cube/libs/pruning-table.ts","app/common/cube/libs/search.ts","app/common/cube/libs/scramble-pieces.ts","app/common/cube/solvers/cross-solver.ts","app/cube-preview/index.tsx","app/common/gan-robot.ts","app/common/array-reducers.ts","app/cfop-scramble/index.tsx","app/common/cube/scramblers/oll.ts","app/common/cube/scramblers/pll.ts","app/random-scramble/index.tsx","app/manual-scramble/index.tsx","app/main-screen/index.tsx","app/common/webpack.ts","translations/index.ts","serviceWorker.ts","index.tsx","app/common/store-reducers.ts","app/robot-widget/store/reducer.ts","app/robot-widget/store/on-startup.ts","app/robot-widget/store/actions.ts","app/common/store.ts"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","getRobotDevice","state","robot","device","getRobotServer","robotDevice","gatt","connected","ConnectedRobotWidget","connect","registerRobot","unregisterRobot","props","IconButton","color","onClick","a","navigator","bluetooth","requestDevice","filters","namePrefix","optionalServices","server","getPrimaryService","deviceInfoService","getCharacteristic","modelCharacteristic","readValue","modelNumberValue","TextDecoder","decode","toUpperCase","addEventListener","console","log","BluetoothConnected","Bluetooth","cubeFaces","moveModifiers","faceEdges","D","L","B","U","R","F","generateScramble","total","cube","createCube","moveList","scramble","join","cubeHistory","twist","cubeStateStr","move","cubeFace","charAt","cubeFaceIdx","indexOf","rotationMultiplier","length","cubeState","split","prevCubeState","slice","faceletOffset","rotationOffset","edgeIdx","rotatedEdgeIdx","moves","currentState","Math","floor","random","newState","push","reset","splice","factorials","factorial","n","binomials","choose","k","s","nextRow","i","prev","getRandomInt","min","max","rotateLeft","pieces","left","right","original","rotateRight","getIndexFromOrientation","flipCount","sum","getOrientationFromIndex","index","numPieces","numFlips","orientation","parity","ori","getParity","j","getIndexFromPermutation","affected","reversed","offset","position","edges","unshift","permutation","getPermutationFromIndex","size","base","binomial","powers","2","validateAlgorithm","algorithm","test","wideMoves","f","r","u","b","l","d","M","S","E","rotations","x","y","z","normalize","reduce","acc","axis","pow","concat","m","output","totalRotation","includes","outputMove","parseAlgorithm","returnTotalRotation","result","match","forEach","moveNum","URFToDLF","merge","invertAlgorithm","reverse","inv","formatAlgorithm","sequence","trim","Centers","Edges","Corners","identity","center","ep","eo","cp","co","allMoves","fiveSideMoves","moveHelper","moveIndex","fn","doCenterMove","newCenter","fromIndex","toIndex","Array","doEdgeMove","newCube","doCornerMove","doMove","centerFacelets","cornerFacelets","edgeFacelets","mod","getFaceletIndex","facelet","Number","getCornerFacelet","cornerIndex","orientationIndex","getEdgeFacelet","edgeIndex","doRotations","rotationAlg","rotation","MoveTable","settings","name","defaultIndex","solvedIndexes","table","this","cubieMove","getVector","getIndex","vector","createMoveHandler","createMoveTable","inverse","createEdgePermutationTable","getCorrectOrientations","numStates","indexes","target","every","piece","createEdgeOrientationTable","createCornerOrientationTable","PruningTable","moveTables","computePruningTable","value","obj","depth","done","permutations","arg","helper","arr","copy","cartesian","data","setPruningValue","find","check","getPruningValue","currentIndex","Search","createTables","initialized","pruningTables","moveTableNames","moveTableIndexes","sort","mappedTables","pruningTable","solution","lastMove","minimumDistance","power","distance","handleSolution","updatedIndexes","search","initialize","maxDepth","format","solutionRotation","formatted","phaseTwoMoves","phaseTwoSearch","getMergeCoord","fiveSideSearch","args","phaseTwoSolution","solve","fiveSideSolver","isArray","solveCoordinates","FRONT_FACE_EDGES","FRONT_FACE_CORNERS","getEdgeOrientation","enabled","needsRotationAjustment","fill","getCornerOrientation","frontCornerIndex","getPermutationFromEnabled","getScrambleForPieces","permutationEdges","permutationCorners","orientationEdges","orientationCorners","needsRotation","rotatedIndexes","rotateIndexes","solutionRotations","rotationMap","cornerIdx","CrossSearch","CubePreview","filter","type","undefined","cubeIndexes","doAlgorithm","scrambleCode","colorMap","defaultColorMap","svgString","options","facelets","centerIndex","corner","faceletIndex","faceletValue","corners","edge","getFaceletArray","faceKey","replace","template","className","dangerouslySetInnerHTML","__html","G","cross","f2l","oll","moveMap","R2","F2","D2","L2","B2","getGANEncoding","Uint8Array","chunckSize","currentChunk","accumulator","currentValue","chunkReducer","executeScramble","robotServer","scrambleService","scrambleExecuteCharacteristic","writeValue","invertedColorMap","ContentContainer","styled","div","attrs","ContentGroup","ConnectedCFOPScramble","useState","scrambleType","setScrambleType","setScramble","FormControl","component","FormLabel","RadioGroup","row","aria-label","onChange","currentTarget","FormControlLabel","control","Radio","label","Button","variant","solveCode","crossSolver","ollScramble","generateOLLScramble","pllScramble","generatePLLScramble","disabled","Boolean","ConnectedRandomScramble","Typography","ConnectedManualScramble","hasError","setHasError","noValidate","autoComplete","TextField","multiline","rowsMax","fullWidth","error","helperText","onBlur","event","manualScrambleValue","fiveSideSolve","fiveSideScramble","Screen","IconContainer","MainScreen","React","navigationValue","setNavigation","useEffect","window","screen","lock","AppBar","Toolbar","BottomNavigation","showLabels","newValue","BottomNavigationAction","icon","Shuffle","Layers","Edit","importAll","requireContext","importCache","moduleKey","translations","require","messageMap","filepath","locale","pathParse","flattenTranslations","trans","key","currentKeys","language","messages","toLowerCase","isLocalhost","location","hostname","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","store","createStore","ReactDOM","render","StylesProvider","injectFirst","document","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","status","ready","unregister","reload","checkValidServiceWorker","payloadReducer","action","payload","combineReducers","createReducer","builder","addCase","registerReducer","reducer","createAction","makeRestartable","rootSaga","reducerRegistry","sagaRegistry","saga","call","delay","spawn","sagaMiddleware","createSagaMiddleware","configureStore","middleware","run"],"mappings":"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","file":"static/js/main.d0eada93.chunk.js","sourcesContent":["var map = {\n\t\"./translations/en-us.json\": 114\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 113;","var map = {\n\t\"./app/robot-widget/store/on-startup.ts\": 120\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 115;","var map = {\n\t\"./assets/styles/main.css\": 117,\n\t\"./tailwind.css\": 118\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 116;","import { ApplicationState } from \"app/common/store\";\nimport { RobotState } from \"app/robot-widget/store/types\";\n\nexport const getRobotDevice = (state: ApplicationState): RobotState[\"device\"] =>\n  state.robot.device;\n\nexport const getRobotServer = (\n  state: ApplicationState\n): BluetoothRemoteGATTServer | null => {\n  const robotDevice = getRobotDevice(state);\n  return robotDevice && robotDevice.gatt?.connected ? robotDevice.gatt : null;\n};\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { IconButton } from \"@material-ui/core\";\nimport { BluetoothConnected, Bluetooth } from \"@material-ui/icons\";\n\nimport { ApplicationState } from \"app/common/store\";\n\nimport { unregisterRobot, registerRobot } from \"app/robot-widget/store/actions\";\nimport { getRobotDevice } from \"app/robot-widget/store/selectors\";\nimport { RobotState } from \"app/robot-widget/store/types\";\n\nconst DEVICE_INFO_SERVICE_UUID = 0x180a;\nconst MODEL_NUMBER_SERVICE_UUID = 0x2a24;\n\nconst SCRAMBLE_SERVICE_UUID = 0xfff0;\n\ninterface RobotWidgetProps {\n  registerRobot: typeof registerRobot;\n  unregisterRobot: typeof unregisterRobot;\n  robotDevice?: RobotState[\"device\"];\n}\n\nexport function RobotWidget(props: RobotWidgetProps): JSX.Element {\n  // TODO pull callback into useCallback hook\n  // TODO pull async with dispatch into a saga\n  return (\n    <IconButton\n      color=\"inherit\"\n      onClick={async () => {\n        try {\n          const device = await navigator.bluetooth.requestDevice({\n            filters: [{ namePrefix: \"GAN\" }],\n            optionalServices: [SCRAMBLE_SERVICE_UUID, DEVICE_INFO_SERVICE_UUID],\n          });\n          const server = await device.gatt?.connect();\n          if (server) {\n            const deviceInfoService = await server.getPrimaryService(\n              DEVICE_INFO_SERVICE_UUID\n            );\n            const modelCharacteristic = await deviceInfoService.getCharacteristic(\n              MODEL_NUMBER_SERVICE_UUID\n            );\n            const modelNumberValue = await modelCharacteristic.readValue();\n            const modelNumber = new TextDecoder().decode(modelNumberValue);\n            if (modelNumber.toUpperCase() === \"GAN ROBOTCUBE\") {\n              device.addEventListener(\"gattserverdisconnected\", () =>\n                props.unregisterRobot()\n              );\n              props.registerRobot(device);\n            } else {\n              //TODO show error message for connecting to wrong type of GAN device\n            }\n          }\n        } catch (error) {\n          console.log(error);\n        }\n      }}\n    >\n      {props.robotDevice ? <BluetoothConnected /> : <Bluetooth />}\n    </IconButton>\n  );\n}\n\nexport const ConnectedRobotWidget = connect(\n  (state: ApplicationState) => ({\n    robotDevice: getRobotDevice(state),\n  }),\n  {\n    registerRobot,\n    unregisterRobot,\n  }\n)(RobotWidget);\n","const cubeFaces = [\"D\", \"L\", \"B\", \"U\", \"R\", \"F\"];\nconst moveModifiers = [\"\", \"2\", \"'\"];\n\n/*\n           +----------+\n           | 24 25 26 |\n           | 31  U 27 |\n           | 30 29 28 |\n+----------+----------+----------+----------+\n| 08 09 10 | 40 41 42 | 32 33 34 | 16 17 18 |\n| 15  L 11 | 47  F 43 | 39  R 35 | 23  B 19 |\n| 14 13 12 | 46 45 44 | 38 37 36 | 22 21 20 |\n+----------+----------+----------+----------+\n           | 00 01 02 |\n           | 07  D 03 |\n           | 06 05 04 |\n           +----------+\n*/\nconst faceEdges: Record<string, Array<number>> = {\n  D: [46, 45, 44, 38, 37, 36, 22, 21, 20, 14, 13, 12],\n  L: [24, 31, 30, 40, 47, 46, 0, 7, 6, 20, 19, 18],\n  B: [26, 25, 24, 8, 15, 14, 6, 5, 4, 36, 35, 34],\n  U: [18, 17, 16, 34, 33, 32, 42, 41, 40, 10, 9, 8],\n  R: [28, 27, 26, 16, 23, 22, 4, 3, 2, 44, 43, 42],\n  F: [30, 29, 28, 32, 39, 38, 2, 1, 0, 12, 11, 10],\n};\n\nexport function generateScramble(total = 26): string {\n  const cube = createCube();\n  const moveList = cube.scramble(total);\n  return moveList.join(\" \");\n}\n\nfunction createCube() {\n  const cubeHistory = [\"DDDDDDDDLLLLLLLLBBBBBBBBUUUUUUUURRRRRRRRFFFFFFFF\"];\n  const reset = () => cubeHistory.splice(1);\n  const twist = (cubeStateStr: string, move: string) => {\n    const cubeFace = move.charAt(0);\n    const cubeFaceIdx = cubeFaces.indexOf(cubeFace) * 8;\n    const rotationMultiplier =\n      move.length > 1 ? (move.charAt(1) === \"2\" ? 2 : 3) : 1;\n\n    const cubeState = cubeStateStr.split(\"\"); // convert to array in order to edit\n    const prevCubeState = cubeState.slice(0);\n\n    // Rotate the stickers on the face itself\n    for (let faceletOffset = 0; faceletOffset < 8; faceletOffset++) {\n      const rotationOffset = (faceletOffset + 6 * rotationMultiplier) % 8;\n      cubeState[cubeFaceIdx + faceletOffset] =\n        prevCubeState[cubeFaceIdx + rotationOffset];\n    }\n\n    // Rotate the adjacent stickers that are part of the same layer\n    for (let edgeIdx = 0; edgeIdx < 12; edgeIdx++) {\n      const rotatedEdgeIdx = (edgeIdx + 9 * rotationMultiplier) % 12;\n      cubeState[faceEdges[cubeFace][edgeIdx]] =\n        prevCubeState[faceEdges[cubeFace][rotatedEdgeIdx]];\n    }\n\n    return cubeState.join(\"\");\n  };\n  const scramble = (total = 26) => {\n    const moves = [];\n    let currentState = cubeHistory[cubeHistory.length - 1];\n\n    while (moves.length < total) {\n      // Generate a random move\n      const move =\n        cubeFaces[Math.floor(Math.random() * 6)] +\n        moveModifiers[Math.floor(Math.random() * 3)];\n      if (move.charAt(0) === \"U\") {\n        continue;\n      }\n      // Don't move the same face twice in a row\n      if (\n        moves.length > 0 &&\n        move.charAt(0) === moves[moves.length - 1].charAt(0)\n      ) {\n        continue;\n      }\n      // Avoid move sequences like \"R L R\", which is the same as \"R2 L\"\n      if (\n        moves.length > 1 &&\n        move.charAt(0) === moves[moves.length - 2].charAt(0) &&\n        moves[moves.length - 1].charAt(0) ===\n          cubeFaces[(cubeFaces.indexOf(move.charAt(0)) + 3) % 6]\n      ) {\n        continue;\n      }\n      const newState = twist(currentState, move);\n      if (cubeHistory.indexOf(newState) === -1) {\n        // If this state hasn't yet been encountered, save it and move on\n        moves.push(move);\n        cubeHistory.push(newState);\n        currentState = newState;\n      }\n    }\n    return moves;\n  };\n\n  return {\n    scramble,\n    reset,\n    twist,\n    currentState: cubeHistory[cubeHistory.length - 1],\n  };\n}\n","const factorials: number[] = [];\n\n/**\n * Calculates n factorial and attempts to cache\n * as much information as possible.\n */\nexport const factorial = (n: number): number => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n\n  if (factorials[n] > 0) {\n    return factorials[n];\n  }\n\n  factorials[n] = factorial(n - 1) * n;\n\n  return factorials[n];\n};\n\nconst binomials: number[][] = [];\n\n/**\n * Calculates n choose k using cached binomial numbers.\n */\nexport const choose = (n: number, k: number): number => {\n  if (k > n) {\n    return 0;\n  }\n\n  while (n >= binomials.length) {\n    const s = binomials.length;\n    const nextRow = [];\n\n    nextRow[0] = 1;\n\n    for (let i = 1, prev = s - 1; i < s; i += 1) {\n      nextRow[i] = binomials[prev][i - 1] + binomials[prev][i];\n    }\n\n    nextRow[s] = 1;\n\n    binomials.push(nextRow);\n  }\n\n  return binomials[n][k];\n};\n\n/**\n * Cartesian product of a given nested array.\n */\nexport const cartesian = (arg: number[][]): number[][] => {\n  const result: number[][] = [];\n  const max = arg.length - 1;\n\n  const helper = (arr: number[], i: number) => {\n    for (let j = 0; j < arg[i].length; j += 1) {\n      const copy = arr.slice(0);\n\n      copy.push(arg[i][j]);\n\n      if (i === max) {\n        result.push(copy);\n      } else {\n        helper(copy, i + 1);\n      }\n    }\n  };\n\n  helper([], 0);\n\n  return result;\n};\n\n// Ger a random integer in the provided range, inclusive.\nexport const getRandomInt = (min: number, max: number): number =>\n  Math.floor(Math.random() * (max - min + 1)) + min;\n\nexport const permute = (n: number, r: number): number =>\n  factorial(n) / factorial(n - r);\n\n/**\n * Rotates the subarray containing the affected pieces\n * to the right by one.\n */\nexport const rotateParts = (pieces: number[], affected: number[]): number[] => {\n  const updatedPieces = pieces.slice(0);\n\n  updatedPieces[affected[0]] = pieces[affected[affected.length - 1]];\n\n  for (let i = 1; i < affected.length; i += 1) {\n    updatedPieces[affected[i]] = pieces[affected[i - 1]];\n  }\n\n  return updatedPieces;\n};\n","import { factorial, choose } from \"app/common/cube/libs/tools\";\n\n/**\n * In-place rotation of the subarray determined by the two\n * indexes left and right to the left by one.\n */\nconst rotateLeft = (pieces: number[], left: number, right: number): void => {\n  const original = pieces[left];\n\n  for (let i = left; i < right; i += 1) {\n    pieces[i] = pieces[i + 1];\n  }\n\n  pieces[right] = original;\n};\n\n/**\n * In-place rotation of the subarray determined by the two\n * indexes left and right to the right by one.\n */\nconst rotateRight = (pieces: number[], left: number, right: number): void => {\n  const original = pieces[right];\n\n  for (let i = right; i > left; i -= 1) {\n    pieces[i] = pieces[i - 1];\n  }\n\n  pieces[left] = original;\n};\n\n/**\n * Bijection which encodes a given orientation vector to an unique index.\n * The flip count is the number of ways in which a single piece in the\n * orientation vector may be oriented. For edges, this number is 2 flips,\n * and for corners there are 3 possible twists. Thus, edges are encoded\n * using a binary number system, and corners using a trinary number system.\n */\nexport const getIndexFromOrientation = (\n  pieces: number[],\n  flipCount: number\n): number => {\n  let sum = 0;\n\n  // Note that we do not include the last element in the vector here.\n  // This is because the orientation of the last piece if determined\n  // by the orientation of all the other pieces - when you rotate any\n  // axis on the cube, only an even number of pieces is affected.\n  for (let i = 0; i < pieces.length - 1; i += 1) {\n    sum = flipCount * sum + pieces[i];\n  }\n\n  return sum;\n};\n\n/**\n * Returns the original orientation vector given the number which\n * describes it, the number of pieces in the vector, and the number\n * of ways in which an individual piece may be oriented.\n */\nexport const getOrientationFromIndex = (\n  index: number,\n  numPieces: number,\n  numFlips: number\n): number[] => {\n  const orientation = [];\n\n  let parity = 0;\n\n  for (let i = numPieces - 2; i >= 0; i -= 1) {\n    const ori = index % numFlips;\n    index = Math.floor(index / numFlips);\n    orientation[i] = ori;\n    parity += ori;\n  }\n\n  // Restore the last piece based on the orientation of the other pieces.\n  orientation[numPieces - 1] = (numFlips - (parity % numFlips)) % numFlips;\n\n  return orientation;\n};\n\n/**\n * Each move on a cube perform an even number of swaps when considering\n * both edges and corner pieces at the same time. Thus, only half of all\n * cube states are reachable using legal moves. This also implies that\n * for a cube to be solvable, the parity of both corners and edges must\n * both be either even or odd. We use this to verify that a cube is\n * solvable when generating random state scrambles, and also to\n * describe the overall cube permutation using only 10 edges, 6 corners\n * and the parity of either the corners or the edges.\n */\nexport const getParity = (pieces: number[]): number => {\n  let sum = 0;\n\n  for (let i = pieces.length - 1; i > 0; i -= 1) {\n    for (let j = i - 1; j >= 0; j -= 1) {\n      if (pieces[j] > pieces[i]) {\n        sum += 1;\n      }\n    }\n  }\n\n  return sum % 2;\n};\n\n/**\n * Encodes the permutation of the affected pieces within the entire\n * permutation vector, by encoding both their position and then the\n * permutation of the affected pieces within the permutation vector\n * using a variable-base number system. If reversed is true, the\n * values are assigned right-to-left. This is used in the Kociemba\n * solver, so that 0 is used as the solved coordinate for the move\n * table describing the UD-slice edges.\n */\nexport const getIndexFromPermutation = (\n  pieces: number[],\n  affected: number[],\n  reversed = false\n): number => {\n  let offset = pieces.length - 1;\n  let position = 0;\n  let k = 1;\n\n  // Store the permutation of the subarray containing\n  // only the affected pieces.\n  const edges = [];\n\n  // Encode the position of the affected pieces in a number\n  // from 0 up to n choose k, where n is the number of pieces\n  // in the permutation vector and k is the number of affected pieces.\n  if (reversed) {\n    for (let n = pieces.length - 1; n >= 0; n -= 1) {\n      if (affected.indexOf(pieces[n]) >= 0) {\n        offset = Math.min(offset, pieces[n]);\n        position += choose(pieces.length - 1 - n, k);\n        edges.unshift(pieces[n]);\n        k += 1;\n      }\n    }\n  } else {\n    for (let n = 0; n < pieces.length; n += 1) {\n      if (affected.indexOf(pieces[n]) >= 0) {\n        offset = Math.min(offset, pieces[n]);\n        position += choose(n, k);\n        edges.push(pieces[n]);\n        k += 1;\n      }\n    }\n  }\n\n  let permutation = 0;\n\n  // Encode the position of the subarray as a number from 0 and up\n  // to n factorial, where n is the number of affected pieces.\n  for (let i = edges.length - 1; i > 0; i -= 1) {\n    let s = 0;\n\n    while (edges[i] !== affected[i]) {\n      rotateLeft(edges, 0, i);\n      s += 1;\n    }\n\n    permutation = (i + 1) * permutation + s;\n  }\n\n  // Encode both the position and the permutation\n  // as a number using a variable base.\n  return factorial(affected.length) * position + permutation;\n};\n\n/**\n * Restores the permutation described by an index, number of affected\n * pieces and the permutation vector size. If reversed is true, the\n * indexes have been assigned right-to-left.\n */\nexport const getPermutationFromIndex = (\n  index: number,\n  affected: number[],\n  size: number,\n  reversed = false\n): number[] => {\n  const base = factorial(affected.length);\n\n  let position = Math.floor(index / base);\n  let permutation = index % base;\n\n  const pieces = [];\n\n  for (let i = 0; i < size; i += 1) {\n    pieces.push(-1);\n  }\n\n  for (let i = 1; i < affected.length; i += 1) {\n    let s = permutation % (i + 1);\n    permutation = Math.floor(permutation / (i + 1));\n\n    while (s > 0) {\n      rotateRight(affected, 0, i);\n      s -= 1;\n    }\n  }\n\n  let k = affected.length - 1;\n\n  if (reversed) {\n    for (let n = 0; n < size; n += 1) {\n      const binomial = choose(size - 1 - n, k + 1);\n\n      if (position - binomial >= 0) {\n        pieces[n] = affected[affected.length - 1 - k];\n        position -= binomial;\n        k -= 1;\n      }\n    }\n  } else {\n    for (let n = size - 1; n >= 0; n -= 1) {\n      const binomial = choose(n, k + 1);\n\n      if (position - binomial >= 0) {\n        pieces[n] = affected[k];\n        position -= binomial;\n        k -= 1;\n      }\n    }\n  }\n\n  return pieces;\n};\n","// Numeric representation of the different powers of moves.\nconst powers: Record<string, number> = {\n  \"\": 0,\n  2: 1,\n  \"'\": 2,\n};\n\n/**\n * Check whether or not we are able to parse the given algorithm string.\n */\nexport const validateAlgorithm = (algorithm: string): boolean =>\n  /^([FRUBLDfrubldxyzMSE][2']?\\s*)+$/.test(algorithm);\n\n// Map single-power wide moves to a rotation + moves.\nconst wideMoves: Record<string, string[]> = {\n  f: [\"z\", \"B\"],\n  r: [\"x\", \"L\"],\n  u: [\"y\", \"D\"],\n  b: [\"z'\", \"F\"],\n  l: [\"x'\", \"R\"],\n  d: [\"y'\", \"U\"],\n  M: [\"x'\", \"R\", \"L'\"],\n  S: [\"z\", \"F'\", \"B\"],\n  E: [\"y'\", \"U\", \"D'\"],\n};\n\n// Specifies the translation of FRUBLD as performed by rotations.\nconst rotations: Record<string, string> = {\n  x: \"DRFULB\",\n  y: \"RBULFD\",\n  z: \"FULBDR\",\n};\n\n/**\n * Strip rotations and wide moves from an algorithm. Returns\n * an array of moves as strings.\n */\nconst normalize = (moves: string[]) => {\n  // Replace wide moves with rotations + moves.\n  moves = moves.reduce((acc: string[], move: string) => {\n    const axis: keyof typeof wideMoves = move.charAt(0);\n    const pow = move.charAt(1);\n\n    if (wideMoves[axis]) {\n      return acc.concat(wideMoves[axis].map((m) => m + pow));\n    }\n\n    return acc.concat(move);\n  }, []);\n\n  let output: string[] = [];\n\n  // We store all rotations that were encountered, to map the\n  // solution to the same final rotation as the scramble.\n  const totalRotation: string[] = [];\n\n  // Remove rotations by mapping all moves to the right of the rotation.\n  for (let i = moves.length - 1; i >= 0; i -= 1) {\n    const axis = moves[i].charAt(0);\n    const pow = powers[moves[i].charAt(1)];\n\n    if (\"xyz\".includes(axis)) {\n      totalRotation.unshift(moves[i]);\n\n      for (let j = 0; j <= pow; j += 1) {\n        output = output.map(\n          (outputMove) =>\n            rotations[axis][\"FRUBLD\".indexOf(outputMove[0])] +\n            outputMove.charAt(1)\n        );\n      }\n    } else {\n      output.unshift(moves[i]);\n    }\n  }\n\n  return [output, totalRotation];\n};\n\n/**\n * Parses a scramble, returning an array of integers describing the moves.\n */\nexport function parseAlgorithm(algorithm: string): number[];\nexport function parseAlgorithm(\n  algorithm: string,\n  returnTotalRotation: boolean\n): [number[], string[]];\nexport function parseAlgorithm(\n  algorithm: string,\n  returnTotalRotation = false\n): number[] | [number[], string[]] {\n  if (!validateAlgorithm(algorithm)) {\n    throw new Error(\"Invalid algorithm provided to algorithm parser\");\n  }\n\n  const result: number[] = [];\n\n  const [moves, totalRotation] = normalize(\n    algorithm.match(/[FRUBLDfrubldxyzMSE][2']?/g) || []\n  );\n\n  moves.forEach((move) => {\n    const moveNum = \"FRUBLD\".indexOf(move.charAt(0));\n    const pow = powers[move.charAt(1)];\n    result.push(moveNum * 3 + pow);\n  });\n\n  if (returnTotalRotation) {\n    return [result, totalRotation];\n  }\n\n  return result;\n}\n\n/**\n * Computes the inverse of a given algorithm. Rotations are supported.\n */\nexport const invertAlgorithm = (algorithm: string): string => {\n  if (!validateAlgorithm(algorithm)) {\n    throw new Error(\"Invalid algorithm provided to algorithm parser\");\n  }\n\n  const moves = algorithm.match(/[FRUBLDfrubldxyzMSE][2']?/g) || [];\n\n  const inverted = moves.reverse().map((move) => {\n    const axis = move.charAt(0);\n    const pow = powers[move.charAt(1)];\n    const inv = pow - 2 * (pow % 3) + 2;\n\n    if (inv === 1) {\n      return `${axis}2`;\n    }\n\n    if (inv === 2) {\n      return `${axis}'`;\n    }\n\n    return axis;\n  });\n\n  return inverted.join(\" \");\n};\n\n/**\n * Convert an array of integers to a human-readable representation.\n */\nexport const formatAlgorithm = (moves: number[]): string => {\n  let sequence = \"\";\n\n  moves.forEach((move) => {\n    sequence += \" \";\n    sequence += \"FRUBLD\".charAt(Math.floor(move / 3));\n\n    switch (move % 3) {\n      case 1:\n        sequence += \"2\";\n        break;\n\n      case 2:\n        sequence += \"'\";\n        break;\n\n      default:\n    }\n  });\n\n  // Trim extra spaces.\n  return sequence.trim();\n};\n","import {\n  getIndexFromPermutation,\n  getPermutationFromIndex,\n  getIndexFromOrientation,\n  getParity,\n} from \"app/common/cube/libs/coordinates\";\n\nimport {\n  MoveTable,\n  createEdgePermutationTable,\n  createCornerPermutationTable,\n  createEdgeOrientationTable,\n  createCornerOrientationTable,\n} from \"app/common/cube/libs/move-table\";\n\nimport Search, { SearchSolution } from \"app/common/cube/libs/search\";\n\nimport { fiveSideMoves } from \"app/common/cube/libs/cube\";\n\n// In phase two, only quarter moves of U and D and double turns of\n// all the other faces are allowed, in order to keep the cube in\n// the phase two group G1.\nconst phaseTwoMoves = [10, 4, 13, 6, 7, 8, 15, 16, 17];\n\n// The following tables are being used in both phases.\nlet parity: MoveTable;\nlet URFToDLF: MoveTable;\nlet slice: MoveTable;\nlet merge: number[][];\n\nconst phaseTwoSearch = new Search(() => {\n  // In order to start phase two, we need to know the positions\n  // in which the pieces landed after solving the cube into G1.\n  // Since returning to the cubie level to perform the solution\n  // would be slow, we use two helper tables in phase one which\n  // later are merged into the final phase two coordinate.\n  const getMergeCoord = (x: number, y: number) => {\n    const a = getPermutationFromIndex(x, [0, 1, 2], 12);\n    const b = getPermutationFromIndex(y, [3, 4, 5], 12);\n\n    for (let i = 0; i < 8; i += 1) {\n      if (a[i] !== -1) {\n        if (b[i] !== -1) {\n          return -1;\n        }\n        b[i] = a[i];\n      }\n    }\n\n    return getIndexFromPermutation(b, [0, 1, 2, 3, 4, 5]);\n  };\n\n  merge = [];\n\n  // Due to the sorted nature of our coordinate definitions, the\n  // index of both the coordinates will be less than 336 when phase\n  // one is finished. This allows for a pretty small merging table.\n  for (let i = 0; i < 336; i += 1) {\n    merge.push([]);\n\n    for (let j = 0; j < 336; j += 1) {\n      merge[i][j] = getMergeCoord(i, j);\n    }\n  }\n\n  return {\n    moveTables: [\n      // The permutation of the slice pices, which already\n      // are in the correct positions on the cube.\n      new MoveTable({\n        name: \"slicePermutation\",\n        size: 24,\n        table: slice.table,\n      }),\n\n      parity,\n      URFToDLF,\n\n      createEdgePermutationTable({\n        name: \"URToDF\",\n        size: 20160,\n        moves: phaseTwoMoves,\n        affected: [0, 1, 2, 3, 4, 5],\n      }),\n    ],\n\n    pruningTables: [\n      [\"slicePermutation\", \"parity\", \"URFToDLF\"],\n      [\"slicePermutation\", \"parity\", \"URToDF\"],\n    ],\n  };\n}, phaseTwoMoves);\n\nclass TwoPhaseSearch extends Search {\n  maxDepth: number;\n  solution: number[];\n\n  constructor(...args: ConstructorParameters<typeof Search>) {\n    super(...args);\n\n    this.maxDepth = 40;\n    this.solution = [];\n  }\n\n  handleSolution(\n    solution: number[],\n    indexes: number[]\n  ): SearchSolution | false {\n    const lastMove = solution.slice(-1)[0];\n\n    // We do not allow solutions which end in a phase two move, as we then\n    // would end up duplicating work.\n    if (\n      lastMove % 2 === 0 &&\n      Math.floor(lastMove / 3) === 6 &&\n      Math.floor(lastMove / 3) === 15\n    ) {\n      return false;\n    }\n\n    const phaseTwoSolution = phaseTwoSearch.solve({\n      indexes: [\n        indexes[3],\n        indexes[4],\n        indexes[5],\n        merge[indexes[6]][indexes[7]],\n      ],\n      maxDepth: this.maxDepth - solution.length,\n      lastMove,\n      format: false,\n    });\n\n    if (phaseTwoSolution) {\n      this.solution = solution.concat(phaseTwoSolution.solution);\n\n      if (this.maxDepth <= this.settings.maxDepth) {\n        return {\n          solution: this.solution,\n          indexes,\n        };\n      }\n\n      this.maxDepth = this.solution.length - 1;\n    }\n\n    return false;\n  }\n}\n\nexport const fiveSideSearch = new TwoPhaseSearch(() => {\n  // The parity move table is so small that we inline it. It\n  // describes the parity of both the edge and corner pieces,\n  // which must be equal for the cube to be solvable. The\n  // coordinate is included in both phases, but only used\n  // in phase two.\n  parity = new MoveTable({\n    name: \"parity\",\n\n    size: 2,\n\n    table: [\n      [1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1],\n      [0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0],\n    ],\n  });\n\n  URFToDLF = createCornerPermutationTable({\n    name: \"URFToDLF\",\n    affected: [0, 1, 2, 3, 4, 5],\n  });\n\n  // This table is not used directly. This coordinate modulo 24 gives the\n  // permutation of the subarray containing the UD-slice pieces, while this\n  // coordinate divided by 24 gives the position of the UD-slice pieces.\n  // Two smaller move tables are created using this table, one to solve the\n  // position of the UD-slice pieces in phase one, and one to solve the\n  // pieces in phase two. Due to the reduced move set in phase two, the pruning\n  // table for this coordinate is smaller than it would normally be.\n  slice = createEdgePermutationTable({\n    name: \"slice\",\n    affected: [8, 9, 10, 11],\n    reversed: true,\n  });\n\n  // Initialize phase two, since it now is guaranteed that the\n  // heper move tables have finished generating.\n  phaseTwoSearch.initialize();\n\n  return {\n    moveTables: [\n      new MoveTable({\n        // The position of the slice edges. When this coordinate is\n        // solved, the UD-slice pieces are in the UD-slice, but they\n        // are not necessarily permuted.\n        name: \"slicePosition\",\n        size: 495,\n        table: slice.table,\n        doMove: (table, index, move) =>\n          Math.floor(table[index * 24][move] / 24),\n      }),\n\n      createCornerOrientationTable({\n        name: \"twist\",\n        affected: [0, 1, 2, 3, 4, 5, 6, 7],\n      }),\n\n      createEdgeOrientationTable({\n        name: \"flip\",\n        affected: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],\n      }),\n\n      slice,\n      parity,\n      URFToDLF,\n\n      createEdgePermutationTable({\n        name: \"URToUL\",\n        affected: [0, 1, 2],\n      }),\n\n      createEdgePermutationTable({\n        name: \"UBToDF\",\n        affected: [3, 4, 5],\n      }),\n    ],\n\n    pruningTables: [\n      [\"slicePosition\", \"flip\"],\n      [\"slicePosition\", \"twist\"],\n    ],\n  };\n}, fiveSideMoves);\n\nexport const fiveSideSolver = (\n  scramble: string | number[],\n  maxDepth = 40\n): false | string => {\n  if (Array.isArray(scramble)) {\n    return fiveSideSearch.solve({\n      indexes: scramble,\n      maxDepth,\n    });\n  }\n\n  return fiveSideSearch.solve({\n    scramble: `x ${scramble}`,\n    maxDepth,\n  });\n};\n\nexport const solveCoordinates = (\n  eo: number[],\n  ep: number[],\n  co: number[],\n  cp: number[]\n): ReturnType<typeof fiveSideSolver> =>\n  fiveSideSolver([\n    Math.floor(getIndexFromPermutation(ep, [8, 9, 10, 11], true) / 24),\n    getIndexFromOrientation(co, 3),\n    getIndexFromOrientation(eo, 2),\n    getIndexFromPermutation(ep, [8, 9, 10, 11], true),\n    getParity(cp),\n    getIndexFromPermutation(cp, [0, 1, 2, 3, 4, 5]),\n    getIndexFromPermutation(ep, [0, 1, 2]),\n    getIndexFromPermutation(ep, [3, 4, 5]),\n  ]);\n","import { parseAlgorithm } from \"./algorithms\";\n\nexport const Centers = {\n  U: 0,\n  R: 1,\n  F: 2,\n  D: 3,\n  L: 4,\n  B: 5,\n};\n\nexport const Edges = {\n  UR: 0,\n  UF: 1,\n  UL: 2,\n  UB: 3,\n  DR: 4,\n  DF: 5,\n  DL: 6,\n  DB: 7,\n  FR: 8,\n  FL: 9,\n  BL: 10,\n  BR: 11,\n};\n\nexport const Corners = {\n  URF: 0,\n  UFL: 1,\n  ULB: 2,\n  UBR: 3,\n  DFR: 4,\n  DLF: 5,\n  DBL: 6,\n  DBR: 7,\n};\n\nconst { F, R, U, B, L, D } = Centers;\nconst { UR, UF, UL, UB, DR, DF, DL, DB, FR, FL, BL, BR } = Edges;\nconst { URF, UFL, ULB, UBR, DFR, DLF, DBL, DBR } = Corners;\n\nexport interface CubeIndexes {\n  center: number[];\n  ep: number[];\n  eo: number[];\n  cp: number[];\n  co: number[];\n}\n\n// The identity cube.\nexport const identity: CubeIndexes = {\n  center: [0, 1, 2, 3, 4, 5],\n  ep: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],\n  eo: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n  cp: [0, 1, 2, 3, 4, 5, 6, 7],\n  co: [0, 0, 0, 0, 0, 0, 0, 0],\n};\n\nexport const moves = [\n  // F\n  {\n    center: identity.center,\n    cp: [UFL, DLF, 2, 3, URF, DFR, 6, 7],\n    co: [1, 2, 0, 0, 2, 1, 0, 0],\n    ep: [0, FL, 2, 3, 4, FR, 6, 7, UF, DF, 10, 11],\n    eo: [0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0],\n  },\n\n  // R\n  {\n    center: identity.center,\n    cp: [DFR, 1, 2, URF, DBR, 5, 6, UBR],\n    co: [2, 0, 0, 1, 1, 0, 0, 2],\n    ep: [FR, 1, 2, 3, BR, 5, 6, 7, DR, 9, 10, UR],\n    eo: identity.eo,\n  },\n\n  // U\n  {\n    center: identity.center,\n    cp: [UBR, URF, UFL, ULB, 4, 5, 6, 7],\n    co: identity.co,\n    ep: [UB, UR, UF, UL, 4, 5, 6, 7, 8, 9, 10, 11],\n    eo: identity.eo,\n  },\n\n  // B\n  {\n    center: identity.center,\n    cp: [0, 1, UBR, DBR, 4, 5, ULB, DBL],\n    co: [0, 0, 1, 2, 0, 0, 2, 1],\n    ep: [0, 1, 2, BR, 4, 5, 6, BL, 8, 9, UB, DB],\n    eo: [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1],\n  },\n\n  // L\n  {\n    center: identity.center,\n    cp: [0, ULB, DBL, 3, 4, UFL, DLF, 7],\n    co: [0, 1, 2, 0, 0, 2, 1, 0],\n    ep: [0, 1, BL, 3, 4, 5, FL, 7, 8, UL, DL, 11],\n    eo: identity.eo,\n  },\n\n  // D\n  {\n    center: identity.center,\n    cp: [0, 1, 2, 3, DLF, DBL, DBR, DFR],\n    co: identity.co,\n    ep: [0, 1, 2, 3, DF, DL, DB, DR, 8, 9, 10, 11],\n    eo: identity.eo,\n  },\n\n  // E\n  {\n    center: [0, F, L, 3, B, R],\n    cp: identity.cp,\n    co: identity.co,\n    ep: [0, 1, 2, 3, 4, 5, 6, 7, FL, BL, BR, FR],\n    eo: [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1],\n  },\n\n  // M\n  {\n    center: [B, 1, U, F, 4, D],\n    cp: identity.cp,\n    co: identity.co,\n    ep: [0, UB, 2, DB, 4, UF, 6, DF, 8, 9, 10, 11],\n    eo: [0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0],\n  },\n\n  // S\n  {\n    center: [L, U, 2, R, D, 5],\n    cp: identity.cp,\n    co: identity.co,\n    ep: [UL, 1, DL, 3, UR, 5, DR, 7, 8, 9, 10, 11],\n    eo: [1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0],\n  },\n];\n\nexport const allMoves = [\n  0, // F\n  1,\n  2,\n  3, // R\n  4,\n  5,\n  6, // U\n  7,\n  8,\n  9, // B\n  10,\n  11,\n  12, // L\n  13,\n  14,\n  15, // D\n  16,\n  17,\n];\n\nexport const fiveSideMoves = [\n  3,\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  10,\n  11,\n  12,\n  13,\n  14,\n  15,\n  16,\n  17,\n];\n\nexport const moveHelper = <T>(\n  cube: T,\n  moveIndex: number,\n  fn: (cube: T, move: CubeIndexes) => T\n): T => {\n  const move = moves[Math.floor(moveIndex / 3)];\n  const pow = (moveIndex % 3) + 1;\n  for (let i = 0; i < pow; i++) {\n    cube = fn(cube, move);\n  }\n  return cube;\n};\n\nexport const doCenterMove = (center: number[], move: CubeIndexes): number[] =>\n  move.center === identity.center\n    ? move.center\n    : move.center.reduce((newCenter, fromIndex, toIndex) => {\n        newCenter[toIndex] = center[fromIndex];\n        return newCenter;\n      }, new Array(6));\n\nexport const doEdgeMove = (\n  cube: Pick<CubeIndexes, \"eo\" | \"ep\">,\n  move: CubeIndexes\n): typeof cube =>\n  move.ep.reduce(\n    (newCube, fromIndex, toIndex) => {\n      newCube.ep[toIndex] = cube.ep[fromIndex];\n      newCube.eo[toIndex] = (cube.eo[fromIndex] + move.eo[toIndex]) % 2;\n      return newCube;\n    },\n    {\n      ep: new Array(12),\n      eo: new Array(12),\n    }\n  );\n\nexport const doCornerMove = (\n  cube: Pick<CubeIndexes, \"co\" | \"cp\">,\n  move: CubeIndexes\n): typeof cube =>\n  move.cp.reduce(\n    (newCube, fromIndex, toIndex) => {\n      newCube.cp[toIndex] = cube.cp[fromIndex];\n      newCube.co[toIndex] = (cube.co[fromIndex] + move.co[toIndex]) % 3;\n      return newCube;\n    },\n    {\n      cp: new Array(8),\n      co: new Array(8),\n    }\n  );\n\nexport const doMove = (cube: CubeIndexes, moveIndex: number): CubeIndexes => {\n  return {\n    ...moveHelper(cube, moveIndex, doCornerMove),\n    ...moveHelper(cube, moveIndex, doEdgeMove),\n    center: moveHelper(cube.center, moveIndex, doCenterMove),\n  };\n};\n\nexport const doAlgorithm = (algorithm: string, cube = identity): CubeIndexes =>\n  !algorithm ? cube : parseAlgorithm(algorithm).reduce(doMove, cube);\n","import {\n  CubeIndexes,\n  Centers,\n  Edges,\n  Corners,\n  identity,\n  doEdgeMove,\n  doCornerMove,\n  doCenterMove,\n} from \"./cube\";\n\nconst centerFacelets = [\"U\", \"R\", \"F\", \"D\", \"L\", \"B\"];\n\nconst cornerFacelets = [\n  [\"U8\", \"R0\", \"F2\"],\n  [\"U6\", \"F0\", \"L2\"],\n  [\"U0\", \"L0\", \"B2\"],\n  [\"U2\", \"B0\", \"R2\"],\n  [\"D2\", \"F8\", \"R6\"],\n  [\"D0\", \"L8\", \"F6\"],\n  [\"D6\", \"B8\", \"L6\"],\n  [\"D8\", \"R8\", \"B6\"],\n];\n\nconst edgeFacelets = [\n  [\"U5\", \"R1\"],\n  [\"U7\", \"F1\"],\n  [\"U3\", \"L1\"],\n  [\"U1\", \"B1\"],\n  [\"D5\", \"R7\"],\n  [\"D1\", \"F7\"],\n  [\"D3\", \"L7\"],\n  [\"D7\", \"B7\"],\n  [\"F5\", \"R3\"],\n  [\"F3\", \"L5\"],\n  [\"B5\", \"L3\"],\n  [\"B3\", \"R5\"],\n];\n\nconst { F, R, U, B, L, D } = Centers;\nconst { UR, UF, UL, UB, DR, DF, DL, DB, FR, FL, BL, BR } = Edges;\nconst { URF, UFL, ULB, UBR, DFR, DLF, DBL, DBR } = Corners;\n\nexport const rotations: Record<string, CubeIndexes> = {\n  x: {\n    center: [F, 1, D, B, 4, U],\n    cp: [DFR, DLF, UFL, URF, DBR, DBL, ULB, UBR],\n    co: [2, 1, 2, 1, 1, 2, 1, 2],\n    ep: [FR, DF, FL, UF, BR, DB, BL, UB, DR, DL, UL, UR],\n    eo: [0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0],\n  },\n  y: {\n    center: [0, B, R, 3, F, L],\n    cp: [UBR, URF, UFL, ULB, DBR, DFR, DLF, DBL],\n    co: identity.co,\n    ep: [3, 0, 1, 2, 7, 4, 5, 6, 11, 8, 9, 10],\n    eo: [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1],\n  },\n  z: {\n    center: [L, U, 2, R, D, 5],\n    cp: [UFL, DLF, DBL, ULB, URF, DFR, DBR, UBR],\n    co: [1, 2, 1, 2, 2, 1, 2, 1],\n    ep: [UL, FL, DF, BL, UR, FR, DR, BR, UF, DL, DB, UB],\n    eo: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n  },\n};\n\nconst mod = (n: number, m: number) => ((n % m) + m) % m;\n\nconst getFaceletIndex = (facelet: string) =>\n  centerFacelets.indexOf(facelet[0]) * 9 + Number(facelet[1]);\nconst getCornerFacelet = (\n  cube: CubeIndexes,\n  cornerIndex: number,\n  orientationIndex: number\n) => {\n  return cornerFacelets[cube.cp[cornerIndex]][\n    mod(orientationIndex - cube.co[cornerIndex], 3)\n  ][0];\n};\n\nconst getEdgeFacelet = (\n  cube: CubeIndexes,\n  edgeIndex: number,\n  orientationIndex: number\n) =>\n  edgeFacelets[cube.ep[edgeIndex]][\n    mod(orientationIndex - cube.eo[edgeIndex], 2)\n  ][0];\n\nexport interface FaceletArrayFilter {\n  edges?: number[];\n  corners?: number[];\n  facelets?: string[];\n}\n\nexport interface FaceletArrayOptions {\n  filter?: FaceletArrayFilter;\n  rotations?: string;\n}\n\nexport const getFaceletArray = (\n  cube: CubeIndexes,\n  options: FaceletArrayOptions = {}\n): string[] => {\n  const facelets: string[] = [];\n\n  if (options.rotations) {\n    cube = doRotations(cube, options.rotations);\n  }\n\n  // add center facelets to array\n  centerFacelets.forEach((facelet, centerIndex) => {\n    facelets[9 * cube.center[centerIndex] + 4] = facelet;\n  });\n\n  // add corner cubie facelets\n  cornerFacelets.forEach((corner, cornerIndex) => {\n    corner.forEach((facelet, orientation) => {\n      const faceletIndex = getFaceletIndex(facelet);\n      const faceletValue = getCornerFacelet(cube, cornerIndex, orientation);\n\n      facelets[faceletIndex] =\n        !options.filter ||\n        options.filter.corners?.includes(cube.cp[cornerIndex]) ||\n        options.filter.facelets?.includes(faceletValue)\n          ? faceletValue\n          : \"G\";\n    });\n  });\n\n  // add edge cubie facelets\n  edgeFacelets.forEach((edge, edgeIndex) => {\n    edge.forEach((facelet, orientation) => {\n      const faceletIndex = getFaceletIndex(facelet);\n      const faceletValue = getEdgeFacelet(cube, edgeIndex, orientation);\n\n      facelets[faceletIndex] =\n        !options.filter ||\n        options.filter.edges?.includes(cube.ep[edgeIndex]) ||\n        options.filter.facelets?.includes(faceletValue)\n          ? faceletValue\n          : \"G\";\n    });\n  });\n\n  return facelets;\n};\n\nconst powers: Record<string, number> = {\n  \"\": 1,\n  2: 2,\n  \"'\": 3,\n};\n\nexport const doRotations = (\n  cube: CubeIndexes,\n  rotationAlg: string\n): CubeIndexes => {\n  return rotationAlg\n    .split(\" \")\n    .map((rotation: string) => ({\n      move: rotations[rotation.charAt(0)],\n      pow: powers[rotation.charAt(1)],\n    }))\n    .reduce((newCube, { move, pow }) => {\n      for (let i = 0; i < pow; i++) {\n        newCube = {\n          center: doCenterMove(newCube.center, move),\n          ...doEdgeMove(newCube, move),\n          ...doCornerMove(newCube, move),\n        };\n      }\n      return newCube;\n    }, cube);\n};\n","import {\n  getPermutationFromIndex,\n  getIndexFromPermutation,\n  getOrientationFromIndex,\n  getIndexFromOrientation,\n} from \"./coordinates\";\n\nimport {\n  doEdgeMove,\n  doCornerMove,\n  moveHelper,\n  allMoves,\n  identity,\n} from \"./cube\";\n\nimport { factorial } from \"./tools\";\n\n/**\n * Create a function which performs a move on a coordinate.\n */\nconst createMoveHandler = (\n  getVector: GetVectorCallback,\n  cubieMove: CubieMoveCallback,\n  getIndex: GetIndexCallback\n) => (index: number, move: number) => {\n  let vector = getVector(index);\n  vector = cubieMove(vector, move);\n  return getIndex(vector);\n};\n\ntype GetVectorCallback = (index: number) => number[];\ntype CubieMoveCallback = (pieces: number[], moveIndex: number) => number[];\ntype GetIndexCallback = (pieces: number[]) => number;\n\ninterface BaseMoveTableSettings {\n  name: string;\n  size: number;\n  defaultIndex?: number;\n  solvedIndexes?: number[];\n  doMove?: (table: number[][], index: number, move: number) => number;\n}\n\ninterface MoveTableSettingsWithTable extends BaseMoveTableSettings {\n  table: number[][];\n}\n\nexport interface MoveTableSettingsWithoutTable extends BaseMoveTableSettings {\n  moves?: number[];\n  getVector: GetVectorCallback;\n  cubieMove: (pieces: number[], moveIndex: number) => number[];\n  getIndex: GetIndexCallback;\n}\n\nexport type MoveTableSettings =\n  | MoveTableSettingsWithTable\n  | MoveTableSettingsWithoutTable;\n\nexport class MoveTable {\n  name: string;\n  size: number;\n  defaultIndex: number;\n  solvedIndexes: number[];\n  table: number[][];\n\n  constructor(settings: MoveTableSettings) {\n    // A name must be provided if the generic solver is being used, as\n    // we use them to create the pruning tables.\n    this.name = settings.name;\n\n    // Some tables in the Kociemba solver define their own size, as\n    // they are a subset of another already generated helper table.\n    this.size = settings.size;\n\n    this.defaultIndex = settings.defaultIndex || 0;\n    this.solvedIndexes = settings.solvedIndexes || [this.defaultIndex];\n\n    // We allow defining a custom function that returns the updated\n    // index. This is useful for helper tables which are subsets\n    // of already generated tables.\n    const doMove = settings.doMove;\n    if (doMove) {\n      this.doMove = (index, move) => doMove(this.table, index, move);\n    }\n\n    if (\"table\" in settings) {\n      this.table = settings.table;\n\n      // If a pre-generated table is provide, do not generate another one.\n      return;\n    }\n\n    const cubieMove = createMoveHandler(\n      settings.getVector,\n      settings.cubieMove,\n      settings.getIndex\n    );\n\n    this.table = this.createMoveTable(settings.size, cubieMove, settings.moves);\n  }\n\n  doMove(index: number, move: number): number {\n    return this.table[index][move];\n  }\n\n  createMoveTable(\n    size: number,\n    cubieMove: ReturnType<typeof createMoveHandler>,\n    moves = allMoves\n  ): number[][] {\n    const table: number[][] = [];\n\n    for (let i = 0; i < size; i += 1) {\n      table.push([]);\n    }\n\n    // Create a matrix which stores the result after\n    // applying a move to a coordinate.\n    for (let i = 0; i < size; i += 1) {\n      for (let j = 0; j < moves.length; j += 1) {\n        const move = moves[j];\n\n        if (!table[i][move]) {\n          // Assign both the value and its inverse at once\n          // to avoid exess computing on the cubie level.\n          const result = cubieMove(i, move);\n          const inverse = move - 2 * (move % 3) + 2;\n          table[i][move] = result;\n          table[result][inverse] = i;\n        }\n      }\n    }\n\n    return table;\n  }\n}\n\nexport interface PermutationTableSettings {\n  name: string;\n  moves?: number[];\n  affected: number[];\n  reversed?: boolean;\n  size?: number;\n}\n\nexport const createCornerPermutationTable = (\n  settings: PermutationTableSettings\n): MoveTable =>\n  new MoveTable({\n    name: settings.name,\n    moves: settings.moves,\n    defaultIndex: getIndexFromPermutation(\n      [0, 1, 2, 3, 4, 5, 6, 7],\n      settings.affected,\n      settings.reversed\n    ),\n    size:\n      settings.size || factorial(8) / factorial(8 - settings.affected.length),\n    getVector: (index) =>\n      getPermutationFromIndex(\n        index,\n        settings.affected.slice(),\n        8,\n        settings.reversed\n      ),\n    cubieMove: (pieces, moveIndex) =>\n      moveHelper({ cp: pieces, co: identity.co }, moveIndex, doCornerMove).cp,\n    getIndex: (pieces) =>\n      getIndexFromPermutation(pieces, settings.affected, settings.reversed),\n  });\n\nexport const createEdgePermutationTable = (\n  settings: PermutationTableSettings\n): MoveTable =>\n  new MoveTable({\n    name: settings.name,\n    moves: settings.moves,\n    defaultIndex: getIndexFromPermutation(\n      [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],\n      settings.affected,\n      settings.reversed\n    ),\n    size:\n      settings.size || factorial(12) / factorial(12 - settings.affected.length),\n    getVector: (index) =>\n      getPermutationFromIndex(\n        index,\n        settings.affected.slice(),\n        12,\n        settings.reversed\n      ),\n    cubieMove: (pieces, moveIndex) =>\n      moveHelper({ ep: pieces, eo: identity.eo }, moveIndex, doEdgeMove).ep,\n    getIndex: (pieces) =>\n      getIndexFromPermutation(pieces, settings.affected, settings.reversed),\n  });\n\nconst getCorrectOrientations = (\n  affected: number[],\n  numPieces: number,\n  numStates: number\n) => {\n  const indexes = [];\n\n  const size = numStates ** (numPieces - 1);\n\n  const target = numStates ** (numPieces - affected.length - 1);\n\n  for (let i = 0; i < size && indexes.length < target; i += 1) {\n    const orientation = getOrientationFromIndex(i, numPieces, numStates);\n\n    if (affected.every((piece) => orientation[piece] === 0)) {\n      indexes.push(i);\n    }\n  }\n\n  return indexes;\n};\n\nexport interface OrientationTableSettings {\n  name: string;\n  affected: number[];\n}\n\nexport const createEdgeOrientationTable = (\n  settings: OrientationTableSettings\n): MoveTable =>\n  new MoveTable({\n    name: settings.name,\n    size: 2048,\n    solvedIndexes: getCorrectOrientations(settings.affected, 12, 2),\n    getVector: (index) => getOrientationFromIndex(index, 12, 2),\n    cubieMove: (pieces, moveIndex) =>\n      moveHelper({ ep: identity.ep, eo: pieces }, moveIndex, doEdgeMove).eo,\n    getIndex: (pieces) => getIndexFromOrientation(pieces, 2),\n  });\n\nexport const createCornerOrientationTable = (\n  settings: OrientationTableSettings\n): MoveTable =>\n  new MoveTable({\n    name: settings.name,\n    size: 2187,\n    solvedIndexes: getCorrectOrientations(settings.affected, 8, 3),\n    getVector: (index) => getOrientationFromIndex(index, 8, 3),\n    cubieMove: (pieces, moveIndex) =>\n      moveHelper({ cp: identity.cp, co: pieces }, moveIndex, doCornerMove).co,\n    getIndex: (pieces) => getIndexFromOrientation(pieces, 3),\n  });\n","import { cartesian } from \"./tools\";\nimport { MoveTable } from \"./move-table\";\n\n/**\n * A pruning table gives a lower bound on the number of moves\n * required to reach a target state.\n */\nclass PruningTable {\n  table: number[];\n  constructor(moveTables: MoveTable[], moves: number[]) {\n    this.table = [];\n    this.computePruningTable(moveTables, moves);\n  }\n\n  setPruningValue(index: number, value: number): void {\n    this.table[index >> 3] ^= (0xf ^ value) << ((index & 7) << 2);\n  }\n\n  getPruningValue(index: number): number {\n    return (this.table[index >> 3] >> ((index & 7) << 2)) & 0xf;\n  }\n\n  computePruningTable(moveTables: MoveTable[], moves: number[]): void {\n    const size = moveTables.reduce((acc, obj) => acc * obj.size, 1);\n\n    this.table.length = 0;\n\n    for (let i = 0; i < (size + 7) >> 3; i += 1) {\n      this.table.push(-1);\n    }\n\n    let depth = 0;\n    let done = 0;\n\n    const powers = [1];\n\n    for (let i = 1; i < moveTables.length; i += 1) {\n      powers.push(moveTables[i - 1].size * powers[i - 1]);\n    }\n\n    const permutations = cartesian(\n      moveTables.map((data) => data.solvedIndexes)\n    );\n\n    for (let i = 0; i < permutations.length; i += 1) {\n      let index = 0;\n\n      for (let j = 0; j < permutations[i].length; j += 1) {\n        index += powers[j] * permutations[i][j];\n      }\n\n      this.setPruningValue(index, 0);\n\n      done += 1;\n    }\n\n    // We generate the table using a BFS. Depth 0 contains all positions which\n    // are solved, and we loop through the correct indexes and apply all 18 moves\n    // to the correct states. Then we visit all positions at depth 2, and apply\n    // the 18 moves, and so on.\n    while (done !== size) {\n      // When half the table is generated, we switch to a backward search\n      // where we apply the 18 moves to all empty entries. If the result\n      // is a position which corresponds to the previous depth, we set the\n      // index to the current depth.\n      const inverse = done > size / 2;\n      const find = inverse ? 0xf : depth;\n      const check = inverse ? depth : 0xf;\n\n      depth += 1;\n\n      for (let index = 0; index < size; index += 1) {\n        if (this.getPruningValue(index) === find) {\n          for (let moveIndex = 0; moveIndex < moves.length; moveIndex += 1) {\n            const move = moves[moveIndex];\n\n            let currentIndex = index;\n            let position = 0;\n\n            for (let i = powers.length - 1; i >= 0; i -= 1) {\n              position +=\n                powers[i] *\n                moveTables[i].doMove(\n                  Math.floor(currentIndex / powers[i]),\n                  move\n                );\n              currentIndex %= powers[i];\n            }\n\n            if (this.getPruningValue(position) === check) {\n              done += 1;\n\n              if (inverse) {\n                this.setPruningValue(index, depth);\n                break;\n              }\n\n              this.setPruningValue(position, depth);\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nexport default PruningTable;\n","import { parseAlgorithm, formatAlgorithm, invertAlgorithm } from \"./algorithms\";\nimport PruningTable from \"./pruning-table\";\nimport { allMoves } from \"./cube\";\nimport { MoveTable } from \"./move-table\";\n\nexport interface CreateTableCallback {\n  (): {\n    moveTables: MoveTable[];\n    pruningTables: string[][];\n  };\n}\n\nexport interface SearchSolution {\n  indexes: number[];\n  solution: number[]; // array of move indexes\n}\n\ninterface BaseSearchSettings {\n  scramble?: string;\n  maxDepth?: number;\n  lastMove?: number;\n  format?: boolean;\n  indexes?: number[];\n}\n\nexport interface SearchSettingsWithoutFormat extends BaseSearchSettings {\n  format: false;\n}\n\nexport interface SearchSettingsWithFormat extends BaseSearchSettings {\n  format?: true;\n}\n\nexport type SearchSettings =\n  | SearchSettingsWithFormat\n  | SearchSettingsWithoutFormat;\n\ntype DefaultedSearchSettings = Required<\n  Pick<SearchSettings, \"maxDepth\" | \"lastMove\" | \"format\">\n> &\n  SearchSettings;\n\nclass Search {\n  moves: number[];\n  initialized!: boolean;\n  moveTables!: MoveTable[];\n  settings!: DefaultedSearchSettings;\n  pruningTables!: Array<{\n    pruningTable: PruningTable;\n    moveTableIndexes: number[];\n  }>;\n  createTables: CreateTableCallback;\n\n  constructor(createTables: CreateTableCallback, moves = allMoves) {\n    this.createTables = createTables;\n    this.moves = moves;\n  }\n\n  initialize(): void {\n    if (this.initialized) {\n      return;\n    }\n\n    this.initialized = true;\n\n    const { moveTables, pruningTables } = this.createTables();\n\n    this.moveTables = moveTables;\n\n    this.pruningTables = [];\n\n    pruningTables.forEach((moveTableNames) => {\n      const moveTableIndexes = moveTableNames.map((name) =>\n        this.moveTables.map((table) => table.name).indexOf(name)\n      );\n\n      moveTableIndexes.sort(\n        (a, b) => this.moveTables[a].size - this.moveTables[b].size\n      );\n\n      const mappedTables: MoveTable[] = [];\n\n      moveTableIndexes.forEach((i) => mappedTables.push(this.moveTables[i]));\n\n      const pruningTable = new PruningTable(mappedTables, this.moves);\n\n      this.pruningTables.push({\n        pruningTable,\n        moveTableIndexes,\n      });\n    });\n  }\n\n  handleSolution(\n    solution: number[],\n    indexes: number[]\n  ): SearchSolution | false {\n    return {\n      solution,\n      indexes,\n    };\n  }\n\n  search(\n    indexes: number[],\n    depth: number,\n    lastMove: number,\n    solution: number[]\n  ): SearchSolution | false {\n    let minimumDistance = 0;\n\n    for (let i = 0; i < this.pruningTables.length; i += 1) {\n      let index = indexes[this.pruningTables[i].moveTableIndexes[0]];\n      let power = 1;\n\n      for (\n        let j = 1;\n        j < this.pruningTables[i].moveTableIndexes.length;\n        j += 1\n      ) {\n        power *= this.moveTables[this.pruningTables[i].moveTableIndexes[j - 1]]\n          .size;\n        index += indexes[this.pruningTables[i].moveTableIndexes[j]] * power;\n      }\n\n      const distance = this.pruningTables[i].pruningTable.getPruningValue(\n        index\n      );\n\n      if (distance > depth) {\n        return false;\n      }\n\n      // The true minimum distance to the solved indexes is\n      // given by the pruning table with the largest distance.\n      if (distance > minimumDistance) {\n        minimumDistance = distance;\n      }\n    }\n\n    if (minimumDistance === 0) {\n      return this.handleSolution(solution, indexes);\n    }\n\n    if (depth > 0) {\n      for (let i = 0; i < this.moves.length; i += 1) {\n        const move = this.moves[i];\n\n        if (\n          Math.floor(move / 3) !== Math.floor(lastMove / 3) &&\n          Math.floor(move / 3) !== Math.floor(lastMove / 3) - 3\n        ) {\n          const updatedIndexes = [];\n\n          for (let j = 0; j < indexes.length; j += 1) {\n            updatedIndexes.push(this.moveTables[j].doMove(indexes[j], move));\n          }\n\n          const result = this.search(\n            updatedIndexes,\n            depth - 1,\n            move,\n            solution.concat([move])\n          );\n\n          if (result) {\n            return result;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  solve(settings: SearchSettingsWithFormat): string | false;\n  solve(settings: SearchSettingsWithoutFormat): SearchSolution | false;\n  solve(settings: SearchSettings): SearchSolution | string | false {\n    this.initialize();\n\n    this.settings = {\n      maxDepth: 22, // For the Kociemba solver.\n      lastMove: 0,\n      format: true,\n      ...settings,\n    };\n\n    const indexes = this.settings.indexes || [];\n\n    let solutionRotation;\n\n    if (this.settings.scramble) {\n      const [moves, totalRotation] = parseAlgorithm(\n        this.settings.scramble,\n        true\n      );\n\n      if (totalRotation.length > 0) {\n        solutionRotation = invertAlgorithm(totalRotation.join(\" \"));\n      }\n\n      for (let i = 0; i < this.moveTables.length; i += 1) {\n        indexes.push(this.moveTables[i].defaultIndex);\n      }\n\n      moves.forEach((move) => {\n        for (let i = 0; i < indexes.length; i += 1) {\n          indexes[i] = this.moveTables[i].doMove(indexes[i], move);\n        }\n      });\n    }\n\n    for (let depth = 0; depth <= this.settings.maxDepth; depth += 1) {\n      const solution = this.search(indexes, depth, this.settings.lastMove, []);\n\n      if (solution) {\n        if (this.settings.format) {\n          const formatted = formatAlgorithm(solution.solution);\n\n          if (solutionRotation) {\n            // If we have rotations in the scramble, apply them to the solution\n            // and then parse again to remove the rotations. This results in a\n            // solution that can be applied from the result scramble orientation.\n            return formatAlgorithm(\n              parseAlgorithm(`${solutionRotation} ${formatted}`)\n            );\n          }\n\n          return formatted;\n        }\n\n        return solution;\n      }\n    }\n\n    return false;\n  }\n}\n\nexport default Search;\n","import {\n  getPermutationFromIndex,\n  getOrientationFromIndex,\n  getParity,\n} from \"app/common/cube/libs/coordinates\";\n\nimport { getRandomInt, factorial } from \"app/common/cube/libs/tools\";\n\nimport { invertAlgorithm, formatAlgorithm, parseAlgorithm } from \"./algorithms\";\nimport { identity, Corners } from \"app/common/cube/libs/cube\";\nimport { doRotations } from \"app/common/cube/libs/cube-preview\";\n\nimport { solveCoordinates } from \"app/common/cube/solvers/five-side-solver\";\n\nconst FRONT_FACE_EDGES = [1, 9, 5, 8];\nconst FRONT_FACE_CORNERS = [Corners.URF, Corners.UFL, Corners.DLF, Corners.DFR];\n\nconst mod = (n: number, m: number) => ((n % m) + m) % m;\n\nconst getEdgeOrientation = (\n  enabled: number[],\n  permutation: number[],\n  needsRotationAjustment: boolean\n) => {\n  const pieces = getOrientationFromIndex(\n    getRandomInt(0, 2 ** (enabled.length - 1)),\n    enabled.length,\n    2\n  );\n\n  const orientation = Array(12).fill(0);\n\n  enabled.forEach((piece, i) => {\n    orientation[piece] = pieces[i];\n  });\n\n  if (needsRotationAjustment) {\n    // adjust front face corners so they're all oriented with F on top\n    // except when the piece is included in the enabled array to generate\n    // a random orientation\n    FRONT_FACE_EDGES.forEach((piece, i) => {\n      if (enabled.includes(piece)) {\n        return;\n      }\n      // if edge is in the correct or opposite side set orientation to 0\n      // otherwise set orientation to 1\n      orientation[piece] = mod(\n        FRONT_FACE_EDGES.indexOf(permutation[piece]) - i,\n        2\n      );\n    });\n  }\n\n  return orientation;\n};\n\nconst getCornerOrientation = (\n  enabled: number[],\n  permutation: number[],\n  needsRotationAjustment: boolean\n) => {\n  const pieces = getOrientationFromIndex(\n    getRandomInt(0, 3 ** (enabled.length - 1)),\n    enabled.length,\n    3\n  );\n\n  const orientation = Array(8).fill(0);\n\n  enabled.forEach((piece, i) => {\n    orientation[piece] = pieces[i];\n  });\n\n  if (needsRotationAjustment) {\n    // adjust front face corners so they're all oriented with F on top\n    // except when the piece is included in the enabled array to generate\n    // a random oriention\n    FRONT_FACE_CORNERS.forEach((piece, i) => {\n      if (enabled.includes(piece)) {\n        return;\n      }\n      const frontCornerIndex = FRONT_FACE_CORNERS.indexOf(permutation[piece]);\n      const displacement = frontCornerIndex - i;\n      // if corner is in the correct or opposite corner then set orientation to 0\n      if (mod(displacement, 2) !== 0) {\n        // otherwise set URF and DLF to 2 and the others to 1\n        orientation[piece] = mod(frontCornerIndex, 2) === 0 ? 2 : 1;\n      }\n    });\n  }\n\n  return orientation;\n};\n\n/**\n * Returns a permutation vector where all pieces are\n * solved, except for the given enabled pieces.\n */\nconst getPermutationFromEnabled = (enabled: number[], size: number) => {\n  const pieces = getPermutationFromIndex(\n    getRandomInt(0, factorial(enabled.length)),\n    enabled.slice(0),\n    enabled.length\n  );\n\n  const permutation = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11].slice(0, size);\n\n  enabled.forEach((piece, i) => {\n    permutation[piece] = pieces[i];\n  });\n\n  return permutation;\n};\n\n/**\n * Generates a random scramble where all pieces are solved, except\n * for the provided edges and corners, which will be scrambled randomly.\n */\nexport const getScrambleForPieces = (\n  permutationEdges: number[],\n  permutationCorners: number[],\n  orientationEdges = permutationEdges,\n  orientationCorners = permutationCorners,\n  needsRotation = false\n): string | false => {\n  let eo;\n  let ep;\n  let co;\n  let cp;\n\n  // For the kociemba algorithm the U and D faces are special. For a five sided\n  // solve you require both. If you orient the White or Yellow face up on the robot,\n  // like in the cube previews, the solve is impossible. To work around this we start\n  // by setting the Whte/Yellow face as F, even though it is U on the robot. Then we\n  // rotate the cube so that the F face is now is oriented on top. This allows us to\n  // not use the White/Yellow face (F) while solving, but to translate the solve\n  // afterwards so that the solution algorithm does not use any U moves\n\n  const rotations = \"x\";\n  const rotatedIndexes = needsRotation\n    ? rotateIndexes(\n        {\n          cp: permutationCorners,\n          co: orientationCorners,\n          ep: permutationEdges,\n          eo: orientationEdges,\n        },\n        rotations\n      )\n    : {\n        cp: permutationCorners,\n        co: orientationCorners,\n        ep: permutationEdges,\n        eo: orientationEdges,\n      };\n\n  do {\n    ep = getPermutationFromEnabled(rotatedIndexes.ep, 12);\n\n    eo = getEdgeOrientation(rotatedIndexes.eo, ep, needsRotation);\n\n    cp = getPermutationFromEnabled(rotatedIndexes.cp, 8);\n\n    co = getCornerOrientation(rotatedIndexes.co, cp, needsRotation);\n  } while (getParity(ep) !== getParity(cp));\n\n  const solution = solveCoordinates(eo, ep, co, cp);\n  if (needsRotation) {\n    const solutionRotations = invertAlgorithm(rotations);\n    return formatAlgorithm(parseAlgorithm(`${solutionRotations} ${solution}`));\n  } else {\n    return solution;\n  }\n};\n\nconst rotateIndexes = (\n  indexes: {\n    ep: number[];\n    cp: number[];\n    eo: number[];\n    co: number[];\n  },\n  rotations: string\n) => {\n  const rotationMap = doRotations(identity, rotations);\n  return {\n    ep: indexes.ep.map((edgeIdx) => rotationMap.ep[edgeIdx]),\n    eo: indexes.eo.map((edgeIdx) => rotationMap.ep[edgeIdx]),\n    cp: indexes.cp.map((cornerIdx) => rotationMap.cp[cornerIdx]),\n    co: indexes.co.map((cornerIdx) => rotationMap.cp[cornerIdx]),\n  };\n};\n\nexport default getScrambleForPieces;\n","import {\n  createEdgePermutationTable,\n  createEdgeOrientationTable,\n} from \"app/common/cube/libs/move-table\";\n\nimport Search from \"app/common/cube/libs/search\";\n\nimport { fiveSideMoves, Edges } from \"app/common/cube/libs/cube\";\n\nexport const CrossSearch = new Search(\n  () => ({\n    moveTables: [\n      createEdgePermutationTable({\n        name: \"EdgePermutation\",\n        affected: [Edges.DB, Edges.DF, Edges.DL, Edges.DR],\n      }),\n\n      createEdgeOrientationTable({\n        name: \"EdgeOrientation\",\n        affected: [Edges.DB, Edges.DF, Edges.DL, Edges.DR],\n      }),\n    ],\n\n    pruningTables: [[\"EdgePermutation\"], [\"EdgeOrientation\"]],\n  }),\n  fiveSideMoves\n);\n\nexport const crossSolver = (scramble: string): string | false =>\n  CrossSearch.solve({ scramble });\n","import React from \"react\";\n\nimport { doAlgorithm, Edges, Corners } from \"app/common/cube/libs/cube\";\nimport {\n  getFaceletArray,\n  FaceletArrayFilter,\n} from \"app/common/cube/libs/cube-preview\";\n\ninterface CubePreviewProps {\n  scrambleCode: string;\n  type?: string;\n  colorMap?: Record<string, string>;\n}\n\nexport function CubePreview(props: CubePreviewProps): JSX.Element {\n  const filter = props.type ? filters[props.type] : undefined;\n  const cubeIndexes = doAlgorithm(props.scrambleCode);\n  const colorMap = props.colorMap ?? defaultColorMap;\n  const svgString = getFaceletArray(cubeIndexes, {\n    filter,\n  })\n    .map((faceKey) => colorMap[faceKey])\n    .reduce((acc, color) => acc.replace(\"{}\", color), template);\n\n  return (\n    <div\n      className=\"w-3/4 self-center\"\n      dangerouslySetInnerHTML={{ __html: svgString }}\n    ></div>\n  );\n}\n\nconst defaultColorMap: Record<string, string> = {\n  U: \"white\",\n  R: \"red\",\n  F: \"green\",\n  D: \"yellow\",\n  L: \"orange\",\n  B: \"blue\",\n  G: \"gray\",\n};\n\nconst crossFilter = {\n  edges: [Edges.DB, Edges.DF, Edges.DR, Edges.DL],\n};\n\nconst f2lFilter = {\n  edges: [\n    Edges.DB,\n    Edges.DF,\n    Edges.DR,\n    Edges.DL,\n    Edges.BL,\n    Edges.BR,\n    Edges.FL,\n    Edges.FR,\n  ],\n  corners: [Corners.DBR, Corners.DLF, Corners.DBL, Corners.DFR],\n};\n\nconst ollFilter = {\n  edges: [\n    Edges.DB,\n    Edges.DF,\n    Edges.DR,\n    Edges.DL,\n    Edges.BL,\n    Edges.BR,\n    Edges.FL,\n    Edges.FR,\n  ],\n  corners: [Corners.DBR, Corners.DLF, Corners.DBL, Corners.DFR],\n  facelets: [\"U\"],\n};\n\nconst filters: Record<string, FaceletArrayFilter> = {\n  cross: crossFilter,\n  f2l: f2lFilter,\n  oll: ollFilter,\n};\n\nconst template = `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"-5 -5 258 196\" style=\"stroke-linejoin:round;\">\n  <g>\n    <rect x=\"64\" y=\"2\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"84\" y=\"2\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"104\" y=\"2\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"64\" y=\"22\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"84\" y=\"22\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"104\" y=\"22\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"64\" y=\"42\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"84\" y=\"42\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"104\" y=\"42\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"126\" y=\"64\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"146\" y=\"64\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"166\" y=\"64\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"126\" y=\"84\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"146\" y=\"84\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"166\" y=\"84\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"126\" y=\"104\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"146\" y=\"104\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"166\" y=\"104\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"64\" y=\"64\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"84\" y=\"64\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"104\" y=\"64\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"64\" y=\"84\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"84\" y=\"84\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"104\" y=\"84\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"64\" y=\"104\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"84\" y=\"104\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"104\" y=\"104\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"64\" y=\"126\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"84\" y=\"126\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"104\" y=\"126\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"64\" y=\"146\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"84\" y=\"146\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"104\" y=\"146\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"64\" y=\"166\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"84\" y=\"166\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"104\" y=\"166\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"2\" y=\"64\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"22\" y=\"64\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"42\" y=\"64\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"2\" y=\"84\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"22\" y=\"84\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"42\" y=\"84\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"2\" y=\"104\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"22\" y=\"104\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"42\" y=\"104\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"188\" y=\"64\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"208\" y=\"64\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"228\" y=\"64\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"188\" y=\"84\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"208\" y=\"84\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"228\" y=\"84\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"188\" y=\"104\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"208\" y=\"104\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"228\" y=\"104\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n  </g>\n</svg>`;\n","import { chunkReducer } from \"app/common/array-reducers\";\n\nconst SCRAMBLE_SERVICE_UUID = 0xfff0;\nconst SCRAMBLE_CHARACTERISTIC_UUID = 0xfff3;\n\nconst moveMap: Record<string, number> = {\n  R: 0,\n  R2: 1,\n  \"R'\": 2,\n  F: 3,\n  F2: 4,\n  \"F'\": 5,\n  D: 6,\n  D2: 7,\n  \"D'\": 8,\n  L: 9,\n  L2: 10,\n  \"L'\": 11,\n  B: 12,\n  B2: 13,\n  \"B'\": 14,\n};\n\nexport function getGANEncoding(scramble: string): Uint8Array {\n  return new Uint8Array(\n    scramble\n      .split(\" \")\n      .map((move) => moveMap[move])\n      .reduce(chunkReducer(2), [])\n      .map((moves) => moves[0] * 16 + (moves[1] ?? 15))\n  );\n}\n\nexport const executeScramble = async (\n  robotServer: BluetoothRemoteGATTServer | null,\n  scramble: string\n): Promise<void> => {\n  try {\n    if (robotServer) {\n      const scrambleService = await robotServer.getPrimaryService(\n        SCRAMBLE_SERVICE_UUID\n      );\n      const scrambleExecuteCharacteristic = await scrambleService.getCharacteristic(\n        SCRAMBLE_CHARACTERISTIC_UUID\n      );\n\n      await scrambleExecuteCharacteristic.writeValue(getGANEncoding(scramble));\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\n","interface Reducer<T, K> {\n  (acc: T, curr: K): T;\n}\n\nexport const chunkReducer = <T>(\n  chunckSize: number\n): Reducer<Array<Array<T>>, T> => {\n  let currentChunk: Array<T>;\n  return (accumulator: Array<Array<T>>, currentValue: T) => {\n    if (!currentChunk || currentChunk.length === chunckSize) {\n      currentChunk = [];\n      accumulator.push(currentChunk);\n    }\n    currentChunk.push(currentValue);\n    return accumulator;\n  };\n};\n","import React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n  Button,\n  FormControl,\n  FormLabel,\n  RadioGroup,\n  FormControlLabel,\n  Radio,\n} from \"@material-ui/core\";\nimport { FormattedMessage } from \"react-intl\";\nimport styled from \"styled-components/macro\";\n\nimport { ApplicationState } from \"app/common/store\";\n\nimport { getRobotServer } from \"app/robot-widget/store/selectors\";\n\nimport { generateScramble } from \"app/common/cube/scramblers/full\";\nimport { generateOLLScramble } from \"app/common/cube/scramblers/oll\";\nimport { crossSolver } from \"app/common/cube/solvers/cross-solver\";\nimport { CubePreview } from \"app/cube-preview\";\nimport { generatePLLScramble } from \"app/common/cube/scramblers/pll\";\nimport { executeScramble } from \"app/common/gan-robot\";\n\ninterface CFOPScrambleProps {\n  robotServer: BluetoothRemoteGATTServer | null;\n}\n\ntype ScrambleType = \"cross\" | \"f2l\" | \"oll\" | \"pll\";\n\nconst invertedColorMap: Record<string, string> = {\n  U: \"yellow\",\n  R: \"red\",\n  F: \"blue\",\n  D: \"white\",\n  L: \"orange\",\n  B: \"green\",\n  G: \"gray\",\n};\n\nconst ContentContainer = styled.div.attrs({\n  className: \"flex flex-col m-med children:mt-lg children:first:mt-0\",\n})``;\n\nconst ContentGroup = styled.div.attrs({\n  className: \"flex flex-col children:mt-sm children:first:mt-0\",\n})``;\n\nexport function CFOPScramble(props: CFOPScrambleProps): JSX.Element {\n  const [scrambleType, setScrambleType] = useState<ScrambleType>(\"cross\");\n  const [scramble, setScramble] = useState<string>(\"\");\n  return (\n    <ContentContainer>\n      <ContentGroup>\n        <FormControl component=\"fieldset\">\n          <FormLabel component=\"legend\">Scramble Type</FormLabel>\n          <RadioGroup\n            row\n            aria-label=\"Scramble Type\"\n            name=\"scrambleType\"\n            value={scrambleType}\n            onChange={(e) => {\n              if (e.currentTarget.value !== scrambleType) {\n                setScramble(\"\");\n              }\n              setScrambleType(e.currentTarget.value as ScrambleType);\n            }}\n          >\n            <FormControlLabel value=\"cross\" control={<Radio />} label=\"Cross\" />\n            <FormControlLabel value=\"f2l\" control={<Radio />} label=\"F2L\" />\n            <FormControlLabel value=\"oll\" control={<Radio />} label=\"OLL\" />\n            <FormControlLabel value=\"pll\" control={<Radio />} label=\"PLL\" />\n          </RadioGroup>\n        </FormControl>\n\n        <Button\n          variant=\"contained\"\n          onClick={() => {\n            switch (scrambleType) {\n              case \"cross\":\n                setScramble(generateScramble());\n                break;\n              case \"f2l\":\n                // faster to do a simple cross solve than a full solve\n                const scramble = generateScramble(19);\n                const solveCode = crossSolver(scramble);\n                if (solveCode) {\n                  setScramble(`${scramble} ${solveCode}`);\n                }\n                break;\n              case \"oll\":\n                const ollScramble = generateOLLScramble();\n                if (ollScramble) {\n                  setScramble(ollScramble);\n                }\n                break;\n              case \"pll\":\n                const pllScramble = generatePLLScramble();\n                if (pllScramble) {\n                  setScramble(pllScramble);\n                }\n                break;\n            }\n          }}\n        >\n          <FormattedMessage id=\"scramble.actions.scramble\" />\n        </Button>\n      </ContentGroup>\n\n      <ContentGroup>\n        <CubePreview\n          scrambleCode={scramble}\n          type={scrambleType}\n          colorMap={invertedColorMap}\n        />\n        <Button\n          variant=\"contained\"\n          disabled={!Boolean(scramble) || !Boolean(props.robotServer)}\n          onClick={() => executeScramble(props.robotServer, scramble)}\n        >\n          <FormattedMessage id=\"scramble.actions.send\" />\n        </Button>\n      </ContentGroup>\n    </ContentContainer>\n  );\n}\n\nexport const ConnectedCFOPScramble = connect((state: ApplicationState) => ({\n  robotServer: getRobotServer(state),\n}))(CFOPScramble);\n","import getScrambleForPieces from \"app/common/cube/libs/scramble-pieces\";\nimport { Edges, Corners } from \"app/common/cube/libs/cube\";\n\nexport const generateOLLScramble = (needsRotation = true): string | false =>\n  getScrambleForPieces(\n    [Edges.UR, Edges.UF, Edges.UL, Edges.UB],\n\n    [Edges.UR, Edges.UF, Edges.UL, Edges.UB],\n\n    [Corners.URF, Corners.UFL, Corners.ULB, Corners.UBR],\n\n    [Corners.URF, Corners.UFL, Corners.ULB, Corners.UBR],\n    needsRotation\n  );\n","import { getScrambleForPieces } from \"app/common/cube/libs/scramble-pieces\";\nimport { Edges, Corners } from \"app/common/cube/libs/cube\";\n\nexport const generatePLLScramble = (needsRotation = true): string | false =>\n  getScrambleForPieces(\n    [Edges.UR, Edges.UF, Edges.UL, Edges.UB],\n\n    [Corners.URF, Corners.UFL, Corners.ULB, Corners.UBR],\n\n    [],\n\n    [],\n    needsRotation\n  );\n","import React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button, Typography } from \"@material-ui/core\";\nimport { FormattedMessage } from \"react-intl\";\nimport styled from \"styled-components/macro\";\n\nimport { ApplicationState } from \"app/common/store\";\n\nimport { getRobotServer } from \"app/robot-widget/store/selectors\";\n\nimport { generateScramble } from \"app/common/cube/scramblers/full\";\nimport { CubePreview } from \"app/cube-preview\";\nimport { executeScramble } from \"app/common/gan-robot\";\n\ninterface RandomScrambleProps {\n  robotServer: BluetoothRemoteGATTServer | null;\n}\n\nconst ContentContainer = styled.div.attrs({\n  className: \"flex flex-col m-med children:mt-lg children:first:mt-0\",\n})``;\n\nconst ContentGroup = styled.div.attrs({\n  className: \"flex flex-col children:mt-sm children:first:mt-0\",\n})``;\n\nexport function RandomScramble(props: RandomScrambleProps): JSX.Element {\n  const [scramble, setScramble] = useState<string>(\"\");\n  return (\n    <ContentContainer>\n      <ContentGroup>\n        <Button\n          variant=\"contained\"\n          onClick={() => {\n            setScramble(generateScramble());\n          }}\n        >\n          <FormattedMessage id=\"scramble.actions.scramble\" />\n        </Button>\n      </ContentGroup>\n\n      <ContentGroup>\n        <Typography variant=\"body1\">{scramble}</Typography>\n        <CubePreview scrambleCode={scramble} />\n        <Button\n          variant=\"contained\"\n          disabled={!Boolean(props.robotServer)}\n          onClick={() => executeScramble(props.robotServer, scramble)}\n        >\n          <FormattedMessage id=\"scramble.actions.send\" />\n        </Button>\n      </ContentGroup>\n    </ContentContainer>\n  );\n}\n\nexport const ConnectedRandomScramble = connect((state: ApplicationState) => ({\n  robotServer: getRobotServer(state),\n}))(RandomScramble);\n","import React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button, TextField } from \"@material-ui/core\";\nimport { FormattedMessage } from \"react-intl\";\nimport styled from \"styled-components/macro\";\n\nimport { ApplicationState } from \"app/common/store\";\n\nimport { getRobotServer } from \"app/robot-widget/store/selectors\";\n\nimport { fiveSideSolver } from \"app/common/cube/solvers/five-side-solver\";\nimport { CubePreview } from \"app/cube-preview\";\nimport {\n  validateAlgorithm,\n  invertAlgorithm,\n} from \"app/common/cube/libs/algorithms\";\nimport { executeScramble } from \"app/common/gan-robot\";\n\ninterface ManualScrambleProps {\n  robotServer: BluetoothRemoteGATTServer | null;\n}\n\nconst ContentContainer = styled.div.attrs({\n  className: \"flex flex-col m-med children:mt-lg children:first:mt-0\",\n})``;\n\nconst ContentGroup = styled.div.attrs({\n  className: \"flex flex-col children:mt-sm children:first:mt-0\",\n})``;\n\nexport function ManualScramble(props: ManualScrambleProps): JSX.Element {\n  const [scramble, setScramble] = useState<string>(\"\");\n  const [hasError, setHasError] = useState(false);\n  return (\n    <ContentContainer>\n      <ContentGroup>\n        <form noValidate autoComplete=\"off\" className=\"container\">\n          <TextField\n            id=\"manual-scramble\"\n            label=\"Manual Scramble\"\n            multiline\n            rowsMax={4}\n            fullWidth\n            error={hasError}\n            helperText={hasError && \"Invalid Scramble Code\"}\n            onBlur={(event: React.FocusEvent<HTMLInputElement>) => {\n              const manualScrambleValue = event.target.value;\n              if (manualScrambleValue.length > 0) {\n                if (validateAlgorithm(manualScrambleValue)) {\n                  const fiveSideSolve = fiveSideSolver(manualScrambleValue);\n                  if (fiveSideSolve) {\n                    const fiveSideScramble = invertAlgorithm(fiveSideSolve);\n                    setScramble(fiveSideScramble);\n                  }\n                } else {\n                  setHasError(true);\n                  setScramble(\"\");\n                }\n              } else {\n                setHasError(false);\n                setScramble(\"\");\n              }\n            }}\n          />\n        </form>\n      </ContentGroup>\n\n      <ContentGroup>\n        <CubePreview scrambleCode={scramble} />\n        <Button\n          variant=\"contained\"\n          disabled={!Boolean(props.robotServer) && Boolean(scramble)}\n          onClick={() => executeScramble(props.robotServer, scramble)}\n        >\n          <FormattedMessage id=\"scramble.actions.send\" />\n        </Button>\n      </ContentGroup>\n    </ContentContainer>\n  );\n}\n\nexport const ConnectedManualScramble = connect((state: ApplicationState) => ({\n  robotServer: getRobotServer(state),\n}))(ManualScramble);\n","import React, { useEffect } from \"react\";\nimport {\n  AppBar,\n  Toolbar,\n  Typography,\n  BottomNavigation,\n  BottomNavigationAction,\n} from \"@material-ui/core\";\nimport { Shuffle, Layers, Edit } from \"@material-ui/icons\";\nimport { FormattedMessage } from \"react-intl\";\nimport styled from \"styled-components/macro\";\n\nimport { ConnectedRobotWidget } from \"app/robot-widget\";\nimport { ConnectedCFOPScramble } from \"app/cfop-scramble\";\nimport { fiveSideSearch } from \"app/common/cube/solvers/five-side-solver\";\nimport { ConnectedRandomScramble } from \"app/random-scramble\";\nimport { ConnectedManualScramble } from \"app/manual-scramble\";\n\nconst Screen = styled.div.attrs({ className: \"flex flex-col h-screen\" })``;\n\nconst IconContainer = styled.div.attrs({\n  className: \"flex flex-row ml-auto\",\n})``;\n\nexport function MainScreen(): JSX.Element {\n  const [navigationValue, setNavigation] = React.useState(\"random\");\n  const handleChange = (\n    event: React.ChangeEvent<unknown>,\n    newValue: string\n  ) => {\n    setNavigation(newValue);\n  };\n\n  useEffect(() => {\n    window.screen.orientation.lock(\"portrait\");\n    fiveSideSearch.initialize();\n  }, []);\n\n  return (\n    <Screen>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h5\">\n            <FormattedMessage id=\"appTitle\" />\n          </Typography>\n          <IconContainer>\n            <ConnectedRobotWidget />\n          </IconContainer>\n        </Toolbar>\n      </AppBar>\n\n      <div className=\"flex flex-col h-full\">\n        {navigationValue === \"random\" && <ConnectedRandomScramble />}\n        {navigationValue === \"cfop\" && <ConnectedCFOPScramble />}\n        {navigationValue === \"manual\" && <ConnectedManualScramble />}\n\n        <div className=\"w-full mt-auto\">\n          <BottomNavigation\n            showLabels\n            value={navigationValue}\n            onChange={handleChange}\n            className=\"w-full\"\n          >\n            <BottomNavigationAction\n              icon={<Shuffle />}\n              value=\"random\"\n              label=\"RANDOM\"\n              aria-label=\"phone\"\n            />\n            <BottomNavigationAction\n              icon={<Layers />}\n              value=\"cfop\"\n              label=\"CFOP\"\n              aria-label=\"favorite\"\n            />\n            <BottomNavigationAction\n              icon={<Edit />}\n              value=\"manual\"\n              label=\"MANUAL\"\n              aria-label=\"person\"\n            />\n          </BottomNavigation>\n        </div>\n      </div>\n    </Screen>\n  );\n}\n","export function importAll<T = unknown>(\n  requireContext: __WebpackModuleApi.RequireContext\n): Record<string, T> {\n  const importCache: Record<string, T> = {};\n  requireContext\n    .keys()\n    .forEach(\n      (moduleKey: string) =>\n        (importCache[moduleKey] = requireContext(moduleKey))\n    );\n  return importCache;\n}\n","import pathParse from \"path-parse\";\nimport { importAll } from \"app/common/webpack\";\n\ninterface Translations {\n  [key: string]: string | Translations;\n}\n\n// import json translations\nconst translations = importAll<Translations>(\n  require.context(\"../\", true, /\\/translations\\/.*\\.json$/)\n);\n\nconst flattenTranslations = (trans: Translations, keys: string[] = []) =>\n  Object.keys(trans).reduce((acc, key) => {\n    const currentKeys = [...keys, key];\n    const value = trans[key];\n    if (typeof value === \"object\")\n      acc = { ...acc, ...flattenTranslations(value, currentKeys) };\n    else acc[currentKeys.join(\".\")] = value;\n    return acc;\n  }, {} as Record<string, string>);\n\n// merge translation files with the same locale\nconst messageMap = Object.keys(translations).reduce((acc, filepath) => {\n  const locale = pathParse(filepath).name;\n  acc[locale] = {\n    ...acc[locale],\n    ...flattenTranslations(translations[filepath]),\n  };\n  return acc;\n}, {} as Record<string, Record<string, string>>);\n\nexport const locale = navigator.language;\nexport const messages = messageMap[locale.toLowerCase()];\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config): void {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister(): void {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { IntlProvider } from \"react-intl\";\nimport { StylesProvider } from \"@material-ui/core/styles\";\n\nimport { MainScreen } from \"app/main-screen\";\nimport { createStore } from \"app/common/store\";\nimport { messages, locale } from \"translations\";\nimport { importAll } from \"app/common/webpack\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\n// execute any init scripts\nimportAll(require.context(\"./\", true, /\\/on-startup\\.(ts|tsx)$/));\n\n// include all global stylesheets\nimportAll(require.context(\"./\", true, /\\.css$/));\n\n// create store\nconst store = createStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <IntlProvider locale={locale} messages={messages}>\n      <StylesProvider injectFirst>\n        <MainScreen />\n      </StylesProvider>\n    </IntlProvider>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","import { PayloadAction } from \"@reduxjs/toolkit\";\n\nexport const payloadReducer = <S, P>(state: S, action: PayloadAction<P>): P => {\n  return action.payload;\n};\n\nexport const valueReducer = <T>(value: T): (() => T) => () => value;\n","import { createReducer, combineReducers } from \"@reduxjs/toolkit\";\nimport { registerRobot, unregisterRobot } from \"app/robot-widget/store/actions\";\nimport { RobotState } from \"app/robot-widget/store/types\";\nimport { payloadReducer, valueReducer } from \"app/common/store-reducers\";\n\nexport default combineReducers<RobotState>({\n  device: createReducer<RobotState[\"device\"]>(null, (builder) => {\n    builder.addCase(registerRobot, payloadReducer);\n    builder.addCase(unregisterRobot, valueReducer(null));\n  }),\n});\n","import { registerReducer } from \"app/common/store\";\n\nimport { RobotState } from \"app/robot-widget/store/types\";\nimport reducer from \"app/robot-widget/store/reducer\";\n\ndeclare module \"app/common/store\" {\n  interface ApplicationState {\n    robot: RobotState;\n  }\n}\n\nregisterReducer(\"robot\", reducer);\n","import { createAction } from \"@reduxjs/toolkit\";\n\nconst actionPrefix = \"setup\";\n\nexport const registerRobot = createAction<BluetoothDevice>(\n  `${actionPrefix}/register_robot`\n);\n\nexport const unregisterRobot = createAction(`${actionPrefix}/unregister_robot`);\n","import { Reducer } from \"redux\";\nimport { configureStore, EnhancedStore } from \"@reduxjs/toolkit\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { SagaIterator } from \"redux-saga\";\nimport { call, spawn, delay } from \"redux-saga/effects\";\n\n// ApplicationState will be dynamically populated from on-startup.ts scripts\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface ApplicationState {}\nconst reducerRegistry: Record<string, Reducer> = {};\n\nexport function registerReducer<TKey extends keyof ApplicationState>(\n  key: TKey,\n  reducer: Reducer<ApplicationState[TKey]>\n): void {\n  reducerRegistry[key] = reducer;\n}\n\nexport type Saga = (...args: unknown[]) => SagaIterator;\nconst sagaRegistry: Saga[] = [];\n\nexport function registerSagas(sagas: Saga[]): void {\n  sagaRegistry.push(...sagas);\n}\n\nfunction* makeRestartable(saga: Saga) {\n  while (true) {\n    try {\n      yield call(saga);\n      console.error(\"Unexpected root saga termination\", saga);\n    } catch (e) {\n      console.error(\"Saga error, the saga will be restarted\", e);\n    }\n    yield delay(500);\n  }\n}\n\nfunction* rootSaga() {\n  yield sagaRegistry.map((saga) => spawn(makeRestartable, saga));\n}\n\nexport function createStore(): EnhancedStore {\n  const sagaMiddleware = createSagaMiddleware();\n  const store = configureStore({\n    reducer: reducerRegistry,\n    middleware: [sagaMiddleware],\n  });\n  sagaMiddleware.run(rootSaga);\n  return store;\n}\n"],"sourceRoot":""}