{"version":3,"sources":["../src sync ///translations//.*/.json$","../src sync //.css$","../src sync ///init-store/.(ts|tsx)$","app/common/webpack.ts","translations/index.ts","app/common/snackbar/sagas.ts","app/robot/store/selectors.ts","app/robot/widget/index.tsx","app/common/cube/libs/algorithms.ts","app/common/cube/libs/cube.ts","app/common/cube/libs/tools.ts","app/common/cube/libs/coordinates.ts","app/common/cube/scramblers/solve-criteria.ts","app/common/cube/scramblers/full.ts","app/common/cube/solvers/five-side-solver.ts","app/common/cube/libs/move-table.ts","app/common/cube/libs/pruning-table.ts","app/common/cube/libs/search.ts","app/common/cube/libs/scramble-pieces.ts","app/common/cube/solvers/cross-solver.ts","app/common/cube/libs/cube-preview.ts","app/cube-preview/index.tsx","app/common/styled-components.ts","app/cfop-scramble/index.tsx","app/common/cube/scramblers/cfop.ts","app/random-scramble/index.tsx","app/manual-scramble/index.tsx","app/main-screen/index.tsx","serviceWorker.ts","index.tsx","app/common/store-reducers.ts","app/robot/store/reducer.ts","app/common/translation-helpers.tsx","app/robot/store/sagas.ts","app/robot/store/init-store.ts","app/common/array-reducers.ts","app/robot/bluetooth-utils.ts","app/robot/store/actions.ts","app/common/snackbar/actions.ts","app/common/store.ts","app/main-screen/actions.ts"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","importAll","requireContext","importCache","forEach","moduleKey","translations","require","flattenTranslations","trans","reduce","acc","key","currentKeys","value","join","messageMap","filepath","locale","pathParse","name","setLanguageDefault","languageCode","preferredLocale","languageMessages","filter","toLocaleLowerCase","startsWith","length","includes","navigator","language","messages","toLowerCase","processSnackbarActions","watchSnackbarActions","snackbar","action","isEnqueueAction","current","enqueueSnackbar","payload","message","options","closeSnackbar","type","takeEvery","getRobotDevice","state","robot","device","getRobotServer","robotDevice","gatt","connected","RobotWidget","dispatch","useDispatch","useSelector","handleBluetoothClick","useCallback","a","bluetooth","requestDevice","filters","namePrefix","optionalServices","PRIMARY_SERVICE","DEVICE_INFO_SERVICE","bluetoothDeviceSelected","DOMException","console","error","IconButton","color","onClick","BluetoothConnected","Bluetooth","powers","2","validateAlgorithm","algorithm","test","wideMoves","f","r","u","b","l","d","M","S","E","rotations","x","y","z","normalize","moves","move","axis","charAt","pow","concat","m","output","totalRotation","i","unshift","j","outputMove","indexOf","parseAlgorithm","returnTotalRotation","result","match","moveNum","push","invertAlgorithm","reverse","inv","formatAlgorithm","sequence","Math","floor","trim","Edges","Corners","identity","ep","eo","cp","co","allMoves","fiveSideMoves","moveHelper","cube","moveIndex","fn","doEdgeMove","newCube","fromIndex","toIndex","Array","doCornerMove","doMove","doAlgorithm","factorials","factorial","n","binomials","choose","k","s","nextRow","prev","getRandomInt","min","max","random","rotateLeft","pieces","left","right","original","rotateRight","getIndexFromOrientation","flipCount","sum","getOrientationFromIndex","index","numPieces","numFlips","orientation","parity","ori","getParity","getIndexFromPermutation","affected","reversed","offset","position","edges","permutation","getPermutationFromIndex","size","base","binomial","arePiecesPermutated","cubeState","corners","edgeIdx","cornerIdx","arePiecesOriented","arePiecesPermutatedAndOriented","isCrossSolved","isTopCrossSolved","isF2LSolved","isFirstLookOLLSolved","isOLLSolved","isFirstLookPLLSolved","rotation","isCubeSolved","cubeFaces","moveModifiers","generateScramble","total","isSolved","scramble","URFToDLF","slice","merge","previousCubeStates","Set","currentState","newState","stateHashCode","getStateHashCode","has","add","cpIndex","coIndex","epIndex","eoIndex","MoveTable","settings","defaultIndex","solvedIndexes","table","this","cubieMove","getVector","getIndex","vector","createMoveHandler","createMoveTable","inverse","createEdgePermutationTable","getCorrectOrientations","numStates","indexes","target","every","piece","createEdgeOrientationTable","createCornerOrientationTable","PruningTable","moveTables","computePruningTable","obj","depth","done","permutations","arg","helper","arr","copy","cartesian","data","setPruningValue","find","check","getPruningValue","currentIndex","Search","createTables","initialized","pruningTables","moveTableNames","moveTableIndexes","sort","mappedTables","pruningTable","solution","lastMove","minimumDistance","power","distance","handleSolution","updatedIndexes","search","initialize","maxDepth","format","solutionRotation","formatted","phaseTwoMoves","phaseTwoSearch","getMergeCoord","fiveSideSearch","args","phaseTwoSolution","solve","fiveSideSolver","isArray","solveCube","getEdgeOrientation","enabled","orientLastLayer","fill","getCornerOrientation","getPermutationFromEnabled","getScrambleForPieces","scrambleEdges","scrambleCorners","isScrambleSolved","scrambleState","CrossSearch","crossSolver","centerFacelets","cornerFacelets","edgeFacelets","mod","getFaceletIndex","facelet","Number","getCornerFacelet","cornerIndex","orientationIndex","getEdgeFacelet","edgeIndex","CubePreview","props","cubeIndexes","scrambleCode","colorMap","defaultColorMap","svgString","facelets","centerIndex","corner","faceletIndex","faceletValue","edge","getFaceletArray","faceKey","replace","template","className","dangerouslySetInnerHTML","__html","U","R","F","D","L","B","G","ButtonRow","styled","div","attrs","ContentContainer","invertedColorMap","crossFilter","f2lFilter","ollFilter","cross","f2l","firstLookOll","secondLookOll","oll","ConnectedCFOPScramble","connect","robotServer","useState","cfopPhase","setCFOPPhase","setScramble","FormControl","component","Select","onChange","phase","MenuItem","Button","variant","solveCode","disabled","Boolean","executeScramble","ConnectedRandomScramble","InputLabel","htmlFor","OutlinedInput","multiline","fullWidth","ConnectedManualScramble","hasError","setHasError","noValidate","autoComplete","TextField","label","rowsMax","InputLabelProps","shrink","helperText","onBlur","event","manualScrambleValue","fiveSideSolve","fiveSideScramble","Screen","MenuItemContent","CompactMenuItemContent","IconContainer","IconWrapper","MainScreen","React","navigationValue","setNavigation","useEffect","appInitialized","AppBar","Toolbar","Typography","Paper","List","ListItem","button","selected","ListItemIcon","Shuffle","ListItemText","primary","Layers","Edit","BottomNavigation","showLabels","_","newValue","BottomNavigationAction","icon","aria-label","isLocalhost","window","location","hostname","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","onUpdate","onSuccess","catch","createRef","store","createStore","runSaga","onClickDismiss","ReactDOM","render","StylesProvider","injectFirst","ref","maxSnack","Close","fontSize","document","getElementById","renderApp","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","ready","unregister","reload","checkValidServiceWorker","payloadReducer","combineReducers","createReducer","builder","addCase","registerRobot","unregisterRobot","translate","values","bluetoothDeviceSelectedHandler","watchForBluetoothDeviceSelected","listenForDisconnect","watchForRegisterRobot","appInitializedHandler","watchForAppInitialized","call","connectToGANRobot","put","deviceName","GANDeviceTypeError","modelNumber","disconnectChannel","eventChannel","emitter","removeEventListener","race","disconnectEvent","take","registerAction","unregisterAction","close","connectToKnownGANRobots","registerReducer","reducer","registerSagas","sagas","chunkReducer","chunckSize","currentChunk","accumulator","currentValue","moveMap","R2","F2","D2","L2","B2","getGANEncoding","split","chunkedArr","Uint8Array","scrambleChunk","executeChunk","chunk","Promise","getPrimaryService","primaryService","getCharacteristic","scrambleExecuteCharacteristic","writeValue","statusCharacteristic","waitUntilSequenceFinished","hasHadNonZeroValue","setTimeout","readValue","robotStatus","getUint8","server","deviceInfoService","modelCharacteristic","modelNumberValue","TextDecoder","decode","toUpperCase","experimentalBluetooth","getDevices","devices","abortController","AbortController","abort","once","watchAdvertisements","signal","actionPrefix","createAction","prefix","makeRestartable","rootSaga","reducerRegistry","sagaRegistry","saga","delay","all","spawn","sagaMiddleware","createSagaMiddleware","configureStore","middleware","run"],"mappings":"yGAAA,IAAIA,EAAM,CACT,4BAA6B,KAI9B,SAASC,EAAeC,GACvB,IAAIC,EAAKC,EAAsBF,GAC/B,OAAOG,EAAoBF,GAE5B,SAASC,EAAsBF,GAC9B,IAAIG,EAAoBC,EAAEN,EAAKE,GAAM,CACpC,IAAIK,EAAI,IAAIC,MAAM,uBAAyBN,EAAM,KAEjD,MADAK,EAAEE,KAAO,mBACHF,EAEP,OAAOP,EAAIE,GAEZD,EAAeS,KAAO,WACrB,OAAOC,OAAOD,KAAKV,IAEpBC,EAAeW,QAAUR,EACzBS,EAAOC,QAAUb,EACjBA,EAAeE,GAAK,K,+VCtBpB,IAAIH,EAAM,CACT,2BAA4B,IAC5B,iBAAkB,KAInB,SAASC,EAAeC,GACvB,IAAIC,EAAKC,EAAsBF,GAC/B,OAAOG,EAAoBF,GAE5B,SAASC,EAAsBF,GAC9B,IAAIG,EAAoBC,EAAEN,EAAKE,GAAM,CACpC,IAAIK,EAAI,IAAIC,MAAM,uBAAyBN,EAAM,KAEjD,MADAK,EAAEE,KAAO,mBACHF,EAEP,OAAOP,EAAIE,GAEZD,EAAeS,KAAO,WACrB,OAAOC,OAAOD,KAAKV,IAEpBC,EAAeW,QAAUR,EACzBS,EAAOC,QAAUb,EACjBA,EAAeE,GAAK,K,gECvBpB,IAAIH,EAAM,CACT,kCAAmC,KAIpC,SAASC,EAAeC,GACvB,IAAIC,EAAKC,EAAsBF,GAC/B,OAAOG,EAAoBF,GAE5B,SAASC,EAAsBF,GAC9B,IAAIG,EAAoBC,EAAEN,EAAKE,GAAM,CACpC,IAAIK,EAAI,IAAIC,MAAM,uBAAyBN,EAAM,KAEjD,MADAK,EAAEE,KAAO,mBACHF,EAEP,OAAOP,EAAIE,GAEZD,EAAeS,KAAO,WACrB,OAAOC,OAAOD,KAAKV,IAEpBC,EAAeW,QAAUR,EACzBS,EAAOC,QAAUb,EACjBA,EAAeE,GAAK,K,2KCtBb,SAASY,EACdC,GAEA,IAAMC,EAAiC,GAOvC,OANAD,EACGN,OACAQ,SACC,SAACC,GAAD,OACGF,EAAYE,GAAaH,EAAeG,MAExCF,ECFT,IAAMG,EAAeL,EACnBM,QAGIC,EAAsB,SAAtBA,EAAuBC,GAAD,IAAsBb,EAAtB,uDAAuC,GAAvC,OAC1BC,OAAOD,KAAKa,GAAOC,QAAO,SAACC,EAAKC,GAC9B,IAAMC,EAAW,sBAAOjB,GAAP,CAAagB,IACxBE,EAAQL,EAAMG,GAIpB,MAHqB,kBAAVE,EACTH,EAAG,2BAAQA,GAAQH,EAAoBM,EAAOD,IAC3CF,EAAIE,EAAYE,KAAK,MAAQD,EAC3BH,IACN,KAGCK,EAAanB,OAAOD,KAAKU,GAAcI,QAAO,SAACC,EAAKM,GACxD,IAAMC,EAASC,IAAUF,GAAUG,KAKnC,OAJAT,EAAIO,GAAJ,2BACKP,EAAIO,IACJV,EAAoBF,EAAaW,KAE/BN,IACN,IAEGU,EAAqB,SAACC,EAAsBC,GAChD,IAAMC,EAAmB3B,OAAOD,KAAKoB,GAAYS,QAAO,SAACP,GAAD,OACtDA,EAAOQ,oBAAoBC,WAAWL,MAEpCE,EAAiBI,OAAS,IAAMZ,EAAWM,KACzCE,EAAiBK,SAASN,GAC5BP,EAAWM,GAAgBN,EAAWO,GAEtCP,EAAWM,GAAgBN,EAAWQ,EAAiB,MAK7DH,EAAmB,KAAM,SACzBA,EAAmB,KAAM,SAEzB,IAAIH,EAASY,UAAUC,SACnBC,EAAWhB,EAAWE,EAAOe,eAC5BD,IAEHA,EAAWhB,GADXE,EAAS,SACoBe,gB,gDC5CrBC,G,WAoBOC,GApBjB,SAAUD,EACRE,EACAC,GAFF,yEAIMC,EAAgBD,GAClB,UAAAD,EAASG,eAAT,SAAkBC,gBAChBH,EAAOI,QAAQC,QACfL,EAAOI,QAAQE,SAGjB,UAAAP,EAASG,eAAT,SAAkBK,cAAcP,EAAOI,QAAQ7B,KAVnD,uCAcA,SAAS0B,EACPD,GAEA,OAAOA,EAAOQ,OAASL,IAAgBK,KAGlC,SAAUV,EACfC,GADK,iEAGE,uBAAOU,YACZ,CAACN,IAAiBI,KAClBV,EACAE,GAHK,QAHF,6E,mLCzBMW,GAAiB,SAACC,GAAD,OAC5BA,EAAMC,MAAMC,QAEDC,GAAiB,SAC5BH,GACsC,IAAD,EAC/BI,EAAcL,GAAeC,GACnC,OAAOI,IAAW,UAAIA,EAAYC,YAAhB,aAAI,EAAkBC,WAAYF,EAAYC,KAAO,M,SCElE,SAASE,KACd,IAAMC,EAAWC,cACXL,EAAcM,YAAYX,IAE1BY,EAAuBC,sBAAW,sBAAC,4BAAAC,EAAA,+EAEhB/B,UAAUgC,UAAUC,cAAc,CACrDC,QAAS,CAAC,CAAEC,WAAY,SACxBC,iBAAkB,CAACC,KAAiBC,QAJD,OAE/BlB,EAF+B,OAMrCM,EAASa,YAAwBnB,IANI,gDAS/B,gBAAaoB,cAAeC,QAAQC,MAAR,MATG,yDAWtC,IACH,OACE,cAACC,EAAA,EAAD,CAAYC,MAAM,UAAUC,QAAShB,EAArC,SACGP,EAAc,cAACwB,EAAA,EAAD,IAAyB,cAACC,EAAA,EAAD,M,4CC7BxCC,GAAiC,CACrC,GAAI,EACJC,EAAG,EACH,IAAK,GAMMC,GAAoB,SAACC,GAAD,MAC/B,oCAAoCC,KAAKD,IAGrCE,GAAsC,CAC1CC,EAAG,CAAC,IAAK,KACTC,EAAG,CAAC,IAAK,KACTC,EAAG,CAAC,IAAK,KACTC,EAAG,CAAC,KAAM,KACVC,EAAG,CAAC,KAAM,KACVC,EAAG,CAAC,KAAM,KACVC,EAAG,CAAC,KAAM,IAAK,MACfC,EAAG,CAAC,IAAK,KAAM,KACfC,EAAG,CAAC,KAAM,IAAK,OAIXC,GAAoC,CACxCC,EAAG,SACHC,EAAG,SACHC,EAAG,UAOCC,GAAY,SAACC,GAEjBA,EAAQA,EAAMxF,QAAO,SAACC,EAAewF,GACnC,IAAMC,EAA+BD,EAAKE,OAAO,GAC3CC,EAAMH,EAAKE,OAAO,GAExB,OAAIlB,GAAUiB,GACLzF,EAAI4F,OAAOpB,GAAUiB,GAAMlH,KAAI,SAACsH,GAAD,OAAOA,EAAIF,MAG5C3F,EAAI4F,OAAOJ,KACjB,IASH,IAPA,IAAIM,EAAmB,GAIjBC,EAA0B,GAjBK,WAoB5BC,GACP,IAAMP,EAAOF,EAAMS,GAAGN,OAAO,GACvBC,EAAMxB,GAAOoB,EAAMS,GAAGN,OAAO,IAEnC,GAAI,MAAMxE,SAASuE,GAAO,CACxBM,EAAcE,QAAQV,EAAMS,IAE5B,IAAK,IAAIE,EAAI,EAAGA,GAAKP,EAAKO,GAAK,EAC7BJ,EAASA,EAAOvH,KACd,SAAC4H,GAAD,OACEjB,GAAUO,GAAM,SAASW,QAAQD,EAAW,KAC5CA,EAAWT,OAAO,WAIxBI,EAAOG,QAAQV,EAAMS,KAfhBA,EAAIT,EAAMtE,OAAS,EAAG+E,GAAK,EAAGA,GAAK,EAAI,EAAvCA,GAmBT,MAAO,CAACF,EAAQC,IAWX,SAASM,GACd/B,GAEkC,IADlCgC,EACiC,wDACjC,IAAKjC,GAAkBC,GACrB,MAAM,IAAIvF,MAAM,kDAGlB,IAAMwH,EAAmB,GALQ,EAOFjB,GAC7BhB,EAAUkC,MAAM,+BAAiC,IARlB,mBAO1BjB,EAP0B,KAOnBQ,EAPmB,KAiBjC,OANAR,EAAM9F,SAAQ,SAAC+F,GACb,IAAMiB,EAAU,SAASL,QAAQZ,EAAKE,OAAO,IACvCC,EAAMxB,GAAOqB,EAAKE,OAAO,IAC/Ba,EAAOG,KAAe,EAAVD,EAAcd,MAGxBW,EACK,CAACC,EAAQR,GAGXQ,EAMF,IAAMI,GAAkB,SAACrC,GAC9B,IAAKD,GAAkBC,GACrB,MAAM,IAAIvF,MAAM,kDAqBlB,OAlBcuF,EAAUkC,MAAM,+BAAiC,IAExCI,UAAUrI,KAAI,SAACiH,GACpC,IAAMC,EAAOD,EAAKE,OAAO,GACnBC,EAAMxB,GAAOqB,EAAKE,OAAO,IACzBmB,EAAMlB,EAAWA,EAAM,EAAX,EAAgB,EAElC,OAAY,IAARkB,EACI,GAAN,OAAUpB,EAAV,KAGU,IAARoB,EACI,GAAN,OAAUpB,EAAV,KAGKA,KAGOrF,KAAK,MAMV0G,GAAkB,SAACvB,GAC9B,IAAIwB,EAAW,GAoBf,OAlBAxB,EAAM9F,SAAQ,SAAC+F,GAIb,OAHAuB,GAAY,IACZA,GAAY,SAASrB,OAAOsB,KAAKC,MAAMzB,EAAO,IAEtCA,EAAO,GACb,KAAK,EACHuB,GAAY,IACZ,MAEF,KAAK,EACHA,GAAY,QAQXA,EAASG,QC5JLC,GACP,EADOA,GAEP,EAFOA,GAGP,EAHOA,GAIP,EAJOA,GAKP,EALOA,GAMP,EANOA,GAOP,EAPOA,GAQP,EAROA,GASP,EATOA,GAUP,EAVOA,GAWP,GAXOA,GAYP,GAGOC,GACN,EADMA,GAEN,EAFMA,GAGN,EAHMA,GAIN,EAJMA,GAKN,EALMA,GAMN,EANMA,GAON,EAPMA,GAQN,EAcMC,GAAwB,CACnCC,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,IACvCC,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtCC,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC1BC,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAGflC,GAAQ,CAEnB,CACEiC,GAAI,CApB2CJ,MAoBhC,EAAG,EApB6BA,MAoBhB,EAAG,GAClCK,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC1BH,GAAI,CAAC,EAvBkDH,GAuB3C,EAAG,EAAG,EAvBqCA,GAuB9B,EAAG,EAvB2BA,MAuBhB,GAAI,IAC3CI,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAIxC,CACEC,GAAI,CA5B2CJ,GA4BrC,EAAG,EA5BkCA,MA4BrB,EAAG,EA5BkBA,IA6B/CK,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC1BH,GAAI,CA/BmDH,GA+B9C,EAAG,EAAG,EA/BwCA,GA+BjC,EAAG,EAAG,EA/B2BA,GA+BpB,EAAG,GA/BiBA,IAgCvDI,GAAIF,GAASE,IAIf,CACEC,GAAI,CApC2CJ,YAoCtB,EAAG,EAAG,EAAG,GAClCK,GAAIJ,GAASI,GACbH,GAAI,CAvCmDH,YAuClC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,IAC3CI,GAAIF,GAASE,IAIf,CACEC,GAAI,CAAC,EAAG,EA5CuCJ,MA4C1B,EAAG,EA5CuBA,OA6C/CK,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC1BH,GAAI,CAAC,EAAG,EAAG,EA/C4CH,GA+CrC,EAAG,EAAG,EA/C+BA,GA+CxB,EAAG,EA/CqBA,OAgDvDI,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAIxC,CACEC,GAAI,CAAC,EApD0CJ,MAoD7B,EAAG,EApD0BA,MAoDb,GAClCK,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC1BH,GAAI,CAAC,EAAG,EAvD+CH,GAuDxC,EAAG,EAAG,EAvDkCA,GAuD3B,EAAG,EAvDwBA,MAuDb,IAC1CI,GAAIF,GAASE,IAIf,CACEC,GAAI,CAAC,EAAG,EAAG,EAAG,EA5DiCJ,aA6D/CK,GAAIJ,GAASI,GACbH,GAAI,CAAC,EAAG,EAAG,EAAG,EA/DyCH,YA+DtB,EAAG,EAAG,GAAI,IAC3CI,GAAIF,GAASE,KAIJG,GAAW,CACtB,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IAGWC,GAAgB,CAC3B,EACA,EACA,EACA,EACA,EACA,EACA,EACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IAGWC,GAAa,SACxBC,EACAC,EACAC,GAIA,IAFA,IAAMvC,EAAOD,GAAMyB,KAAKC,MAAMa,EAAY,IACpCnC,EAAOmC,EAAY,EAAK,EACrB9B,EAAI,EAAGA,EAAIL,EAAKK,IACvB6B,EAAOE,EAAGF,EAAMrC,GAElB,OAAOqC,GAGIG,GAAa,SACxBH,EACArC,GAFwB,OAIxBA,EAAK8B,GAAGvH,QACN,SAACkI,EAASC,EAAWC,GAGnB,OAFAF,EAAQX,GAAGa,GAAWN,EAAKP,GAAGY,GAC9BD,EAAQV,GAAGY,IAAYN,EAAKN,GAAGW,GAAa1C,EAAK+B,GAAGY,IAAY,EACzDF,IAET,CACEX,GAAI,IAAIc,MAAM,IACdb,GAAI,IAAIa,MAAM,OAIPC,GAAe,SAC1BR,EACArC,GAF0B,OAI1BA,EAAKgC,GAAGzH,QACN,SAACkI,EAASC,EAAWC,GAGnB,OAFAF,EAAQT,GAAGW,GAAWN,EAAKL,GAAGU,GAC9BD,EAAQR,GAAGU,IAAYN,EAAKJ,GAAGS,GAAa1C,EAAKiC,GAAGU,IAAY,EACzDF,IAET,CACET,GAAI,IAAIY,MAAM,GACdX,GAAI,IAAIW,MAAM,MAIPE,GAAS,SAACT,EAAmBC,GACxC,OAAO,2BACFF,GAAWC,EAAMC,EAAWO,KAC5BT,GAAWC,EAAMC,EAAWE,MAItBO,GAAc,SAACjE,GAAD,IAAoBuD,EAApB,uDAA2BR,GAA3B,OACxB/C,EAAmB+B,GAAe/B,GAAWvE,OAAOuI,GAAQT,GAAhDA,GCrMTW,GAAuB,GAMhBC,GAAY,SAAZA,EAAaC,GACxB,OAAU,IAANA,GAAiB,IAANA,EACN,GAGLF,GAAWE,GAAK,IAIpBF,GAAWE,GAAKD,EAAUC,EAAI,GAAKA,GAH1BF,GAAWE,KAQhBC,GAAwB,GAKjBC,GAAS,SAACF,EAAWG,GAChC,GAAIA,EAAIH,EACN,OAAO,EAGT,KAAOA,GAAKC,GAAU1H,QAAQ,CAC5B,IAAM6H,EAAIH,GAAU1H,OACd8H,EAAU,GAEhBA,EAAQ,GAAK,EAEb,IAAK,IAAI/C,EAAI,EAAGgD,EAAOF,EAAI,EAAG9C,EAAI8C,EAAG9C,GAAK,EACxC+C,EAAQ/C,GAAK2C,GAAUK,GAAMhD,EAAI,GAAK2C,GAAUK,GAAMhD,GAGxD+C,EAAQD,GAAK,EAEbH,GAAUjC,KAAKqC,GAGjB,OAAOJ,GAAUD,GAAGG,IA8BTI,GAAe,SAACC,EAAaC,GAAd,OAC1BnC,KAAKC,MAAMD,KAAKoC,UAAYD,EAAMD,EAAM,IAAMA,GCtE1CG,GAAa,SAACC,EAAkBC,EAAcC,GAGlD,IAFA,IAAMC,EAAWH,EAAOC,GAEfvD,EAAIuD,EAAMvD,EAAIwD,EAAOxD,GAAK,EACjCsD,EAAOtD,GAAKsD,EAAOtD,EAAI,GAGzBsD,EAAOE,GAASC,GAOZC,GAAc,SAACJ,EAAkBC,EAAcC,GAGnD,IAFA,IAAMC,EAAWH,EAAOE,GAEfxD,EAAIwD,EAAOxD,EAAIuD,EAAMvD,GAAK,EACjCsD,EAAOtD,GAAKsD,EAAOtD,EAAI,GAGzBsD,EAAOC,GAAQE,GAUJE,GAA0B,SACrCL,EACAM,GAQA,IANA,IAAIC,EAAM,EAMD7D,EAAI,EAAGA,EAAIsD,EAAOrI,OAAS,EAAG+E,GAAK,EAC1C6D,EAAMD,EAAYC,EAAMP,EAAOtD,GAGjC,OAAO6D,GAQIC,GAA0B,SACrCC,EACAC,EACAC,GAMA,IAJA,IAAMC,EAAc,GAEhBC,EAAS,EAEJnE,EAAIgE,EAAY,EAAGhE,GAAK,EAAGA,GAAK,EAAG,CAC1C,IAAMoE,EAAML,EAAQE,EACpBF,EAAQ/C,KAAKC,MAAM8C,EAAQE,GAC3BC,EAAYlE,GAAKoE,EACjBD,GAAUC,EAMZ,OAFAF,EAAYF,EAAY,IAAMC,EAAYE,EAASF,GAAaA,EAEzDC,GAaIG,GAAY,SAACf,GAGxB,IAFA,IAAIO,EAAM,EAED7D,EAAIsD,EAAOrI,OAAS,EAAG+E,EAAI,EAAGA,GAAK,EAC1C,IAAK,IAAIE,EAAIF,EAAI,EAAGE,GAAK,EAAGA,GAAK,EAC3BoD,EAAOpD,GAAKoD,EAAOtD,KACrB6D,GAAO,GAKb,OAAOA,EAAM,GAYFS,GAA0B,SACrChB,EACAiB,GAEY,IADZC,EACW,wDACPC,EAASnB,EAAOrI,OAAS,EACzByJ,EAAW,EACX7B,EAAI,EAIF8B,EAAQ,GAKd,GAAIH,EACF,IAAK,IAAI9B,EAAIY,EAAOrI,OAAS,EAAGyH,GAAK,EAAGA,GAAK,EACvC6B,EAASnE,QAAQkD,EAAOZ,KAAO,IACjC+B,EAASzD,KAAKkC,IAAIuB,EAAQnB,EAAOZ,IACjCgC,GAAY9B,GAAOU,EAAOrI,OAAS,EAAIyH,EAAGG,GAC1C8B,EAAM1E,QAAQqD,EAAOZ,IACrBG,GAAK,QAIT,IAAK,IAAIH,EAAI,EAAGA,EAAIY,EAAOrI,OAAQyH,GAAK,EAClC6B,EAASnE,QAAQkD,EAAOZ,KAAO,IACjC+B,EAASzD,KAAKkC,IAAIuB,EAAQnB,EAAOZ,IACjCgC,GAAY9B,GAAOF,EAAGG,GACtB8B,EAAMjE,KAAK4C,EAAOZ,IAClBG,GAAK,GASX,IAJA,IAAI+B,EAAc,EAIT5E,EAAI2E,EAAM1J,OAAS,EAAG+E,EAAI,EAAGA,GAAK,EAAG,CAG5C,IAFA,IAAI8C,EAAI,EAED6B,EAAM3E,KAAOuE,EAASvE,IAC3BqD,GAAWsB,EAAO,EAAG3E,GACrB8C,GAAK,EAGP8B,GAAe5E,EAAI,GAAK4E,EAAc9B,EAKxC,OAAOL,GAAU8B,EAAStJ,QAAUyJ,EAAWE,GAQpCC,GAA0B,SACrCd,EACAQ,EACAO,GAUA,IARc,IADdN,EACa,wDACPO,EAAOtC,GAAU8B,EAAStJ,QAE5ByJ,EAAW1D,KAAKC,MAAM8C,EAAQgB,GAC9BH,EAAcb,EAAQgB,EAEpBzB,EAAS,GAENtD,EAAI,EAAGA,EAAI8E,EAAM9E,GAAK,EAC7BsD,EAAO5C,MAAM,GAGf,IAAK,IAAIV,EAAI,EAAGA,EAAIuE,EAAStJ,OAAQ+E,GAAK,EAAG,CAC3C,IAAI8C,EAAI8B,GAAe5E,EAAI,GAG3B,IAFA4E,EAAc5D,KAAKC,MAAM2D,GAAe5E,EAAI,IAErC8C,EAAI,GACTY,GAAYa,EAAU,EAAGvE,GACzB8C,GAAK,EAIT,IAAID,EAAI0B,EAAStJ,OAAS,EAE1B,GAAIuJ,EACF,IAAK,IAAI9B,EAAI,EAAGA,EAAIoC,EAAMpC,GAAK,EAAG,CAChC,IAAMsC,EAAWpC,GAAOkC,EAAO,EAAIpC,EAAGG,EAAI,GAEtC6B,EAAWM,GAAY,IACzB1B,EAAOZ,GAAK6B,EAASA,EAAStJ,OAAS,EAAI4H,GAC3C6B,GAAYM,EACZnC,GAAK,QAIT,IAAK,IAAIH,EAAIoC,EAAO,EAAGpC,GAAK,EAAGA,GAAK,EAAG,CACrC,IAAMsC,EAAWpC,GAAOF,EAAGG,EAAI,GAE3B6B,EAAWM,GAAY,IACzB1B,EAAOZ,GAAK6B,EAAS1B,GACrB6B,GAAYM,EACZnC,GAAK,GAKX,OAAOS,G,SC3NH2B,GAAsB,SAC1BC,EACAP,EACAQ,GACI,IAAD,iBACmBR,GADnB,IACH,gCAAWS,EAAX,QACE,GAAIF,EAAU5D,GAAG8D,KAAaA,EAAS,OAAO,GAF7C,mDAGqBD,GAHrB,IAGH,gCAAWE,EAAX,QACE,GAAIH,EAAU1D,GAAG6D,KAAeA,EAAW,OAAO,GAJjD,8BAKH,OAAO,GAGHC,GAAoB,SACxBJ,EACAP,EACAQ,GACI,IAAD,iBACmBR,GADnB,IACH,gCAAWS,EAAX,QAA6B,GAA8B,IAA1BF,EAAU3D,GAAG6D,GAAgB,OAAO,GADlE,mDAEqBD,GAFrB,IAEH,gCAAWE,EAAX,QACE,GAAgC,IAA5BH,EAAUzD,GAAG4D,GAAkB,OAAO,GAHzC,8BAIH,OAAO,GAGHE,GAAiC,SACrCL,EACAP,EACAQ,GAHqC,OAKrCG,GAAkBJ,EAAWP,EAAOQ,IACpCF,GAAoBC,EAAWP,EAAOQ,IAE3BK,GAAgB,SAACN,GAAD,OAC3BK,GACEL,EACA,CAAC/D,GAAUA,GAAUA,GAAUA,IAC/B,KAGSsE,GAAmB,SAACP,GAAD,OAC9BK,GACEL,EACA,CAAC/D,GAAUA,GAAUA,GAAUA,IAC/B,KAGSuE,GAAc,SAACR,GAAD,OACzBM,GAAcN,IACdK,GACEL,EACA,CAAC/D,GAAUA,GAAUA,GAAUA,IAC/B,CAACC,GAAaA,GAAaA,GAAaA,MAG/BuE,GAAuB,SAACT,GAAD,OAClCQ,GAAYR,IACZI,GAAkBJ,EAAW,CAAC/D,GAAUA,GAAUA,GAAUA,IAAW,KAE5DyE,GAAc,SAACV,GAAD,OACzBQ,GAAYR,IACZI,GACEJ,EACA,CAAC/D,GAAUA,GAAUA,GAAUA,IAC/B,CAACC,GAAaA,GAAaA,GAAaA,MAG/ByE,GAAuB,SAACX,GACnC,IAAIY,EAAW,EACf,EAAG,CACD,GACEF,GAAYV,IACZD,GACEC,EACA,GACA,CAAC9D,GAAaA,GAAaA,GAAaA,KAG1C,OAAO,EACT8D,EAAY3C,GAAY,IAAK2C,GAC7BY,GAAY,SACLA,EAAW,KACpB,OAAO,GAGIC,GAAe,SAACb,GAAD,OAC1BQ,GAAYR,IACZK,GACEL,EACA,CAAC/D,GAAUA,GAAUA,GAAUA,IAC/B,CAACC,GAAaA,GAAaA,GAAaA,MCxFtC4E,GAAY,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,KACtCC,GAAgB,CAAC,GAAI,IAAK,KAEzB,SAASC,KAGL,IAFTC,EAEQ,uDAFA,GACRC,EACQ,uDADoCX,GAE5C,OAAOY,GAASF,EAAOC,GAAUhM,KAAK,KAGxC,ICQI+J,GACAmC,GACAC,GACAC,GDXEH,GAAW,SAAXA,EACJF,EACAC,GAMA,IAJA,IAAMK,EAAqB,IAAIC,IAC3BC,EAAetF,GACb9B,EAAQ,GAEPA,EAAMtE,OAASkL,GAAO,CAE3B,IAAM3G,EACJwG,GAAUhF,KAAKC,MAAsB,EAAhBD,KAAKoC,WAC1B6C,GAAcjF,KAAKC,MAAsB,EAAhBD,KAAKoC,WAChC,GAAuB,MAAnB5D,EAAKE,OAAO,OAKdH,EAAMtE,OAAS,GACfuE,EAAKE,OAAO,KAAOH,EAAMA,EAAMtE,OAAS,GAAGyE,OAAO,OAMlDH,EAAMtE,OAAS,GACfuE,EAAKE,OAAO,KAAOH,EAAMA,EAAMtE,OAAS,GAAGyE,OAAO,IAClDH,EAAMA,EAAMtE,OAAS,GAAGyE,OAAO,KAC7BsG,IAAWA,GAAU5F,QAAQZ,EAAKE,OAAO,IAAM,GAAK,KAJxD,CAUA,IAAMkH,EAAWrE,GAAY/C,EAAMmH,GAC7BE,EAAgBC,GAAiBF,GAClCH,EAAmBM,IAAIF,KAC1BtH,EAAMmB,KAAKlB,GACXiH,EAAmBO,IAAIH,GACvBF,EAAeC,IAGnB,OAAOR,EAASO,GAAgBN,EAASF,EAAOC,GAAY7G,GAGxDuH,GAAmB,SAAC5B,GACxB,IAAM+B,EAAU3C,GAAwBY,EAAU1D,GAAIH,GAASG,IACzD0F,EAAUvD,GAAwBuB,EAAUzD,GAAI,GAChD0F,EAAU7C,GAAwBY,EAAU5D,GAAID,GAASC,IACzD8F,EAAUzD,GAAwBuB,EAAUzD,GAAI,GACtD,MAAM,GAAN,OAAUwF,EAAV,YAAqBC,EAArB,YAAgCC,EAAhC,YAA2CC,I,oCEVhCC,GAAb,WAOE,WAAYC,GAA8B,IAAD,iCANzC7M,UAMyC,OALzCqK,UAKyC,OAJzCyC,kBAIyC,OAHzCC,mBAGyC,OAFzCC,WAEyC,EAGvCC,KAAKjN,KAAO6M,EAAS7M,KAIrBiN,KAAK5C,KAAOwC,EAASxC,KAErB4C,KAAKH,aAAeD,EAASC,cAAgB,EAC7CG,KAAKF,cAAgBF,EAASE,eAAiB,CAACE,KAAKH,cAKrD,IAAMjF,EAASgF,EAAShF,OAKxB,GAJIA,IACFoF,KAAKpF,OAAS,SAACyB,EAAOvE,GAAR,OAAiB8C,EAAO,EAAKmF,MAAO1D,EAAOvE,KAGvD,UAAW8H,EACbI,KAAKD,MAAQH,EAASG,UADxB,CAOA,IAAME,EAvEgB,SACxBC,EACAD,EACAE,GAHwB,OAIrB,SAAC9D,EAAevE,GACnB,IAAIsI,EAASF,EAAU7D,GAEvB,OADA+D,EAASH,EAAUG,EAAQtI,GACpBqI,EAASC,IAgEIC,CAChBT,EAASM,UACTN,EAASK,UACTL,EAASO,UAGXH,KAAKD,MAAQC,KAAKM,gBAAgBV,EAASxC,KAAM6C,EAAWL,EAAS/H,QAxCzE,oDA2CSwE,EAAevE,GACpB,OAAOkI,KAAKD,MAAM1D,GAAOvE,KA5C7B,sCAgDIsF,EACA6C,GAKA,IAHa,IADbpI,EACY,uDADJmC,GAEF+F,EAAoB,GAEjBzH,EAAI,EAAGA,EAAI8E,EAAM9E,GAAK,EAC7ByH,EAAM/G,KAAK,IAKb,IAAK,IAAIV,EAAI,EAAGA,EAAI8E,EAAM9E,GAAK,EAC7B,IAAK,IAAIE,EAAI,EAAGA,EAAIX,EAAMtE,OAAQiF,GAAK,EAAG,CACxC,IAAMV,EAAOD,EAAMW,GAEnB,IAAKuH,EAAMzH,GAAGR,GAAO,CAGnB,IAAMe,EAASoH,EAAU3H,EAAGR,GACtByI,EAAUzI,EAAYA,EAAO,EAAZ,EAAiB,EACxCiI,EAAMzH,GAAGR,GAAQe,EACjBkH,EAAMlH,GAAQ0H,GAAWjI,GAK/B,OAAOyH,MA3EX,KAiHaS,GAA6B,SACxCZ,GADwC,OAGxC,IAAID,GAAU,CACZ5M,KAAM6M,EAAS7M,KACf8E,MAAO+H,EAAS/H,MAChBgI,aAAcjD,GACZ,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,IACnCgD,EAAS/C,SACT+C,EAAS9C,UAEXM,KACEwC,EAASxC,MAAQrC,GAAU,IAAMA,GAAU,GAAK6E,EAAS/C,SAAStJ,QACpE2M,UAAW,SAAC7D,GAAD,OACTc,GACEd,EACAuD,EAAS/C,SAASgC,QAClB,GACAe,EAAS9C,WAEbmD,UAAW,SAACrE,EAAQxB,GAAT,OACTF,GAAW,CAAEN,GAAIgC,EAAQ/B,GAAIF,GAASE,IAAMO,EAAWE,IAAYV,IACrEuG,SAAU,SAACvE,GAAD,OACRgB,GAAwBhB,EAAQgE,EAAS/C,SAAU+C,EAAS9C,cAG5D2D,GAAyB,SAC7B5D,EACAP,EACAoE,GAQA,IANA,IAAMC,EAAU,GAEVvD,EAAI,SAAGsD,EAAcpE,EAAY,GAEjCsE,EAAM,SAAGF,EAAcpE,EAAYO,EAAStJ,OAAS,GALxD,WAOM+E,GACP,IAAMkE,EAAcJ,GAAwB9D,EAAGgE,EAAWoE,GAEtD7D,EAASgE,OAAM,SAACC,GAAD,OAAkC,IAAvBtE,EAAYsE,OACxCH,EAAQ3H,KAAKV,IAJRA,EAAI,EAAGA,EAAI8E,GAAQuD,EAAQpN,OAASqN,EAAQtI,GAAK,EAAI,EAArDA,GAQT,OAAOqI,GAQII,GAA6B,SACxCnB,GADwC,OAGxC,IAAID,GAAU,CACZ5M,KAAM6M,EAAS7M,KACfqK,KAAM,KACN0C,cAAeW,GAAuBb,EAAS/C,SAAU,GAAI,GAC7DqD,UAAW,SAAC7D,GAAD,OAAWD,GAAwBC,EAAO,GAAI,IACzD4D,UAAW,SAACrE,EAAQxB,GAAT,OACTF,GAAW,CAAEN,GAAID,GAASC,GAAIC,GAAI+B,GAAUxB,EAAWE,IAAYT,IACrEsG,SAAU,SAACvE,GAAD,OAAYK,GAAwBL,EAAQ,OAG7CoF,GAA+B,SAC1CpB,GAD0C,OAG1C,IAAID,GAAU,CACZ5M,KAAM6M,EAAS7M,KACfqK,KAAM,KACN0C,cAAeW,GAAuBb,EAAS/C,SAAU,EAAG,GAC5DqD,UAAW,SAAC7D,GAAD,OAAWD,GAAwBC,EAAO,EAAG,IACxD4D,UAAW,SAACrE,EAAQxB,GAAT,OACTF,GAAW,CAAEJ,GAAIH,GAASG,GAAIC,GAAI6B,GAAUxB,EAAWO,IAAcZ,IACvEoG,SAAU,SAACvE,GAAD,OAAYK,GAAwBL,EAAQ,OC5I3CqF,G,WAjGb,WAAYC,EAAyBrJ,GAAkB,0BADvDkI,WACsD,EACpDC,KAAKD,MAAQ,GACbC,KAAKmB,oBAAoBD,EAAYrJ,G,6DAGvBwE,EAAe5J,GAC7BuN,KAAKD,MAAM1D,GAAS,KAAO,GAAM5J,MAAoB,EAAR4J,IAAc,K,sCAG7CA,GACd,OAAQ2D,KAAKD,MAAM1D,GAAS,MAAgB,EAARA,IAAc,GAAM,K,0CAGtC6E,EAAyBrJ,GAC3C,IAAMuF,EAAO8D,EAAW7O,QAAO,SAACC,EAAK8O,GAAN,OAAc9O,EAAM8O,EAAIhE,OAAM,GAE7D4C,KAAKD,MAAMxM,OAAS,EAEpB,IAAK,IAAI+E,EAAI,EAAGA,EAAK8E,EAAO,GAAM,EAAG9E,GAAK,EACxC0H,KAAKD,MAAM/G,MAAM,GAQnB,IALA,IAAIqI,EAAQ,EACRC,EAAO,EAEL7K,EAAS,CAAC,GAEP6B,EAAI,EAAGA,EAAI4I,EAAW3N,OAAQ+E,GAAK,EAC1C7B,EAAOuC,KAAKkI,EAAW5I,EAAI,GAAG8E,KAAO3G,EAAO6B,EAAI,IAOlD,IAJA,IAAMiJ,ENWe,SAACC,GACxB,IAAM3I,EAAqB,GACrB4C,EAAM+F,EAAIjO,OAAS,EAkBzB,OAhBe,SAATkO,EAAUC,EAAepJ,GAC7B,IAAK,IAAIE,EAAI,EAAGA,EAAIgJ,EAAIlJ,GAAG/E,OAAQiF,GAAK,EAAG,CACzC,IAAMmJ,EAAOD,EAAI7C,MAAM,GAEvB8C,EAAK3I,KAAKwI,EAAIlJ,GAAGE,IAEbF,IAAMmD,EACR5C,EAAOG,KAAK2I,GAEZF,EAAOE,EAAMrJ,EAAI,IAKvBmJ,CAAO,GAAI,GAEJ5I,EM/BgB+I,CACnBV,EAAWrQ,KAAI,SAACgR,GAAD,OAAUA,EAAK/B,kBAGvBxH,EAAI,EAAGA,EAAIiJ,EAAahO,OAAQ+E,GAAK,EAAG,CAG/C,IAFA,IAAI+D,EAAQ,EAEH7D,EAAI,EAAGA,EAAI+I,EAAajJ,GAAG/E,OAAQiF,GAAK,EAC/C6D,GAAS5F,EAAO+B,GAAK+I,EAAajJ,GAAGE,GAGvCwH,KAAK8B,gBAAgBzF,EAAO,GAE5BiF,GAAQ,EAOV,KAAOA,IAASlE,GAAM,CAKpB,IAAMmD,EAAUe,EAAOlE,EAAO,EACxB2E,EAAOxB,EAAU,GAAMc,EACvBW,EAAQzB,EAAUc,EAAQ,GAEhCA,GAAS,EAET,IAAK,IAAIhF,EAAQ,EAAGA,EAAQe,EAAMf,GAAS,EACzC,GAAI2D,KAAKiC,gBAAgB5F,KAAW0F,EAClC,IAAK,IAAI3H,EAAY,EAAGA,EAAYvC,EAAMtE,OAAQ6G,GAAa,EAAG,CAMhE,IALA,IAAMtC,EAAOD,EAAMuC,GAEf8H,EAAe7F,EACfW,EAAW,EAEN1E,EAAI7B,EAAOlD,OAAS,EAAG+E,GAAK,EAAGA,GAAK,EAC3C0E,GACEvG,EAAO6B,GACP4I,EAAW5I,GAAGsC,OACZtB,KAAKC,MAAM2I,EAAezL,EAAO6B,IACjCR,GAEJoK,GAAgBzL,EAAO6B,GAGzB,GAAI0H,KAAKiC,gBAAgBjF,KAAcgF,EAAO,CAG5C,GAFAV,GAAQ,EAEJf,EAAS,CACXP,KAAK8B,gBAAgBzF,EAAOgF,GAC5B,MAGFrB,KAAK8B,gBAAgB9E,EAAUqE,U,KC8I9Bc,G,WA1Lb,WAAYC,GAAsD,IAAnBvK,EAAkB,uDAAVmC,GAAU,0BAVjEnC,WAUiE,OATjEwK,iBASiE,OARjEnB,gBAQiE,OAPjEtB,cAOiE,OANjE0C,mBAMiE,OAFjEF,kBAEiE,EAC/DpC,KAAKoC,aAAeA,EACpBpC,KAAKnI,MAAQA,E,0DAGK,IAAD,OACjB,IAAImI,KAAKqC,YAAT,CAIArC,KAAKqC,aAAc,EALF,MAOqBrC,KAAKoC,eAAnClB,EAPS,EAOTA,WAAYoB,EAPH,EAOGA,cAEpBtC,KAAKkB,WAAaA,EAElBlB,KAAKsC,cAAgB,GAErBA,EAAcvQ,SAAQ,SAACwQ,GACrB,IAAMC,EAAmBD,EAAe1R,KAAI,SAACkC,GAAD,OAC1C,EAAKmO,WAAWrQ,KAAI,SAACkP,GAAD,OAAWA,EAAMhN,QAAM2F,QAAQ3F,MAGrDyP,EAAiBC,MACf,SAACjN,EAAG0B,GAAJ,OAAU,EAAKgK,WAAW1L,GAAG4H,KAAO,EAAK8D,WAAWhK,GAAGkG,QAGzD,IAAMsF,EAA4B,GAElCF,EAAiBzQ,SAAQ,SAACuG,GAAD,OAAOoK,EAAa1J,KAAK,EAAKkI,WAAW5I,OAElE,IAAMqK,EAAe,IAAI1B,GAAayB,EAAc,EAAK7K,OAEzD,EAAKyK,cAActJ,KAAK,CACtB2J,eACAH,2B,qCAMJI,EACAjC,GAEA,MAAO,CACLiC,WACAjC,a,6BAKFA,EACAU,EACAwB,EACAD,GAIA,IAFA,IAAIE,EAAkB,EAEbxK,EAAI,EAAGA,EAAI0H,KAAKsC,cAAc/O,OAAQ+E,GAAK,EAAG,CAIrD,IAHA,IAAI+D,EAAQsE,EAAQX,KAAKsC,cAAchK,GAAGkK,iBAAiB,IACvDO,EAAQ,EAGNvK,EAAI,EACRA,EAAIwH,KAAKsC,cAAchK,GAAGkK,iBAAiBjP,OAC3CiF,GAAK,EAELuK,GAAS/C,KAAKkB,WAAWlB,KAAKsC,cAAchK,GAAGkK,iBAAiBhK,EAAI,IACjE4E,KACHf,GAASsE,EAAQX,KAAKsC,cAAchK,GAAGkK,iBAAiBhK,IAAMuK,EAGhE,IAAMC,EAAWhD,KAAKsC,cAAchK,GAAGqK,aAAaV,gBAClD5F,GAGF,GAAI2G,EAAW3B,EACb,OAAO,EAKL2B,EAAWF,IACbA,EAAkBE,GAItB,GAAwB,IAApBF,EACF,OAAO9C,KAAKiD,eAAeL,EAAUjC,GAGvC,GAAIU,EAAQ,EACV,IAAK,IAAI/I,EAAI,EAAGA,EAAI0H,KAAKnI,MAAMtE,OAAQ+E,GAAK,EAAG,CAC7C,IAAMR,EAAOkI,KAAKnI,MAAMS,GAExB,GACEgB,KAAKC,MAAMzB,EAAO,KAAOwB,KAAKC,MAAMsJ,EAAW,IAC/CvJ,KAAKC,MAAMzB,EAAO,KAAOwB,KAAKC,MAAMsJ,EAAW,GAAK,EACpD,CAGA,IAFA,IAAMK,EAAiB,GAEd1K,EAAI,EAAGA,EAAImI,EAAQpN,OAAQiF,GAAK,EACvC0K,EAAelK,KAAKgH,KAAKkB,WAAW1I,GAAGoC,OAAO+F,EAAQnI,GAAIV,IAG5D,IAAMe,EAASmH,KAAKmD,OAClBD,EACA7B,EAAQ,EACRvJ,EACA8K,EAAS1K,OAAO,CAACJ,KAGnB,GAAIe,EACF,OAAOA,GAMf,OAAO,I,4BAKH+G,GAA4D,IAAD,OAC/DI,KAAKoD,aAELpD,KAAKJ,SAAL,aACEyD,SAAU,GACVR,SAAU,EACVS,QAAQ,GACL1D,GAGL,IAEI2D,EAFE5C,EAAUX,KAAKJ,SAASe,SAAW,GAIzC,GAAIX,KAAKJ,SAASjB,SAAU,CAAC,IAAD,EACKhG,GAAe,KAAD,OACtCqH,KAAKJ,SAASjB,WACnB,GAHwB,mBACnB9G,EADmB,KACZQ,EADY,KAMtBA,EAAc9E,OAAS,IACzBgQ,EAAmBtK,GAAgBZ,EAAc3F,KAAK,OAGxD,IAAK,IAAI4F,EAAI,EAAGA,EAAI0H,KAAKkB,WAAW3N,OAAQ+E,GAAK,EAC/CqI,EAAQ3H,KAAKgH,KAAKkB,WAAW5I,GAAGuH,cAGlChI,EAAM9F,SAAQ,SAAC+F,GACb,IAAK,IAAIQ,EAAI,EAAGA,EAAIqI,EAAQpN,OAAQ+E,GAAK,EACvCqI,EAAQrI,GAAK,EAAK4I,WAAW5I,GAAGsC,OAAO+F,EAAQrI,GAAIR,MAKzD,IAAK,IAAIuJ,EAAQ,EAAGA,GAASrB,KAAKJ,SAASyD,SAAUhC,GAAS,EAAG,CAC/D,IAAMuB,EAAW5C,KAAKmD,OAAOxC,EAASU,EAAOrB,KAAKJ,SAASiD,SAAU,IAErE,GAAID,EAAU,CACZ,GAAI5C,KAAKJ,SAAS0D,OAAQ,CACxB,IAAME,EAAYpK,GAAgBwJ,EAASA,UAE3C,OAAIW,EAIKnK,GACLT,GAAe,GAAD,OAAI4K,EAAJ,YAAwBC,KAInCA,EAGT,OAAOZ,GAIX,OAAO,M,KHrNLa,GAAgB,CAAC,GAAI,EAAG,GAAI,EAAG,EAAG,EAAG,GAAI,GAAI,IAQ7CC,GAAiB,IAAIvB,IAAO,WAMhC,IAAMwB,EAAgB,SAAClM,EAAWC,GAIhC,IAHA,IAAMlC,EAAI2H,GAAwB1F,EAAG,CAAC,EAAG,EAAG,GAAI,IAC1CP,EAAIiG,GAAwBzF,EAAG,CAAC,EAAG,EAAG,GAAI,IAEvCY,EAAI,EAAGA,EAAI,EAAGA,GAAK,EAC1B,IAAc,IAAV9C,EAAE8C,GAAW,CACf,IAAc,IAAVpB,EAAEoB,GACJ,OAAQ,EAEVpB,EAAEoB,GAAK9C,EAAE8C,GAIb,OAAOsE,GAAwB1F,EAAG,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,KAGpD4H,GAAQ,GAKR,IAAK,IAAIxG,EAAI,EAAGA,EAAI,IAAKA,GAAK,EAAG,CAC/BwG,GAAM9F,KAAK,IAEX,IAAK,IAAIR,EAAI,EAAGA,EAAI,IAAKA,GAAK,EAC5BsG,GAAMxG,GAAGE,GAAKmL,EAAcrL,EAAGE,GAInC,MAAO,CACL0I,WAAY,CAGV,IAAIvB,GAAU,CACZ5M,KAAM,mBACNqK,KAAM,GACN2C,MAAOlB,GAAMkB,QAGftD,GACAmC,GAEA4B,GAA2B,CACzBzN,KAAM,SACNqK,KAAM,MACNvF,MAAO4L,GACP5G,SAAU,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,MAI9ByF,cAAe,CACb,CAAC,mBAAoB,SAAU,YAC/B,CAAC,mBAAoB,SAAU,cAGlCmB,IA0DUG,GAAiB,I,oDApD5B,aAA4D,IAAD,kDAA5CC,EAA4C,yBAA5CA,EAA4C,uBACzD,+BAASA,KAJXR,cAG2D,IAF3DT,cAE2D,EAGzD,EAAKS,SAAW,GAChB,EAAKT,SAAW,GAJyC,E,4DAQzDA,EACAjC,GAEA,IAAMkC,EAAWD,EAAS/D,OAAO,GAAG,GAIpC,GACEgE,EAAW,IAAM,GACY,IAA7BvJ,KAAKC,MAAMsJ,EAAW,IACO,KAA7BvJ,KAAKC,MAAMsJ,EAAW,GAEtB,OAAO,EAGT,IAAMiB,EAAmBJ,GAAeK,MAAM,CAC5CpD,QAAS,CACPA,EAAQ,GACRA,EAAQ,GACRA,EAAQ,GACR7B,GAAM6B,EAAQ,IAAIA,EAAQ,KAE5B0C,SAAUrD,KAAKqD,SAAWT,EAASrP,OACnCsP,WACAS,QAAQ,IAGV,GAAIQ,EAAkB,CAGpB,GAFA9D,KAAK4C,SAAWA,EAAS1K,OAAO4L,EAAiBlB,UAE7C5C,KAAKqD,UAAYrD,KAAKJ,SAASyD,SACjC,MAAO,CACLT,SAAU5C,KAAK4C,SACfjC,WAIJX,KAAKqD,SAAWrD,KAAK4C,SAASrP,OAAS,EAGzC,OAAO,M,GApDkB4O,IAwDC,EAAmB,WCLL,IAC1CvC,ED2CA,OAjCAnD,GAAS,IAAIkD,GAAU,CACrB5M,KAAM,SAENqK,KAAM,EAEN2C,MAAO,CACL,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACpD,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MAIxDnB,GCnBA,IAAIe,GAAU,CACZ5M,MAHF6M,EDqBwC,CACtC7M,KAAM,WACN8J,SAAU,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,KCpBX9J,KACf8E,MAAO+H,EAAS/H,MAChBgI,aAAcjD,GACZ,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtBgD,EAAS/C,SACT+C,EAAS9C,UAEXM,KACEwC,EAASxC,MAAQrC,GAAU,GAAKA,GAAU,EAAI6E,EAAS/C,SAAStJ,QAClE2M,UAAW,SAAC7D,GAAD,OACTc,GACEd,EACAuD,EAAS/C,SAASgC,QAClB,EACAe,EAAS9C,WAEbmD,UAAW,SAACrE,EAAQxB,GAAT,OACTF,GAAW,CAAEJ,GAAI8B,EAAQ7B,GAAIJ,GAASI,IAAMK,EAAWO,IAAcb,IACvEqG,SAAU,SAACvE,GAAD,OACRgB,GAAwBhB,EAAQgE,EAAS/C,SAAU+C,EAAS9C,aDWhE+B,GAAQ2B,GAA2B,CACjCzN,KAAM,QACN8J,SAAU,CAAC,EAAG,EAAG,GAAI,IACrBC,UAAU,IAKZ4G,GAAeN,aAER,CACLlC,WAAY,CACV,IAAIvB,GAAU,CAIZ5M,KAAM,gBACNqK,KAAM,IACN2C,MAAOlB,GAAMkB,MACbnF,OAAQ,SAACmF,EAAO1D,EAAOvE,GAAf,OACNwB,KAAKC,MAAMwG,EAAc,GAAR1D,GAAYvE,GAAQ,OAGzCkJ,GAA6B,CAC3BjO,KAAM,QACN8J,SAAU,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,KAGlCkE,GAA2B,CACzBhO,KAAM,OACN8J,SAAU,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,MAG/CgC,GACApC,GACAmC,GAEA4B,GAA2B,CACzBzN,KAAM,SACN8J,SAAU,CAAC,EAAG,EAAG,KAGnB2D,GAA2B,CACzBzN,KAAM,SACN8J,SAAU,CAAC,EAAG,EAAG,MAIrByF,cAAe,CACb,CAAC,gBAAiB,QAClB,CAAC,gBAAiB,aAGrBrI,IAEU+J,GAAiB,SAC5BrF,GAEoB,IADpB0E,EACmB,uDADR,GAEX,OAAI3I,MAAMuJ,QAAQtF,GACTiF,GAAeG,MAAM,CAC1BpD,QAAShC,EACT0E,aAIGO,GAAeG,MAAM,CAC1BpF,WACA0E,cAISa,GAAY,SACvB1G,GADuB,OAGvBwG,GAAe,CACb1K,KAAKC,MACHqD,GAAwBY,EAAU5D,GAAI,CAAC,EAAG,EAAG,GAAI,KAAK,GAAQ,IAEhEqC,GAAwBuB,EAAUzD,GAAI,GACtCkC,GAAwBuB,EAAU3D,GAAI,GACtC+C,GAAwBY,EAAU5D,GAAI,CAAC,EAAG,EAAG,GAAI,KAAK,GACtD+C,GAAUa,EAAU1D,IACpB8C,GAAwBY,EAAU1D,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,IACtD8C,GAAwBY,EAAU5D,GAAI,CAAC,EAAG,EAAG,IAC7CgD,GAAwBY,EAAU5D,GAAI,CAAC,EAAG,EAAG,OIxP3CuK,GAAqB,SAACC,EAAmBC,GAC7C,IAAMzI,EAASQ,GACbb,GAAa,EAAD,SAAI,EAAM6I,EAAQ7Q,OAAS,IACvC6Q,EAAQ7Q,OACR,GAGIiJ,EAAc9B,MAAM,IAAI4J,KAAK,GAQnC,OANKD,GACHD,EAAQrS,SAAQ,SAAC+O,EAAOxI,GACtBkE,EAAYsE,GAASlF,EAAOtD,MAIzBkE,GAGH+H,GAAuB,SAACH,EAAmBC,GAC/C,IAAMzI,EAASQ,GACbb,GAAa,EAAD,SAAI,EAAM6I,EAAQ7Q,OAAS,IACvC6Q,EAAQ7Q,OACR,GAGIiJ,EAAc9B,MAAM,GAAG4J,KAAK,GAQlC,OANKD,GACHD,EAAQrS,SAAQ,SAAC+O,EAAOxI,GACtBkE,EAAYsE,GAASlF,EAAOtD,MAIzBkE,GAOHgI,GAA4B,SAACJ,EAAmBhH,GACpD,IAAMxB,EAASuB,GACb5B,GAAa,EAAGR,GAAUqJ,EAAQ7Q,SAClC6Q,EAAQvF,MAAM,GACduF,EAAQ7Q,QAGJ2J,EAAc,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,IAAI2B,MAAM,EAAGzB,GAMpE,OAJAgH,EAAQrS,SAAQ,SAAC+O,EAAOxI,GACtB4E,EAAY4D,GAASlF,EAAOtD,MAGvB4E,GAqCMuH,GA9BqB,SAClCC,EACAC,EACAC,GAEoB,IAChBC,EAFJR,EACmB,wDAGnB,GACEQ,EAAgB,CACdjL,GAAI4K,GAA0BE,EAAe,IAC7C7K,GAAIsK,GAAmBO,EAAeL,GACtCvK,GAAI0K,GAA0BG,EAAiB,GAC/C5K,GAAIwK,GAAqBI,EAAiBN,UAG5C1H,GAAUkI,EAAcjL,MAAQ+C,GAAUkI,EAAc/K,KACxD8K,EAAiBC,IAMnB,IAAMjC,EAAWsB,GAAUW,GAC3B,QAAIjC,GACKoB,GAAepB,IC3FbkC,GAAc,IAAI3C,IAC7B,iBAAO,CACLjB,WAAY,CACVV,GAA2B,CACzBzN,KAAM,kBACN8J,SAAU,CAACpD,GAAUA,GAAUA,GAAUA,MAG3CsH,GAA2B,CACzBhO,KAAM,kBACN8J,SAAU,CAACpD,GAAUA,GAAUA,GAAUA,OAI7C6I,cAAe,CAAC,CAAC,mBAAoB,CAAC,uBAExCrI,IAGW8K,GAAc,SAACpG,GAAD,OACzBmG,GAAYf,MAAM,CAAEpF,cC3BhBqG,GAAiB,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,KAE3CC,GAAiB,CACrB,CAAC,KAAM,KAAM,MACb,CAAC,KAAM,KAAM,MACb,CAAC,KAAM,KAAM,MACb,CAAC,KAAM,KAAM,MACb,CAAC,KAAM,KAAM,MACb,CAAC,KAAM,KAAM,MACb,CAAC,KAAM,KAAM,MACb,CAAC,KAAM,KAAM,OAGTC,GAAe,CACnB,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,OAGHC,GAAM,SAACnK,EAAW7C,GAAZ,OAA4B6C,EAAI7C,EAAKA,GAAKA,GAEhDiN,GAAkB,SAACC,GAAD,OACe,EAArCL,GAAetM,QAAQ2M,EAAQ,IAAUC,OAAOD,EAAQ,KACpDE,GAAmB,SACvBpL,EACAqL,EACAC,GAEA,OAAOR,GAAe9K,EAAKL,GAAG0L,IAC5BL,GAAIM,EAAmBtL,EAAKJ,GAAGyL,GAAc,IAC7C,IAGEE,GAAiB,SACrBvL,EACAwL,EACAF,GAHqB,OAKrBP,GAAa/K,EAAKP,GAAG+L,IACnBR,GAAIM,EAAmBtL,EAAKN,GAAG8L,GAAY,IAC3C,ICrCG,SAASC,GAAYC,GAAuC,IAAD,EAC1DC,EAAcjL,GAAYgL,EAAME,cAChCC,EAAQ,UAAGH,EAAMG,gBAAT,QAAqBC,GAC7BC,ED8CuB,SAC7B/L,GAEc,IADd7F,EACa,uDADkB,GAEzB6R,EAAqB,GAqC3B,OAlCAnB,GAAejT,SAAQ,SAACsT,EAASe,GAC/BD,EAAS,EAAIC,EAAc,GAAKf,KAIlCJ,GAAelT,SAAQ,SAACsU,EAAQb,GAC9Ba,EAAOtU,SAAQ,SAACsT,EAAS7I,GAAiB,IAAD,IACjC8J,EAAelB,GAAgBC,GAC/BkB,EAAehB,GAAiBpL,EAAMqL,EAAahJ,GAEzD2J,EAASG,IACNhS,EAAQlB,SAAT,UACAkB,EAAQlB,OAAOqK,eADf,aACA,EAAwBjK,SAAS2G,EAAKL,GAAG0L,OADzC,UAEAlR,EAAQlB,OAAO+S,gBAFf,aAEA,EAAyB3S,SAAS+S,IAC9BA,EACA,UAKVrB,GAAanT,SAAQ,SAACyU,EAAMb,GAC1Ba,EAAKzU,SAAQ,SAACsT,EAAS7I,GAAiB,IAAD,IAC/B8J,EAAelB,GAAgBC,GAC/BkB,EAAeb,GAAevL,EAAMwL,EAAWnJ,GAErD2J,EAASG,IACNhS,EAAQlB,SAAT,UACAkB,EAAQlB,OAAO6J,aADf,aACA,EAAsBzJ,SAAS2G,EAAKP,GAAG+L,OADvC,UAEArR,EAAQlB,OAAO+S,gBAFf,aAEA,EAAyB3S,SAAS+S,IAC9BA,EACA,UAIHJ,ECvFWM,CAAgBX,EAAa,CAC7C1S,OAAQyS,EAAMzS,SAEbvC,KAAI,SAAC6V,GAAD,OAAaV,EAASU,MAC1BrU,QAAO,SAACC,EAAK+D,GAAN,OAAgB/D,EAAIqU,QAAQ,KAAMtQ,KAAQuQ,IAEpD,OACE,qBACEC,UAAU,qEACVC,wBAAyB,CAAEC,OAAQb,KAKzC,IAAMD,GAA0C,CAC9Ce,EAAG,QACHC,EAAG,MACHC,EAAG,QACHC,EAAG,SACHC,EAAG,SACHC,EAAG,OACHC,EAAG,QAGCV,GAAQ,y7ICvCDW,GAAYC,IAAOC,IAAIC,MAAM,CACxCb,UACE,yHAFkB,mFAAGW,CAAH,MAKTG,GAAmBH,IAAOC,IAAIC,MAAM,CAC/Cb,UACE,iFAFyB,0FAAGW,CAAH,MCoCvBI,GAA2C,CAC/CZ,EAAG,SACHC,EAAG,MACHC,EAAG,OACHC,EAAG,QACHC,EAAG,SACHC,EAAG,QACHC,EAAG,QAGCO,GAAc,CAClB5K,MAAO,CAACxD,GAAUA,GAAUA,GAAUA,KAGlCqO,GAAY,CAChB7K,MAAO,CACLxD,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,IAEFgE,QAAS,CAAC/D,GAAaA,GAAaA,GAAaA,KAG7CqO,GAAS,2BACVD,IADU,IAEb3B,SAAU,CAAC,OAGPxQ,GAA8C,CAClDqS,MAAOH,GACPI,IAAKH,GACLI,aAAcH,GACdI,cAAeJ,GACfK,IAAKL,IA+GA,IAAMM,GAAwBC,aAAQ,SAAC3T,GAAD,MAA8B,CACzE4T,YAAazT,GAAeH,MADO2T,EA5G9B,SAAsBzC,GAAwC,IAAD,EAChC2C,mBAAwB,SADQ,mBAC3DC,EAD2D,KAChDC,EADgD,OAElCF,mBAAiB,IAFiB,mBAE3D7J,EAF2D,KAEjDgK,EAFiD,KA+DlE,OACE,eAAChB,GAAD,WACE,cAACiB,GAAA,EAAD,CAAaC,UAAU,WAAvB,SACE,eAACC,GAAA,EAAD,CACEjC,UAAU,gBACVpU,MAAOgW,EACPM,SAAU,SAAC3X,GACT,IAAM4X,EAAQ5X,EAAEwP,OAAOnO,MACnBuW,IAAUP,GACZE,EAAY,IAEdD,EAAaM,IARjB,UAWE,cAACC,GAAA,EAAD,CAAUxW,MAAM,QAAhB,mBACA,cAACwW,GAAA,EAAD,CAAUxW,MAAM,MAAhB,iBACA,cAACwW,GAAA,EAAD,CAAUxW,MAAM,eAAhB,4BACA,cAACwW,GAAA,EAAD,CAAUxW,MAAM,gBAAhB,6BACA,cAACwW,GAAA,EAAD,CAAUxW,MAAM,MAAhB,sBACA,cAACwW,GAAA,EAAD,CAAUxW,MAAM,eAAhB,4BACA,cAACwW,GAAA,EAAD,CAAUxW,MAAM,gBAAhB,6BACA,cAACwW,GAAA,EAAD,CAAUxW,MAAM,MAAhB,2BAGJ,cAACmT,GAAD,CACEG,aAAcpH,EACdvL,OAAQuC,GAAQ8S,GAChBzC,SAAU4B,KAEZ,eAACL,GAAD,WACE,cAAC2B,GAAA,EAAD,CAAQC,QAAQ,YAAY7S,QAzFX,WACrB,IAAIqI,EACJ,OAAQ8J,GACN,IAAK,QACHE,EAAYnK,GAAiB,GAAIV,KACjC,MACF,IAAK,MAGH,OAAa,CACXa,EAAWH,KACX,IAAM4K,EAAYrE,GAAYpG,GAC9B,GAAIyK,IACGpL,GAAYnD,GAAYuO,IAAa,CACxCT,EAAY,GAAD,OAAIhK,EAAJ,YAAgByK,IAC3B,OAIN,MACF,IAAK,OACHzK,ECnGN8F,GACE,CAAChL,GAAUA,GAAUA,GAAUA,IAC/B,CAACC,GAAaA,GAAaA,GAAaA,IACxCwE,MDkGMyK,EAAYhK,GAEd,MACF,IAAK,gBACHA,EClGN8F,GACE,CAAChL,GAAUA,GAAUA,GAAUA,IAC/B,CAACC,GAAaA,GAAaA,GAAaA,IACxCuE,MDiGM0K,EAAYhK,GAEd,MACF,IAAK,iBACHA,ECjGN8F,GACE,GACA,CAAC/K,GAAaA,GAAaA,GAAaA,IACxCwE,MDgGMyK,EAAYhK,GAEd,MACF,IAAK,OACHA,EChGN8F,GACE,CAAChL,GAAUA,GAAUA,GAAUA,IAC/B,CAACC,GAAaA,GAAaA,GAAaA,IACxC2E,IACA,KD8FMsK,EAAYhK,GAEd,MACF,IAAK,gBACHA,EC9FN8F,GACE,CAAChL,GAAUA,GAAUA,GAAUA,IAC/B,CAACC,GAAaA,GAAaA,GAAaA,IACxCyE,IACA,KD4FMwK,EAAYhK,GAEd,MACF,IAAK,iBACHA,EC5FN8F,GACE,CAAChL,GAAUA,GAAUA,GAAUA,IAC/B,GACA4E,IACA,KD0FMsK,EAAYhK,KAoCd,SACE,cAAC,IAAD,CAAkB3N,GAAG,gCAEvB,cAACkY,GAAA,EAAD,CACEC,QAAQ,YACRE,UAAWC,QAAQ3K,KAAc2K,QAAQzD,EAAM0C,aAC/CjS,QAAS,kBAAMiT,aAAgB1D,EAAM0C,YAAa5J,IAHpD,SAKE,cAAC,IAAD,CAAkB3N,GAAG,qC,oBE7HxB,IAAMwY,GAA0BlB,aAAQ,SAAC3T,GAAD,MAA8B,CAC3E4T,YAAazT,GAAeH,MADS2T,EA1ChC,SAAwBzC,GAA0C,IAAD,EACtC2C,mBAAiB,IADqB,mBAC/D7J,EAD+D,KACrDgK,EADqD,KAEtE,OACE,eAAChB,GAAD,WACE,sBAAKd,UAAU,uBAAf,UACE,cAAC4C,GAAA,EAAD,CAAYC,QAAQ,WAAW7C,UAAU,UAAzC,sBAGA,cAAC8C,GAAA,EAAD,CACE3Y,GAAG,WACHyB,MAAOkM,EACPkI,UAAU,6CACV+C,WAAS,EACTC,WAAS,EACTR,UAAQ,OAIZ,cAACzD,GAAD,CAAaG,aAAcpH,IAE3B,eAAC4I,GAAD,WACE,cAAC2B,GAAA,EAAD,CACEC,QAAQ,YACR7S,QAAS,WACPqS,EAAYnK,OAHhB,SAME,cAAC,IAAD,CAAkBxN,GAAG,gCAEvB,cAACkY,GAAA,EAAD,CACEC,QAAQ,YACR/L,KAAK,QACLiM,UAAW1K,IAAa2K,QAAQzD,EAAM0C,aACtCjS,QAAS,kBAAMiT,aAAgB1D,EAAM0C,YAAa5J,IAJpD,SAME,cAAC,IAAD,CAAkB3N,GAAG,qC,UCoBxB,IAAM8Y,GAA0BxB,aAAQ,SAAC3T,GAAD,MAA8B,CAC3E4T,YAAazT,GAAeH,MADS2T,EAnDhC,SAAwBzC,GAA0C,IAAD,EACtC2C,mBAAiB,IADqB,mBAC/D7J,EAD+D,KACrDgK,EADqD,OAEtCH,oBAAS,GAF6B,mBAE/DuB,EAF+D,KAErDC,EAFqD,KAGtE,OACE,eAACrC,GAAD,WACE,sBAAMsC,YAAU,EAACC,aAAa,MAAMrD,UAAU,YAA9C,SACE,cAACsD,GAAA,EAAD,CACEnZ,GAAG,kBACHoZ,MAAM,kBACNR,WAAS,EACTS,QAAS,EACTR,WAAS,EACTS,gBAAiB,CACfC,QAAQ,GAEVpU,MAAO4T,EACPS,WAAYT,GAAY,wBACxBU,OAAQ,SAACC,GACP,IAAMC,EAAsBD,EAAM9J,OAAOnO,MACzC,GAAIkY,EAAoBpX,OAAS,EAC/B,GAAIoD,GAAkBgU,GAAsB,CAC1C,IAAMC,EAAgB5G,GAAe2G,GACrC,GAAIC,EAAe,CACjB,IAAMC,EAAmB5R,GAAgB2R,GACzCjC,EAAYkC,SAGdb,GAAY,GACZrB,EAAY,SAGdqB,GAAY,GACZrB,EAAY,SAKpB,cAAC/C,GAAD,CAAaG,aAAcpH,IAC3B,cAAC4I,GAAD,UACE,cAAC2B,GAAA,EAAD,CACEC,QAAQ,YACRE,UAAWC,QAAQzD,EAAM0C,cAAgBe,QAAQ3K,GACjDrI,QAAS,kBAAMiT,aAAgB1D,EAAM0C,YAAa5J,IAHpD,SAKE,cAAC,IAAD,CAAkB3N,GAAG,oC,SCzCzB8Z,GAAStD,IAAOC,IAAIC,MAAM,CAAEb,UAAW,2BAAjC,0EAAGW,CAAH,MAENuD,GAAkBvD,IAAOC,IAAIC,MAAM,CACvCb,UAAW,+CADQ,mFAAGW,CAAH,MAIfwD,GAAyBxD,IAAOC,IAAIC,MAAM,CAC9Cb,UACE,yFAFwB,0FAAGW,CAAH,MAKtByD,GAAgBzD,IAAOC,IAAIC,MAAM,CACrCb,UAAW,0BADM,iFAAGW,CAAH,MAIb0D,GAAc1D,IAAOC,IAAIC,MAAM,CACnCb,UAAW,iBADI,+EAAGW,CAAH,MAIJ2D,GAAa,WAAoB,IAAD,EACFC,IAAM5C,SAAS,UADb,mBACpC6C,EADoC,KACnBC,EADmB,KAErCnW,EAAWC,cAUjB,OALAmW,qBAAU,WACR3H,GAAeR,aACfjO,EAASqW,kBACR,IAGD,eAACV,GAAD,WACE,cAACW,EAAA,EAAD,CAAQzO,SAAS,SAAjB,SACE,eAAC0O,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAYxC,QAAQ,KAApB,SACE,cAAC,IAAD,CAAkBnY,GAAG,eAEvB,cAACia,GAAD,UACE,cAAC/V,GAAD,WAKN,sBAAK2R,UAAU,8BAAf,UACE,cAAC+E,EAAA,EAAD,CAAO/E,UAAU,2DAAjB,SACE,eAACgF,EAAA,EAAD,WACE,eAACC,EAAA,EAAD,CACEC,QAAM,EAENC,SAA8B,WAApBX,EACV/U,QAAS,kBAAMgV,EAAc,WAJ/B,UAME,eAACP,GAAD,WACE,cAACkB,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,MAEF,cAACC,EAAA,EAAD,CAAcC,QAAQ,cAGxB,eAACpB,GAAD,WACE,cAACE,GAAD,UACE,cAACgB,EAAA,EAAD,MAEF,+CAfE,UAmBN,eAACJ,EAAA,EAAD,CACEC,QAAM,EAENC,SAA8B,SAApBX,EACV/U,QAAS,kBAAMgV,EAAc,SAJ/B,UAME,eAACP,GAAD,WACE,cAACkB,EAAA,EAAD,UACE,cAACI,EAAA,EAAD,MAEF,cAACF,EAAA,EAAD,CAAcC,QAAQ,YAGxB,eAACpB,GAAD,WACE,cAACE,GAAD,UACE,cAACmB,EAAA,EAAD,MAEF,6CAfE,QAmBN,eAACP,EAAA,EAAD,CACEC,QAAM,EAENC,SAA8B,WAApBX,EACV/U,QAAS,kBAAMgV,EAAc,WAJ/B,UAME,eAACP,GAAD,WACE,cAACkB,EAAA,EAAD,UACE,cAACK,EAAA,EAAD,MAEF,cAACH,EAAA,EAAD,CAAcC,QAAQ,cAGxB,eAACpB,GAAD,WACE,cAACE,GAAD,UACE,cAACoB,EAAA,EAAD,MAEF,+CAfE,eAqBV,sBAAKzF,UAAU,iCAAf,UACuB,WAApBwE,GAAgC,cAAC7B,GAAD,IACZ,SAApB6B,GAA8B,cAAChD,GAAD,IACV,WAApBgD,GAAgC,cAACvB,GAAD,IAEjC,qBAAKjD,UAAU,kDAAf,SACE,eAAC0F,EAAA,EAAD,CACEC,YAAU,EACV/Z,MAAO4Y,EACPtC,SAnGS,SAAC0D,EAA+BC,GACnDpB,EAAcoB,IAmGJ7F,UAAU,SAJZ,UAME,cAAC8F,EAAA,EAAD,CACEC,KAAM,cAACV,EAAA,EAAD,IACNzZ,MAAM,SACN2X,MAAM,SACNyC,aAAW,WAEb,cAACF,EAAA,EAAD,CACEC,KAAM,cAACP,EAAA,EAAD,IACN5Z,MAAM,OACN2X,MAAM,OACNyC,aAAW,SAEb,cAACF,EAAA,EAAD,CACEC,KAAM,cAACN,EAAA,EAAD,IACN7Z,MAAM,SACN2X,MAAM,SACNyC,aAAW,0B,SCzJrBC,GAAcxD,QACW,cAA7ByD,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASnU,MACvB,2DA2CN,SAASoU,GAAgBC,EAAeC,GACtC3Z,UAAU4Z,cACPC,SAASH,GACTI,MAAK,SAACC,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB/Y,QACflB,UAAU4Z,cAAcQ,YAI1B3X,QAAQ4X,IACN,iHAKEV,GAAUA,EAAOW,UACnBX,EAAOW,SAASP,KAMlBtX,QAAQ4X,IAAI,sCAGRV,GAAUA,EAAOY,WACnBZ,EAAOY,UAAUR,WAO5BS,OAAM,SAAC9X,GACND,QAAQC,MAAM,4CAA6CA,M,4BC5EjEvE,EAAUM,QAGVN,EAAUM,QAEV,WACE,IAAM6B,EAAWqX,IAAM8C,YACjBC,EAAQC,eACdD,EAAME,QAAQva,EAAsBC,GAEpC,IAAMua,EAAiB,SAAC/b,GAAD,OAA0B,WAAO,IAAD,EACrD,UAAAwB,EAASG,eAAT,SAAkBK,cAAchC,KAElCgc,IAASC,OACP,cAAC,IAAD,CAAUL,MAAOA,EAAjB,SACE,cAAC,IAAD,CAActb,OAAQA,EAAQc,SAAUA,EAAxC,SACE,cAAC8a,EAAA,EAAD,CAAgBC,aAAW,EAA3B,SACE,cAAC,IAAD,CACEC,IAAK5a,EACL6a,SAAU,EACV5a,OAAQ,SAACzB,GAAD,OACN,cAAC6D,EAAA,EAAD,CACEgH,KAAK,QACL/G,MAAM,UACNC,QAASgY,EAAe/b,GAH1B,SAKE,cAACsc,EAAA,EAAD,CAAOC,SAAS,aATtB,SAaE,cAAC,GAAD,YAKRC,SAASC,eAAe,SAG5BC,GDpCO,SAAkB7B,GACvB,GAA6C,kBAAmB3Z,UAAW,CAGzE,GADkB,IAAIyb,IAAIC,iBAAwBpC,OAAOC,SAASoC,MACpDC,SAAWtC,OAAOC,SAASqC,OAIvC,OAGFtC,OAAOuC,iBAAiB,QAAQ,WAC9B,IAAMnC,EAAK,UAAMgC,iBAAN,sBAEPrC,KAgEV,SAAiCK,EAAeC,GAE9CmC,MAAMpC,EAAO,CACXqC,QAAS,CAAE,iBAAkB,YAE5BjC,MAAK,SAACkC,GAEL,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYhX,QAAQ,cAG5CjF,UAAU4Z,cAAcwC,MAAMtC,MAAK,SAACC,GAClCA,EAAasC,aAAavC,MAAK,WAC7BR,OAAOC,SAAS+C,eAKpB7C,GAAgBC,EAAOC,MAG1Ba,OAAM,WACL/X,QAAQ4X,IACN,oEAvFAkC,CAAwB7C,EAAOC,GAI/B3Z,UAAU4Z,cAAcwC,MAAMtC,MAAK,WACjCrX,QAAQ4X,IACN,iHAMJZ,GAAgBC,EAAOC,OCW/BC,I,4EChEa4C,G,MAAiB,SAAOtb,EAAUX,GAC7C,OAAOA,EAAOI,UCED8b,cAA4B,CACzCrb,OAAQsb,YAAoC,MAAM,SAACC,GDoBzB,IAAI3d,ECnB5B2d,EAAQC,QAAQC,IAAeL,GAC/BG,EAAQC,QAAQE,KDkBY9d,EClBkB,KDkBM,kBAAMA,U,8DEvBvD,SAAS+d,EACdxf,EACAyf,GAEA,OAAO,cAAC,IAAD,CAAkBzf,GAAIA,EAAIyf,OAAQA,I,+BCWjCC,G,WAiCOC,G,WAIPC,G,WAgCOC,G,WAIPC,G,WAmBOC,GA5FjB,SAAUL,EAAV,iFACW7b,EADX,EACET,QADF,kBAIW4c,YAAKC,IAAmBpc,GAJnC,uBAKWqc,YAAIZ,YAAczb,IAL7B,uBAMWqc,YACL/c,YACEqc,EAAU,2BAA4B,CACpCW,WAAYtc,EAAO9B,OAErB,CAAEoW,QAAS,aAXnB,8DAeQ,gBAAaiI,KAfrB,kCAgBaF,YACL/c,YACEqc,EAAU,6BAA8B,CACtCW,WAAYtc,EAAO9B,KACnBse,YAAa,KAAEA,cAEjB,CACElI,QAAS,WAvBrB,gCA4BMjT,QAAQ4X,IAAI,oBA5BlB,sDAiCO,SAAU6C,IAAV,iFACElc,YAAUuB,IAAyB0a,GADrC,uCAIP,SAAUE,EAAV,mFACW/b,EADX,EACET,QAEMkd,EAAoBC,aAAa,SAACC,GAEtC,OADA3c,EAAOya,iBAAiB,yBAA0BkC,GAC3C,WACL3c,EAAO4c,oBAAoB,yBAA0BD,OAN3D,SAUwBE,YAAK,CACzBC,gBAAiBC,YAAKN,GACtBO,eAAgBD,YAAKtB,KACrBwB,iBAAkBF,YAAKrB,OAb3B,kBAgBaoB,gBAhBb,iCAiBWT,YAAIX,eAjBf,wBAkBWW,YACL/c,YACEqc,EAAU,8BAA+B,CACvCW,WAAYtc,EAAO9B,OAErB,CACEoW,QAAS,WAxBnB,QA6BEmI,EAAkBS,QA7BpB,wCAgCO,SAAUlB,IAAV,iFACEpc,YAAU6b,IAAeM,GAD3B,uCAIP,SAAUE,IAAV,gGAE0BE,YAAKgB,KAF/B,YAEUnd,EAFV,wCAIaqc,YAAIZ,YAAczb,IAJ/B,uBAKaqc,YACL/c,YACEqc,EAAU,2BAA4B,CACpCW,WAAYtc,EAAO9B,OAErB,CAAEoW,QAAS,aAVrB,yDAeIjT,QAAQC,MAAR,MAfJ,sDAmBO,SAAU4a,IAAV,iFACEa,YAAKpG,KADP,uBAEEwF,YAAKF,GAFP,uCAKQ,OACbH,EACAE,EACAE,GC1GFkB,YAAgB,QAASC,GACzBC,YAAcC,I,iTCTDC,EAAe,SAC1BC,GAEA,IAAIC,EACJ,OAAO,SAACC,EAA8BC,GAMpC,OALKF,GAAgBA,EAAahf,SAAW+e,IAC3CC,EAAe,GACfC,EAAYxZ,KAAKuZ,IAEnBA,EAAavZ,KAAKyZ,GACXD,ICZE1c,EAAkB,MAIlBC,EAAsB,KAG7B2c,EAAkC,CACtCzL,EAAG,EACH0L,GAAI,EACJ,KAAM,EACNzL,EAAG,EACH0L,GAAI,EACJ,KAAM,EACNzL,EAAG,EACH0L,GAAI,EACJ,KAAM,EACNzL,EAAG,EACH0L,GAAI,GACJ,KAAM,GACNzL,EAAG,GACH0L,GAAI,GACJ,KAAM,IAGD,SAASC,EAAerU,GAC7B,OAAOA,EACJgI,QAAQ,UAAW,SACnBsM,MAAM,KACNpiB,KAAI,SAACiH,GAAD,OAAU4a,EAAQ5a,MACtBzF,OAAOggB,EAAa,GAAI,IACxBxhB,KAAI,SAACgH,GAAD,aAAsB,GAAXA,EAAM,IAAN,UAAiBA,EAAM,UAAvB,QAA6B,OAC5CxF,OAAOggB,EAAa,IAAK,IACzBxhB,KAAI,SAACqiB,GAAD,OAAgB,IAAIC,WAAWD,MAGjC,IAAM3J,EAAe,uCAAG,WAC7BhB,EACA5J,GAF6B,mBAAAnJ,EAAA,mEAKvB+S,EALuB,+BAMGyK,EAAerU,IANlB,gEAMdyU,EANc,iBAOjBC,EAAa9K,EAAa6K,GAPT,gMAW3Bld,QAAQ4X,IAAR,MAX2B,uEAAH,wDAetBuF,EAAe,SACnB9K,EACA+K,GAEA,OAAO,IAAIC,QAAJ,uCAAY,WAAO9hB,GAAP,qBAAA+D,EAAA,sEACY+S,EAAYiL,kBAAkB1d,GAD1C,cACX2d,EADW,gBAE2BA,EAAeC,kBAxD/B,OAsDX,cAEXC,EAFW,gBAKXA,EAA8BC,WAAWN,GAL9B,wBAMkBG,EAAeC,kBA3DlB,OAqDf,QAMXG,EANW,QAUXC,EAVW,+BAAAte,EAAA,MAUiB,wCAAAA,EAAA,sDAAOue,EAAP,gCAChCC,WAAU,sBAAC,4BAAAxe,EAAA,sEACkBqe,EAAqBI,YADvC,UACHC,EADG,OACoDC,SAC3D,IAEEJ,GAAsC,IAAhBG,EAJjB,uBAKPziB,IALO,0BASJsiB,GAAsC,IAAhBG,IACzBH,GAAqB,GAGvBD,EAA0BC,GAbjB,2CAcR,IAf6B,2CAVjB,uDA2BS,GA3BT,4CAAZ,wDA+BI3C,EAAb,kDAEE,WAAY/c,EAAiBgd,GAAsB,IAAD,8BAChD,cAAMhd,IAFRgd,iBACkD,EAEhD,EAAKte,KAAO,qBACZ,EAAKse,YAAcA,EAH6B,EAFpD,sBAAwChgB,QAkB3B4f,EAAiB,uCAAG,WAC/Bpc,GAD+B,yBAAAW,EAAA,gFAGVX,EAAOG,YAHG,aAGV,EAAasT,UAHH,UAGzB8L,EAHyB,6BAKvB,IAAI/iB,MAAM,yCALa,uBAOC+iB,EAAOZ,kBAAkBzd,GAP1B,cAOzBse,EAPyB,iBAQGA,EAAkBX,kBA3GzB,OAmGI,eAQzBY,EARyB,iBAWAA,EAAoBL,YAXpB,WAWzBM,EAXyB,OAaG,mBAD5BlD,GAAc,IAAImD,aAAcC,OAAOF,IAC7BG,cAbe,uBAcvB,IAAItD,EACR,sCACAC,GAhB2B,4CAAH,sDAmCjBW,EAA0B,WAGrC,OAAO,IAAIuB,QAAJ,uCAAY,WAAO9hB,GAAP,uBAAA+D,EAAA,0DACXmf,EAAwBlhB,UAAUgC,WACbmf,WAFV,uBAGfnjB,GAAQ,GAHO,0CAMKkjB,EAAsBC,aAN3B,OAMXC,EANW,qBAOIA,GAPJ,aAAArf,EAAA,oCAAAA,EAAA,6DAONX,EAPM,QAQTigB,EAAkB,IAAIC,gBAC5BlgB,EAAOya,iBACL,wBADF,sBAEE,sBAAA9Z,EAAA,6DACEsf,EAAgBE,QADlB,kBAGU/D,EAAkBpc,GAH5B,OAIIpD,EAAQoD,GAJZ,uGAOA,CAAEogB,MAAM,IAlBK,SAoBTpgB,EAAOqgB,oBAAoB,CAAEC,OAAQL,EAAgBK,SApB5C,uUAAZ,yD,gCChJT,kHAEMC,EAAe,QAER9E,EAAgB+E,YAAY,UACpCD,EADoC,oBAI5B7E,EAAkB8E,YAAa,GAAD,OAAID,EAAJ,sBAE9Bpf,EAA0Bqf,YAAY,UAC9CD,EAD8C,gC,gCCVnD,gFAGME,EAAS,eAEFnhB,EAAkBkhB,YAAa,GAAD,OACtCC,EADsC,sBAEzC,SAACjhB,EAA0BC,GAA3B,MAAwD,CACtDF,QAAS,CAAEC,UAASC,eAIXC,EAAgB8gB,YAAa,GAAD,OACpCC,EADoC,oBAEvC,SAAC/iB,GAAD,MAAwB,CACtB6B,QAAS,CAAE7B,Y,4MCQLgjB,G,WAUAC,GAzBJC,EAA2C,GAE1C,SAASxD,EACd1f,EACA2f,GAEAuD,EAAgBljB,GAAO2f,EAGzB,IAAMwD,EAAuB,GAEtB,SAASvD,EAAcC,GAC5BsD,EAAa1c,KAAb,MAAA0c,EAAY,YAAStD,IAGvB,SAAUmD,EAAgBI,GAA1B,iEAEI,OAFJ,kBAEU3E,YAAK2E,GAFf,8BAKI,OALJ,yBAIIzf,QAAQC,MAAM,yCAAd,MAJJ,UAKUyf,YAAM,KALhB,QAMI,OANJ,UAMU5E,YAAKuE,EAAiBI,GANhC,qDAUA,SAAUH,IAAV,iEACE,OADF,SACQK,YAAIH,EAAa7kB,KAAI,SAAC8kB,GAAD,OAAUG,YAAMP,EAAiBI,OAD9D,uCAQO,SAASvH,IACd,IAAM2H,EAAiBC,cACjB7H,EAAQ8H,YAAe,CAC3B/D,QAASuD,EACTS,WAAY,CAACH,KAGf,OADAA,EAAeI,IAAIX,GACZ,2BACFrH,GADL,IAEEE,QAAS0H,EAAeI,Q,gCClD5B,8CAEa3K,EAAiB6J,YAAa,qB","file":"static/js/main.3d922380.chunk.js","sourcesContent":["var map = {\n\t\"./translations/en-us.json\": 139\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 138;","var map = {\n\t\"./assets/styles/main.css\": 147,\n\t\"./tailwind.css\": 148\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 146;","var map = {\n\t\"./app/robot/store/init-store.ts\": 151\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 149;","export function importAll<T = unknown>(\n  requireContext: __WebpackModuleApi.RequireContext\n): Record<string, T> {\n  const importCache: Record<string, T> = {};\n  requireContext\n    .keys()\n    .forEach(\n      (moduleKey: string) =>\n        (importCache[moduleKey] = requireContext(moduleKey))\n    );\n  return importCache;\n}\n","import pathParse from \"path-parse\";\nimport { importAll } from \"app/common/webpack\";\n\ninterface Translations {\n  [key: string]: string | Translations;\n}\n\n// import json translations\nconst translations = importAll<Translations>(\n  require.context(\"../\", true, /\\/translations\\/.*\\.json$/)\n);\n\nconst flattenTranslations = (trans: Translations, keys: string[] = []) =>\n  Object.keys(trans).reduce((acc, key) => {\n    const currentKeys = [...keys, key];\n    const value = trans[key];\n    if (typeof value === \"object\")\n      acc = { ...acc, ...flattenTranslations(value, currentKeys) };\n    else acc[currentKeys.join(\".\")] = value;\n    return acc;\n  }, {} as Record<string, string>);\n\n// merge translation files with the same locale\nconst messageMap = Object.keys(translations).reduce((acc, filepath) => {\n  const locale = pathParse(filepath).name;\n  acc[locale] = {\n    ...acc[locale],\n    ...flattenTranslations(translations[filepath]),\n  };\n  return acc;\n}, {} as Record<string, Record<string, string>>);\n\nconst setLanguageDefault = (languageCode: string, preferredLocale: string) => {\n  const languageMessages = Object.keys(messageMap).filter((locale) =>\n    locale.toLocaleLowerCase().startsWith(languageCode)\n  );\n  if (languageMessages.length > 0 && !messageMap[languageCode]) {\n    if (languageMessages.includes(preferredLocale)) {\n      messageMap[languageCode] = messageMap[preferredLocale];\n    } else {\n      messageMap[languageCode] = messageMap[languageMessages[0]];\n    }\n  }\n};\n\nsetLanguageDefault(\"en\", \"en-us\");\nsetLanguageDefault(\"es\", \"es-mx\");\n\nlet locale = navigator.language;\nlet messages = messageMap[locale.toLowerCase()];\nif (!messages) {\n  locale = \"en-US\";\n  messages = messageMap[locale.toLowerCase()];\n}\n\nexport { locale, messages };\n","import { ProviderContext } from \"notistack\";\nimport { takeEvery } from \"typed-redux-saga\";\nimport { SagaIterator } from \"redux-saga\";\n\nimport { enqueueSnackbar, closeSnackbar } from \"app/common/snackbar/actions\";\n\ntype enqueueAction = ReturnType<typeof enqueueSnackbar>;\ntype closeAction = ReturnType<typeof closeSnackbar>;\nfunction* processSnackbarActions(\n  snackbar: React.RefObject<ProviderContext>,\n  action: enqueueAction | closeAction\n) {\n  if (isEnqueueAction(action)) {\n    snackbar.current?.enqueueSnackbar(\n      action.payload.message,\n      action.payload.options\n    );\n  } else {\n    snackbar.current?.closeSnackbar(action.payload.key);\n  }\n}\n\nfunction isEnqueueAction(\n  action: enqueueAction | closeAction\n): action is enqueueAction {\n  return action.type === enqueueSnackbar.type;\n}\n\nexport function* watchSnackbarActions(\n  snackbar: React.RefObject<ProviderContext>\n): SagaIterator {\n  return yield* takeEvery(\n    [enqueueSnackbar, closeSnackbar],\n    processSnackbarActions,\n    snackbar\n  );\n}\n","import { ApplicationState } from \"app/common/store\";\nimport { RobotState } from \"app/robot/store/types\";\n\nexport const getRobotDevice = (state: ApplicationState): RobotState[\"device\"] =>\n  state.robot.device;\n\nexport const getRobotServer = (\n  state: ApplicationState\n): BluetoothRemoteGATTServer | null => {\n  const robotDevice = getRobotDevice(state);\n  return robotDevice && robotDevice.gatt?.connected ? robotDevice.gatt : null;\n};\n","import React, { useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { IconButton } from \"@material-ui/core\";\nimport { BluetoothConnected, Bluetooth } from \"@material-ui/icons\";\n\nimport { bluetoothDeviceSelected } from \"app/robot/store/actions\";\nimport { getRobotDevice } from \"app/robot/store/selectors\";\nimport {\n  PRIMARY_SERVICE,\n  DEVICE_INFO_SERVICE,\n} from \"app/robot/bluetooth-utils\";\n\nexport function RobotWidget(): JSX.Element {\n  const dispatch = useDispatch();\n  const robotDevice = useSelector(getRobotDevice);\n\n  const handleBluetoothClick = useCallback(async () => {\n    try {\n      const device = await navigator.bluetooth.requestDevice({\n        filters: [{ namePrefix: \"GAN-\" }],\n        optionalServices: [PRIMARY_SERVICE, DEVICE_INFO_SERVICE],\n      });\n      dispatch(bluetoothDeviceSelected(device));\n    } catch (e) {\n      // throws DOMException if user cancels device request\n      if (!(e instanceof DOMException)) console.error(e);\n    }\n  }, []);\n  return (\n    <IconButton color=\"inherit\" onClick={handleBluetoothClick}>\n      {robotDevice ? <BluetoothConnected /> : <Bluetooth />}\n    </IconButton>\n  );\n}\n","// Numeric representation of the different powers of moves.\nconst powers: Record<string, number> = {\n  \"\": 0,\n  2: 1,\n  \"'\": 2,\n};\n\n/**\n * Check whether or not we are able to parse the given algorithm string.\n */\nexport const validateAlgorithm = (algorithm: string): boolean =>\n  /^([FRUBLDfrubldxyzMSE][2']?\\s*)+$/.test(algorithm);\n\n// Map single-power wide moves to a rotation + moves.\nconst wideMoves: Record<string, string[]> = {\n  f: [\"z\", \"B\"],\n  r: [\"x\", \"L\"],\n  u: [\"y\", \"D\"],\n  b: [\"z'\", \"F\"],\n  l: [\"x'\", \"R\"],\n  d: [\"y'\", \"U\"],\n  M: [\"x'\", \"R\", \"L'\"],\n  S: [\"z\", \"F'\", \"B\"],\n  E: [\"y'\", \"U\", \"D'\"],\n};\n\n// Specifies the translation of FRUBLD as performed by rotations.\nconst rotations: Record<string, string> = {\n  x: \"DRFULB\",\n  y: \"RBULFD\",\n  z: \"FULBDR\",\n};\n\n/**\n * Strip rotations and wide moves from an algorithm. Returns\n * an array of moves as strings.\n */\nconst normalize = (moves: string[]) => {\n  // Replace wide moves with rotations + moves.\n  moves = moves.reduce((acc: string[], move: string) => {\n    const axis: keyof typeof wideMoves = move.charAt(0);\n    const pow = move.charAt(1);\n\n    if (wideMoves[axis]) {\n      return acc.concat(wideMoves[axis].map((m) => m + pow));\n    }\n\n    return acc.concat(move);\n  }, []);\n\n  let output: string[] = [];\n\n  // We store all rotations that were encountered, to map the\n  // solution to the same final rotation as the scramble.\n  const totalRotation: string[] = [];\n\n  // Remove rotations by mapping all moves to the right of the rotation.\n  for (let i = moves.length - 1; i >= 0; i -= 1) {\n    const axis = moves[i].charAt(0);\n    const pow = powers[moves[i].charAt(1)];\n\n    if (\"xyz\".includes(axis)) {\n      totalRotation.unshift(moves[i]);\n\n      for (let j = 0; j <= pow; j += 1) {\n        output = output.map(\n          (outputMove) =>\n            rotations[axis][\"FRUBLD\".indexOf(outputMove[0])] +\n            outputMove.charAt(1)\n        );\n      }\n    } else {\n      output.unshift(moves[i]);\n    }\n  }\n\n  return [output, totalRotation];\n};\n\n/**\n * Parses a scramble, returning an array of integers describing the moves.\n */\nexport function parseAlgorithm(algorithm: string): number[];\nexport function parseAlgorithm(\n  algorithm: string,\n  returnTotalRotation: boolean\n): [number[], string[]];\nexport function parseAlgorithm(\n  algorithm: string,\n  returnTotalRotation = false\n): number[] | [number[], string[]] {\n  if (!validateAlgorithm(algorithm)) {\n    throw new Error(\"Invalid algorithm provided to algorithm parser\");\n  }\n\n  const result: number[] = [];\n\n  const [moves, totalRotation] = normalize(\n    algorithm.match(/[FRUBLDfrubldxyzMSE][2']?/g) || []\n  );\n\n  moves.forEach((move) => {\n    const moveNum = \"FRUBLD\".indexOf(move.charAt(0));\n    const pow = powers[move.charAt(1)];\n    result.push(moveNum * 3 + pow);\n  });\n\n  if (returnTotalRotation) {\n    return [result, totalRotation];\n  }\n\n  return result;\n}\n\n/**\n * Computes the inverse of a given algorithm. Rotations are supported.\n */\nexport const invertAlgorithm = (algorithm: string): string => {\n  if (!validateAlgorithm(algorithm)) {\n    throw new Error(\"Invalid algorithm provided to algorithm parser\");\n  }\n\n  const moves = algorithm.match(/[FRUBLDfrubldxyzMSE][2']?/g) || [];\n\n  const inverted = moves.reverse().map((move) => {\n    const axis = move.charAt(0);\n    const pow = powers[move.charAt(1)];\n    const inv = pow - 2 * (pow % 3) + 2;\n\n    if (inv === 1) {\n      return `${axis}2`;\n    }\n\n    if (inv === 2) {\n      return `${axis}'`;\n    }\n\n    return axis;\n  });\n\n  return inverted.join(\" \");\n};\n\n/**\n * Convert an array of integers to a human-readable representation.\n */\nexport const formatAlgorithm = (moves: number[]): string => {\n  let sequence = \"\";\n\n  moves.forEach((move) => {\n    sequence += \" \";\n    sequence += \"FRUBLD\".charAt(Math.floor(move / 3));\n\n    switch (move % 3) {\n      case 1:\n        sequence += \"2\";\n        break;\n\n      case 2:\n        sequence += \"'\";\n        break;\n\n      default:\n    }\n  });\n\n  // Trim extra spaces.\n  return sequence.trim();\n};\n","import { parseAlgorithm } from \"./algorithms\";\n\nexport const Centers = {\n  U: 0,\n  R: 1,\n  F: 2,\n  D: 3,\n  L: 4,\n  B: 5,\n};\n\nexport const Edges = {\n  UR: 0,\n  UF: 1,\n  UL: 2,\n  UB: 3,\n  DR: 4,\n  DF: 5,\n  DL: 6,\n  DB: 7,\n  FR: 8,\n  FL: 9,\n  BL: 10,\n  BR: 11,\n};\n\nexport const Corners = {\n  URF: 0,\n  UFL: 1,\n  ULB: 2,\n  UBR: 3,\n  DFR: 4,\n  DLF: 5,\n  DBL: 6,\n  DBR: 7,\n};\n\nconst { UR, UF, UL, UB, DR, DF, DL, DB, FR, FL, BL, BR } = Edges;\nconst { URF, UFL, ULB, UBR, DFR, DLF, DBL, DBR } = Corners;\n\nexport interface CubeIndexes {\n  ep: number[];\n  eo: number[];\n  cp: number[];\n  co: number[];\n}\n\n// The identity cube.\nexport const identity: CubeIndexes = {\n  ep: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],\n  eo: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n  cp: [0, 1, 2, 3, 4, 5, 6, 7],\n  co: [0, 0, 0, 0, 0, 0, 0, 0],\n};\n\nexport const moves = [\n  // F\n  {\n    cp: [UFL, DLF, 2, 3, URF, DFR, 6, 7],\n    co: [1, 2, 0, 0, 2, 1, 0, 0],\n    ep: [0, FL, 2, 3, 4, FR, 6, 7, UF, DF, 10, 11],\n    eo: [0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0],\n  },\n\n  // R\n  {\n    cp: [DFR, 1, 2, URF, DBR, 5, 6, UBR],\n    co: [2, 0, 0, 1, 1, 0, 0, 2],\n    ep: [FR, 1, 2, 3, BR, 5, 6, 7, DR, 9, 10, UR],\n    eo: identity.eo,\n  },\n\n  // U\n  {\n    cp: [UBR, URF, UFL, ULB, 4, 5, 6, 7],\n    co: identity.co,\n    ep: [UB, UR, UF, UL, 4, 5, 6, 7, 8, 9, 10, 11],\n    eo: identity.eo,\n  },\n\n  // B\n  {\n    cp: [0, 1, UBR, DBR, 4, 5, ULB, DBL],\n    co: [0, 0, 1, 2, 0, 0, 2, 1],\n    ep: [0, 1, 2, BR, 4, 5, 6, BL, 8, 9, UB, DB],\n    eo: [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1],\n  },\n\n  // L\n  {\n    cp: [0, ULB, DBL, 3, 4, UFL, DLF, 7],\n    co: [0, 1, 2, 0, 0, 2, 1, 0],\n    ep: [0, 1, BL, 3, 4, 5, FL, 7, 8, UL, DL, 11],\n    eo: identity.eo,\n  },\n\n  // D\n  {\n    cp: [0, 1, 2, 3, DLF, DBL, DBR, DFR],\n    co: identity.co,\n    ep: [0, 1, 2, 3, DF, DL, DB, DR, 8, 9, 10, 11],\n    eo: identity.eo,\n  },\n];\n\nexport const allMoves = [\n  0, // F\n  1,\n  2,\n  3, // R\n  4,\n  5,\n  6, // U\n  7,\n  8,\n  9, // B\n  10,\n  11,\n  12, // L\n  13,\n  14,\n  15, // D\n  16,\n  17,\n];\n\nexport const fiveSideMoves = [\n  3,\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  10,\n  11,\n  12,\n  13,\n  14,\n  15,\n  16,\n  17,\n];\n\nexport const moveHelper = <T>(\n  cube: T,\n  moveIndex: number,\n  fn: (cube: T, move: CubeIndexes) => T\n): T => {\n  const move = moves[Math.floor(moveIndex / 3)];\n  const pow = (moveIndex % 3) + 1;\n  for (let i = 0; i < pow; i++) {\n    cube = fn(cube, move);\n  }\n  return cube;\n};\n\nexport const doEdgeMove = (\n  cube: Pick<CubeIndexes, \"eo\" | \"ep\">,\n  move: CubeIndexes\n): typeof cube =>\n  move.ep.reduce(\n    (newCube, fromIndex, toIndex) => {\n      newCube.ep[toIndex] = cube.ep[fromIndex];\n      newCube.eo[toIndex] = (cube.eo[fromIndex] + move.eo[toIndex]) % 2;\n      return newCube;\n    },\n    {\n      ep: new Array(12),\n      eo: new Array(12),\n    }\n  );\n\nexport const doCornerMove = (\n  cube: Pick<CubeIndexes, \"co\" | \"cp\">,\n  move: CubeIndexes\n): typeof cube =>\n  move.cp.reduce(\n    (newCube, fromIndex, toIndex) => {\n      newCube.cp[toIndex] = cube.cp[fromIndex];\n      newCube.co[toIndex] = (cube.co[fromIndex] + move.co[toIndex]) % 3;\n      return newCube;\n    },\n    {\n      cp: new Array(8),\n      co: new Array(8),\n    }\n  );\n\nexport const doMove = (cube: CubeIndexes, moveIndex: number): CubeIndexes => {\n  return {\n    ...moveHelper(cube, moveIndex, doCornerMove),\n    ...moveHelper(cube, moveIndex, doEdgeMove),\n  };\n};\n\nexport const doAlgorithm = (algorithm: string, cube = identity): CubeIndexes =>\n  !algorithm ? cube : parseAlgorithm(algorithm).reduce(doMove, cube);\n","const factorials: number[] = [];\n\n/**\n * Calculates n factorial and attempts to cache\n * as much information as possible.\n */\nexport const factorial = (n: number): number => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n\n  if (factorials[n] > 0) {\n    return factorials[n];\n  }\n\n  factorials[n] = factorial(n - 1) * n;\n\n  return factorials[n];\n};\n\nconst binomials: number[][] = [];\n\n/**\n * Calculates n choose k using cached binomial numbers.\n */\nexport const choose = (n: number, k: number): number => {\n  if (k > n) {\n    return 0;\n  }\n\n  while (n >= binomials.length) {\n    const s = binomials.length;\n    const nextRow = [];\n\n    nextRow[0] = 1;\n\n    for (let i = 1, prev = s - 1; i < s; i += 1) {\n      nextRow[i] = binomials[prev][i - 1] + binomials[prev][i];\n    }\n\n    nextRow[s] = 1;\n\n    binomials.push(nextRow);\n  }\n\n  return binomials[n][k];\n};\n\n/**\n * Cartesian product of a given nested array.\n */\nexport const cartesian = (arg: number[][]): number[][] => {\n  const result: number[][] = [];\n  const max = arg.length - 1;\n\n  const helper = (arr: number[], i: number) => {\n    for (let j = 0; j < arg[i].length; j += 1) {\n      const copy = arr.slice(0);\n\n      copy.push(arg[i][j]);\n\n      if (i === max) {\n        result.push(copy);\n      } else {\n        helper(copy, i + 1);\n      }\n    }\n  };\n\n  helper([], 0);\n\n  return result;\n};\n\n// Ger a random integer in the provided range, inclusive.\nexport const getRandomInt = (min: number, max: number): number =>\n  Math.floor(Math.random() * (max - min + 1)) + min;\n\nexport const permute = (n: number, r: number): number =>\n  factorial(n) / factorial(n - r);\n\n/**\n * Rotates the subarray containing the affected pieces\n * to the right by one.\n */\nexport const rotateParts = (pieces: number[], affected: number[]): number[] => {\n  const updatedPieces = pieces.slice(0);\n\n  updatedPieces[affected[0]] = pieces[affected[affected.length - 1]];\n\n  for (let i = 1; i < affected.length; i += 1) {\n    updatedPieces[affected[i]] = pieces[affected[i - 1]];\n  }\n\n  return updatedPieces;\n};\n","import { factorial, choose } from \"app/common/cube/libs/tools\";\n\n/**\n * In-place rotation of the subarray determined by the two\n * indexes left and right to the left by one.\n */\nconst rotateLeft = (pieces: number[], left: number, right: number): void => {\n  const original = pieces[left];\n\n  for (let i = left; i < right; i += 1) {\n    pieces[i] = pieces[i + 1];\n  }\n\n  pieces[right] = original;\n};\n\n/**\n * In-place rotation of the subarray determined by the two\n * indexes left and right to the right by one.\n */\nconst rotateRight = (pieces: number[], left: number, right: number): void => {\n  const original = pieces[right];\n\n  for (let i = right; i > left; i -= 1) {\n    pieces[i] = pieces[i - 1];\n  }\n\n  pieces[left] = original;\n};\n\n/**\n * Bijection which encodes a given orientation vector to an unique index.\n * The flip count is the number of ways in which a single piece in the\n * orientation vector may be oriented. For edges, this number is 2 flips,\n * and for corners there are 3 possible twists. Thus, edges are encoded\n * using a binary number system, and corners using a trinary number system.\n */\nexport const getIndexFromOrientation = (\n  pieces: number[],\n  flipCount: number\n): number => {\n  let sum = 0;\n\n  // Note that we do not include the last element in the vector here.\n  // This is because the orientation of the last piece if determined\n  // by the orientation of all the other pieces - when you rotate any\n  // axis on the cube, only an even number of pieces is affected.\n  for (let i = 0; i < pieces.length - 1; i += 1) {\n    sum = flipCount * sum + pieces[i];\n  }\n\n  return sum;\n};\n\n/**\n * Returns the original orientation vector given the number which\n * describes it, the number of pieces in the vector, and the number\n * of ways in which an individual piece may be oriented.\n */\nexport const getOrientationFromIndex = (\n  index: number,\n  numPieces: number,\n  numFlips: number\n): number[] => {\n  const orientation = [];\n\n  let parity = 0;\n\n  for (let i = numPieces - 2; i >= 0; i -= 1) {\n    const ori = index % numFlips;\n    index = Math.floor(index / numFlips);\n    orientation[i] = ori;\n    parity += ori;\n  }\n\n  // Restore the last piece based on the orientation of the other pieces.\n  orientation[numPieces - 1] = (numFlips - (parity % numFlips)) % numFlips;\n\n  return orientation;\n};\n\n/**\n * Each move on a cube perform an even number of swaps when considering\n * both edges and corner pieces at the same time. Thus, only half of all\n * cube states are reachable using legal moves. This also implies that\n * for a cube to be solvable, the parity of both corners and edges must\n * both be either even or odd. We use this to verify that a cube is\n * solvable when generating random state scrambles, and also to\n * describe the overall cube permutation using only 10 edges, 6 corners\n * and the parity of either the corners or the edges.\n */\nexport const getParity = (pieces: number[]): number => {\n  let sum = 0;\n\n  for (let i = pieces.length - 1; i > 0; i -= 1) {\n    for (let j = i - 1; j >= 0; j -= 1) {\n      if (pieces[j] > pieces[i]) {\n        sum += 1;\n      }\n    }\n  }\n\n  return sum % 2;\n};\n\n/**\n * Encodes the permutation of the affected pieces within the entire\n * permutation vector, by encoding both their position and then the\n * permutation of the affected pieces within the permutation vector\n * using a variable-base number system. If reversed is true, the\n * values are assigned right-to-left. This is used in the Kociemba\n * solver, so that 0 is used as the solved coordinate for the move\n * table describing the UD-slice edges.\n */\nexport const getIndexFromPermutation = (\n  pieces: number[],\n  affected: number[],\n  reversed = false\n): number => {\n  let offset = pieces.length - 1;\n  let position = 0;\n  let k = 1;\n\n  // Store the permutation of the subarray containing\n  // only the affected pieces.\n  const edges = [];\n\n  // Encode the position of the affected pieces in a number\n  // from 0 up to n choose k, where n is the number of pieces\n  // in the permutation vector and k is the number of affected pieces.\n  if (reversed) {\n    for (let n = pieces.length - 1; n >= 0; n -= 1) {\n      if (affected.indexOf(pieces[n]) >= 0) {\n        offset = Math.min(offset, pieces[n]);\n        position += choose(pieces.length - 1 - n, k);\n        edges.unshift(pieces[n]);\n        k += 1;\n      }\n    }\n  } else {\n    for (let n = 0; n < pieces.length; n += 1) {\n      if (affected.indexOf(pieces[n]) >= 0) {\n        offset = Math.min(offset, pieces[n]);\n        position += choose(n, k);\n        edges.push(pieces[n]);\n        k += 1;\n      }\n    }\n  }\n\n  let permutation = 0;\n\n  // Encode the position of the subarray as a number from 0 and up\n  // to n factorial, where n is the number of affected pieces.\n  for (let i = edges.length - 1; i > 0; i -= 1) {\n    let s = 0;\n\n    while (edges[i] !== affected[i]) {\n      rotateLeft(edges, 0, i);\n      s += 1;\n    }\n\n    permutation = (i + 1) * permutation + s;\n  }\n\n  // Encode both the position and the permutation\n  // as a number using a variable base.\n  return factorial(affected.length) * position + permutation;\n};\n\n/**\n * Restores the permutation described by an index, number of affected\n * pieces and the permutation vector size. If reversed is true, the\n * indexes have been assigned right-to-left.\n */\nexport const getPermutationFromIndex = (\n  index: number,\n  affected: number[],\n  size: number,\n  reversed = false\n): number[] => {\n  const base = factorial(affected.length);\n\n  let position = Math.floor(index / base);\n  let permutation = index % base;\n\n  const pieces = [];\n\n  for (let i = 0; i < size; i += 1) {\n    pieces.push(-1);\n  }\n\n  for (let i = 1; i < affected.length; i += 1) {\n    let s = permutation % (i + 1);\n    permutation = Math.floor(permutation / (i + 1));\n\n    while (s > 0) {\n      rotateRight(affected, 0, i);\n      s -= 1;\n    }\n  }\n\n  let k = affected.length - 1;\n\n  if (reversed) {\n    for (let n = 0; n < size; n += 1) {\n      const binomial = choose(size - 1 - n, k + 1);\n\n      if (position - binomial >= 0) {\n        pieces[n] = affected[affected.length - 1 - k];\n        position -= binomial;\n        k -= 1;\n      }\n    }\n  } else {\n    for (let n = size - 1; n >= 0; n -= 1) {\n      const binomial = choose(n, k + 1);\n\n      if (position - binomial >= 0) {\n        pieces[n] = affected[k];\n        position -= binomial;\n        k -= 1;\n      }\n    }\n  }\n\n  return pieces;\n};\n","import {\n  CubeIndexes,\n  Corners,\n  Edges,\n  doAlgorithm,\n} from \"app/common/cube/libs/cube\";\n\nconst arePiecesPermutated = (\n  cubeState: CubeIndexes,\n  edges: number[],\n  corners: number[]\n) => {\n  for (const edgeIdx of edges)\n    if (cubeState.ep[edgeIdx] !== edgeIdx) return false;\n  for (const cornerIdx of corners)\n    if (cubeState.cp[cornerIdx] !== cornerIdx) return false;\n  return true;\n};\n\nconst arePiecesOriented = (\n  cubeState: CubeIndexes,\n  edges: number[],\n  corners: number[]\n) => {\n  for (const edgeIdx of edges) if (cubeState.eo[edgeIdx] !== 0) return false;\n  for (const cornerIdx of corners)\n    if (cubeState.co[cornerIdx] !== 0) return false;\n  return true;\n};\n\nconst arePiecesPermutatedAndOriented = (\n  cubeState: CubeIndexes,\n  edges: number[],\n  corners: number[]\n) =>\n  arePiecesOriented(cubeState, edges, corners) &&\n  arePiecesPermutated(cubeState, edges, corners);\n\nexport const isCrossSolved = (cubeState: CubeIndexes): boolean =>\n  arePiecesPermutatedAndOriented(\n    cubeState,\n    [Edges.DB, Edges.DF, Edges.DL, Edges.DR],\n    []\n  );\n\nexport const isTopCrossSolved = (cubeState: CubeIndexes): boolean =>\n  arePiecesPermutatedAndOriented(\n    cubeState,\n    [Edges.DB, Edges.DF, Edges.DL, Edges.DR],\n    []\n  );\n\nexport const isF2LSolved = (cubeState: CubeIndexes): boolean =>\n  isCrossSolved(cubeState) &&\n  arePiecesPermutatedAndOriented(\n    cubeState,\n    [Edges.BL, Edges.BR, Edges.FL, Edges.FR],\n    [Corners.DBL, Corners.DBR, Corners.DFR, Corners.DLF]\n  );\n\nexport const isFirstLookOLLSolved = (cubeState: CubeIndexes): boolean =>\n  isF2LSolved(cubeState) &&\n  arePiecesOriented(cubeState, [Edges.UB, Edges.UF, Edges.UL, Edges.UR], []);\n\nexport const isOLLSolved = (cubeState: CubeIndexes): boolean =>\n  isF2LSolved(cubeState) &&\n  arePiecesOriented(\n    cubeState,\n    [Edges.UB, Edges.UF, Edges.UL, Edges.UR],\n    [Corners.UBR, Corners.UFL, Corners.ULB, Corners.URF]\n  );\n\nexport const isFirstLookPLLSolved = (cubeState: CubeIndexes): boolean => {\n  let rotation = 0;\n  do {\n    if (\n      isOLLSolved(cubeState) &&\n      arePiecesPermutated(\n        cubeState,\n        [],\n        [Corners.UBR, Corners.UFL, Corners.ULB, Corners.URF]\n      )\n    )\n      return true;\n    cubeState = doAlgorithm(\"U\", cubeState);\n    rotation += 90;\n  } while (rotation < 360);\n  return false;\n};\n\nexport const isCubeSolved = (cubeState: CubeIndexes): boolean =>\n  isF2LSolved(cubeState) &&\n  arePiecesPermutatedAndOriented(\n    cubeState,\n    [Edges.UB, Edges.UF, Edges.UL, Edges.UR],\n    [Corners.UBR, Corners.UFL, Corners.ULB, Corners.URF]\n  );\n","import { doAlgorithm, identity, CubeIndexes } from \"app/common/cube/libs/cube\";\nimport {\n  getIndexFromOrientation,\n  getIndexFromPermutation,\n} from \"app/common/cube/libs/coordinates\";\nimport { isTopCrossSolved } from \"app/common/cube/scramblers/solve-criteria\";\n\nconst cubeFaces = [\"D\", \"L\", \"B\", \"U\", \"R\", \"F\"];\nconst moveModifiers = [\"\", \"2\", \"'\"];\n\nexport function generateScramble(\n  total = 24,\n  isSolved: (state: CubeIndexes) => boolean = isTopCrossSolved\n): string {\n  return scramble(total, isSolved).join(\" \");\n}\n\nconst scramble = (\n  total: number,\n  isSolved: (state: CubeIndexes) => boolean\n): string[] => {\n  const previousCubeStates = new Set();\n  let currentState = identity;\n  const moves = [];\n\n  while (moves.length < total) {\n    // Generate a random move\n    const move =\n      cubeFaces[Math.floor(Math.random() * 6)] +\n      moveModifiers[Math.floor(Math.random() * 3)];\n    if (move.charAt(0) === \"U\") {\n      continue;\n    }\n    // Don't move the same face twice in a row\n    if (\n      moves.length > 0 &&\n      move.charAt(0) === moves[moves.length - 1].charAt(0)\n    ) {\n      continue;\n    }\n    // Avoid move sequences like \"R L R\", which is the same as \"R2 L\"\n    if (\n      moves.length > 1 &&\n      move.charAt(0) === moves[moves.length - 2].charAt(0) &&\n      moves[moves.length - 1].charAt(0) ===\n        cubeFaces[(cubeFaces.indexOf(move.charAt(0)) + 3) % 6]\n    ) {\n      continue;\n    }\n\n    // ensure state has not been repeated earlier in the scramble\n    const newState = doAlgorithm(move, currentState);\n    const stateHashCode = getStateHashCode(newState);\n    if (!previousCubeStates.has(stateHashCode)) {\n      moves.push(move);\n      previousCubeStates.add(stateHashCode);\n      currentState = newState;\n    }\n  }\n  return isSolved(currentState) ? scramble(total, isSolved) : moves;\n};\n\nconst getStateHashCode = (cubeState: CubeIndexes) => {\n  const cpIndex = getIndexFromPermutation(cubeState.cp, identity.cp);\n  const coIndex = getIndexFromOrientation(cubeState.co, 3);\n  const epIndex = getIndexFromPermutation(cubeState.ep, identity.ep);\n  const eoIndex = getIndexFromOrientation(cubeState.co, 2);\n  return `${cpIndex}:${coIndex}:${epIndex}:${eoIndex}`;\n};\n","import {\n  getIndexFromPermutation,\n  getPermutationFromIndex,\n  getIndexFromOrientation,\n  getParity,\n} from \"app/common/cube/libs/coordinates\";\n\nimport {\n  MoveTable,\n  createEdgePermutationTable,\n  createCornerPermutationTable,\n  createEdgeOrientationTable,\n  createCornerOrientationTable,\n} from \"app/common/cube/libs/move-table\";\n\nimport Search, { SearchSolution } from \"app/common/cube/libs/search\";\n\nimport { fiveSideMoves, CubeIndexes } from \"app/common/cube/libs/cube\";\n\n// In phase two, only quarter moves of U and D and double turns of\n// all the other faces are allowed, in order to keep the cube in\n// the phase two group G1.\nconst phaseTwoMoves = [10, 4, 13, 6, 7, 8, 15, 16, 17];\n\n// The following tables are being used in both phases.\nlet parity: MoveTable;\nlet URFToDLF: MoveTable;\nlet slice: MoveTable;\nlet merge: number[][];\n\nconst phaseTwoSearch = new Search(() => {\n  // In order to start phase two, we need to know the positions\n  // in which the pieces landed after solving the cube into G1.\n  // Since returning to the cubie level to perform the solution\n  // would be slow, we use two helper tables in phase one which\n  // later are merged into the final phase two coordinate.\n  const getMergeCoord = (x: number, y: number) => {\n    const a = getPermutationFromIndex(x, [0, 1, 2], 12);\n    const b = getPermutationFromIndex(y, [3, 4, 5], 12);\n\n    for (let i = 0; i < 8; i += 1) {\n      if (a[i] !== -1) {\n        if (b[i] !== -1) {\n          return -1;\n        }\n        b[i] = a[i];\n      }\n    }\n\n    return getIndexFromPermutation(b, [0, 1, 2, 3, 4, 5]);\n  };\n\n  merge = [];\n\n  // Due to the sorted nature of our coordinate definitions, the\n  // index of both the coordinates will be less than 336 when phase\n  // one is finished. This allows for a pretty small merging table.\n  for (let i = 0; i < 336; i += 1) {\n    merge.push([]);\n\n    for (let j = 0; j < 336; j += 1) {\n      merge[i][j] = getMergeCoord(i, j);\n    }\n  }\n\n  return {\n    moveTables: [\n      // The permutation of the slice pices, which already\n      // are in the correct positions on the cube.\n      new MoveTable({\n        name: \"slicePermutation\",\n        size: 24,\n        table: slice.table,\n      }),\n\n      parity,\n      URFToDLF,\n\n      createEdgePermutationTable({\n        name: \"URToDF\",\n        size: 20160,\n        moves: phaseTwoMoves,\n        affected: [0, 1, 2, 3, 4, 5],\n      }),\n    ],\n\n    pruningTables: [\n      [\"slicePermutation\", \"parity\", \"URFToDLF\"],\n      [\"slicePermutation\", \"parity\", \"URToDF\"],\n    ],\n  };\n}, phaseTwoMoves);\n\nclass TwoPhaseSearch extends Search {\n  maxDepth: number;\n  solution: number[];\n\n  constructor(...args: ConstructorParameters<typeof Search>) {\n    super(...args);\n\n    this.maxDepth = 40;\n    this.solution = [];\n  }\n\n  handleSolution(\n    solution: number[],\n    indexes: number[]\n  ): SearchSolution | false {\n    const lastMove = solution.slice(-1)[0];\n\n    // We do not allow solutions which end in a phase two move, as we then\n    // would end up duplicating work.\n    if (\n      lastMove % 2 === 0 &&\n      Math.floor(lastMove / 3) === 6 &&\n      Math.floor(lastMove / 3) === 15\n    ) {\n      return false;\n    }\n\n    const phaseTwoSolution = phaseTwoSearch.solve({\n      indexes: [\n        indexes[3],\n        indexes[4],\n        indexes[5],\n        merge[indexes[6]][indexes[7]],\n      ],\n      maxDepth: this.maxDepth - solution.length,\n      lastMove,\n      format: false,\n    });\n\n    if (phaseTwoSolution) {\n      this.solution = solution.concat(phaseTwoSolution.solution);\n\n      if (this.maxDepth <= this.settings.maxDepth) {\n        return {\n          solution: this.solution,\n          indexes,\n        };\n      }\n\n      this.maxDepth = this.solution.length - 1;\n    }\n\n    return false;\n  }\n}\n\nexport const fiveSideSearch = new TwoPhaseSearch(() => {\n  // The parity move table is so small that we inline it. It\n  // describes the parity of both the edge and corner pieces,\n  // which must be equal for the cube to be solvable. The\n  // coordinate is included in both phases, but only used\n  // in phase two.\n  parity = new MoveTable({\n    name: \"parity\",\n\n    size: 2,\n\n    table: [\n      [1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1],\n      [0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0],\n    ],\n  });\n\n  URFToDLF = createCornerPermutationTable({\n    name: \"URFToDLF\",\n    affected: [0, 1, 2, 3, 4, 5],\n  });\n\n  // This table is not used directly. This coordinate modulo 24 gives the\n  // permutation of the subarray containing the UD-slice pieces, while this\n  // coordinate divided by 24 gives the position of the UD-slice pieces.\n  // Two smaller move tables are created using this table, one to solve the\n  // position of the UD-slice pieces in phase one, and one to solve the\n  // pieces in phase two. Due to the reduced move set in phase two, the pruning\n  // table for this coordinate is smaller than it would normally be.\n  slice = createEdgePermutationTable({\n    name: \"slice\",\n    affected: [8, 9, 10, 11],\n    reversed: true,\n  });\n\n  // Initialize phase two, since it now is guaranteed that the\n  // heper move tables have finished generating.\n  phaseTwoSearch.initialize();\n\n  return {\n    moveTables: [\n      new MoveTable({\n        // The position of the slice edges. When this coordinate is\n        // solved, the UD-slice pieces are in the UD-slice, but they\n        // are not necessarily permuted.\n        name: \"slicePosition\",\n        size: 495,\n        table: slice.table,\n        doMove: (table, index, move) =>\n          Math.floor(table[index * 24][move] / 24),\n      }),\n\n      createCornerOrientationTable({\n        name: \"twist\",\n        affected: [0, 1, 2, 3, 4, 5, 6, 7],\n      }),\n\n      createEdgeOrientationTable({\n        name: \"flip\",\n        affected: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],\n      }),\n\n      slice,\n      parity,\n      URFToDLF,\n\n      createEdgePermutationTable({\n        name: \"URToUL\",\n        affected: [0, 1, 2],\n      }),\n\n      createEdgePermutationTable({\n        name: \"UBToDF\",\n        affected: [3, 4, 5],\n      }),\n    ],\n\n    pruningTables: [\n      [\"slicePosition\", \"flip\"],\n      [\"slicePosition\", \"twist\"],\n    ],\n  };\n}, fiveSideMoves);\n\nexport const fiveSideSolver = (\n  scramble: string | number[],\n  maxDepth = 40\n): false | string => {\n  if (Array.isArray(scramble)) {\n    return fiveSideSearch.solve({\n      indexes: scramble,\n      maxDepth,\n    });\n  }\n\n  return fiveSideSearch.solve({\n    scramble,\n    maxDepth,\n  });\n};\n\nexport const solveCube = (\n  cubeState: CubeIndexes\n): ReturnType<typeof fiveSideSolver> =>\n  fiveSideSolver([\n    Math.floor(\n      getIndexFromPermutation(cubeState.ep, [8, 9, 10, 11], true) / 24\n    ),\n    getIndexFromOrientation(cubeState.co, 3),\n    getIndexFromOrientation(cubeState.eo, 2),\n    getIndexFromPermutation(cubeState.ep, [8, 9, 10, 11], true),\n    getParity(cubeState.cp),\n    getIndexFromPermutation(cubeState.cp, [0, 1, 2, 3, 4, 5]),\n    getIndexFromPermutation(cubeState.ep, [0, 1, 2]),\n    getIndexFromPermutation(cubeState.ep, [3, 4, 5]),\n  ]);\n","import {\n  getPermutationFromIndex,\n  getIndexFromPermutation,\n  getOrientationFromIndex,\n  getIndexFromOrientation,\n} from \"./coordinates\";\n\nimport {\n  doEdgeMove,\n  doCornerMove,\n  moveHelper,\n  allMoves,\n  identity,\n} from \"./cube\";\n\nimport { factorial } from \"./tools\";\n\n/**\n * Create a function which performs a move on a coordinate.\n */\nconst createMoveHandler = (\n  getVector: GetVectorCallback,\n  cubieMove: CubieMoveCallback,\n  getIndex: GetIndexCallback\n) => (index: number, move: number) => {\n  let vector = getVector(index);\n  vector = cubieMove(vector, move);\n  return getIndex(vector);\n};\n\ntype GetVectorCallback = (index: number) => number[];\ntype CubieMoveCallback = (pieces: number[], moveIndex: number) => number[];\ntype GetIndexCallback = (pieces: number[]) => number;\n\ninterface BaseMoveTableSettings {\n  name: string;\n  size: number;\n  defaultIndex?: number;\n  solvedIndexes?: number[];\n  doMove?: (table: number[][], index: number, move: number) => number;\n}\n\ninterface MoveTableSettingsWithTable extends BaseMoveTableSettings {\n  table: number[][];\n}\n\nexport interface MoveTableSettingsWithoutTable extends BaseMoveTableSettings {\n  moves?: number[];\n  getVector: GetVectorCallback;\n  cubieMove: (pieces: number[], moveIndex: number) => number[];\n  getIndex: GetIndexCallback;\n}\n\nexport type MoveTableSettings =\n  | MoveTableSettingsWithTable\n  | MoveTableSettingsWithoutTable;\n\nexport class MoveTable {\n  name: string;\n  size: number;\n  defaultIndex: number;\n  solvedIndexes: number[];\n  table: number[][];\n\n  constructor(settings: MoveTableSettings) {\n    // A name must be provided if the generic solver is being used, as\n    // we use them to create the pruning tables.\n    this.name = settings.name;\n\n    // Some tables in the Kociemba solver define their own size, as\n    // they are a subset of another already generated helper table.\n    this.size = settings.size;\n\n    this.defaultIndex = settings.defaultIndex || 0;\n    this.solvedIndexes = settings.solvedIndexes || [this.defaultIndex];\n\n    // We allow defining a custom function that returns the updated\n    // index. This is useful for helper tables which are subsets\n    // of already generated tables.\n    const doMove = settings.doMove;\n    if (doMove) {\n      this.doMove = (index, move) => doMove(this.table, index, move);\n    }\n\n    if (\"table\" in settings) {\n      this.table = settings.table;\n\n      // If a pre-generated table is provide, do not generate another one.\n      return;\n    }\n\n    const cubieMove = createMoveHandler(\n      settings.getVector,\n      settings.cubieMove,\n      settings.getIndex\n    );\n\n    this.table = this.createMoveTable(settings.size, cubieMove, settings.moves);\n  }\n\n  doMove(index: number, move: number): number {\n    return this.table[index][move];\n  }\n\n  createMoveTable(\n    size: number,\n    cubieMove: ReturnType<typeof createMoveHandler>,\n    moves = allMoves\n  ): number[][] {\n    const table: number[][] = [];\n\n    for (let i = 0; i < size; i += 1) {\n      table.push([]);\n    }\n\n    // Create a matrix which stores the result after\n    // applying a move to a coordinate.\n    for (let i = 0; i < size; i += 1) {\n      for (let j = 0; j < moves.length; j += 1) {\n        const move = moves[j];\n\n        if (!table[i][move]) {\n          // Assign both the value and its inverse at once\n          // to avoid exess computing on the cubie level.\n          const result = cubieMove(i, move);\n          const inverse = move - 2 * (move % 3) + 2;\n          table[i][move] = result;\n          table[result][inverse] = i;\n        }\n      }\n    }\n\n    return table;\n  }\n}\n\nexport interface PermutationTableSettings {\n  name: string;\n  moves?: number[];\n  affected: number[];\n  reversed?: boolean;\n  size?: number;\n}\n\nexport const createCornerPermutationTable = (\n  settings: PermutationTableSettings\n): MoveTable =>\n  new MoveTable({\n    name: settings.name,\n    moves: settings.moves,\n    defaultIndex: getIndexFromPermutation(\n      [0, 1, 2, 3, 4, 5, 6, 7],\n      settings.affected,\n      settings.reversed\n    ),\n    size:\n      settings.size || factorial(8) / factorial(8 - settings.affected.length),\n    getVector: (index) =>\n      getPermutationFromIndex(\n        index,\n        settings.affected.slice(),\n        8,\n        settings.reversed\n      ),\n    cubieMove: (pieces, moveIndex) =>\n      moveHelper({ cp: pieces, co: identity.co }, moveIndex, doCornerMove).cp,\n    getIndex: (pieces) =>\n      getIndexFromPermutation(pieces, settings.affected, settings.reversed),\n  });\n\nexport const createEdgePermutationTable = (\n  settings: PermutationTableSettings\n): MoveTable =>\n  new MoveTable({\n    name: settings.name,\n    moves: settings.moves,\n    defaultIndex: getIndexFromPermutation(\n      [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],\n      settings.affected,\n      settings.reversed\n    ),\n    size:\n      settings.size || factorial(12) / factorial(12 - settings.affected.length),\n    getVector: (index) =>\n      getPermutationFromIndex(\n        index,\n        settings.affected.slice(),\n        12,\n        settings.reversed\n      ),\n    cubieMove: (pieces, moveIndex) =>\n      moveHelper({ ep: pieces, eo: identity.eo }, moveIndex, doEdgeMove).ep,\n    getIndex: (pieces) =>\n      getIndexFromPermutation(pieces, settings.affected, settings.reversed),\n  });\n\nconst getCorrectOrientations = (\n  affected: number[],\n  numPieces: number,\n  numStates: number\n) => {\n  const indexes = [];\n\n  const size = numStates ** (numPieces - 1);\n\n  const target = numStates ** (numPieces - affected.length - 1);\n\n  for (let i = 0; i < size && indexes.length < target; i += 1) {\n    const orientation = getOrientationFromIndex(i, numPieces, numStates);\n\n    if (affected.every((piece) => orientation[piece] === 0)) {\n      indexes.push(i);\n    }\n  }\n\n  return indexes;\n};\n\nexport interface OrientationTableSettings {\n  name: string;\n  affected: number[];\n}\n\nexport const createEdgeOrientationTable = (\n  settings: OrientationTableSettings\n): MoveTable =>\n  new MoveTable({\n    name: settings.name,\n    size: 2048,\n    solvedIndexes: getCorrectOrientations(settings.affected, 12, 2),\n    getVector: (index) => getOrientationFromIndex(index, 12, 2),\n    cubieMove: (pieces, moveIndex) =>\n      moveHelper({ ep: identity.ep, eo: pieces }, moveIndex, doEdgeMove).eo,\n    getIndex: (pieces) => getIndexFromOrientation(pieces, 2),\n  });\n\nexport const createCornerOrientationTable = (\n  settings: OrientationTableSettings\n): MoveTable =>\n  new MoveTable({\n    name: settings.name,\n    size: 2187,\n    solvedIndexes: getCorrectOrientations(settings.affected, 8, 3),\n    getVector: (index) => getOrientationFromIndex(index, 8, 3),\n    cubieMove: (pieces, moveIndex) =>\n      moveHelper({ cp: identity.cp, co: pieces }, moveIndex, doCornerMove).co,\n    getIndex: (pieces) => getIndexFromOrientation(pieces, 3),\n  });\n","import { cartesian } from \"./tools\";\nimport { MoveTable } from \"./move-table\";\n\n/**\n * A pruning table gives a lower bound on the number of moves\n * required to reach a target state.\n */\nclass PruningTable {\n  table: number[];\n  constructor(moveTables: MoveTable[], moves: number[]) {\n    this.table = [];\n    this.computePruningTable(moveTables, moves);\n  }\n\n  setPruningValue(index: number, value: number): void {\n    this.table[index >> 3] ^= (0xf ^ value) << ((index & 7) << 2);\n  }\n\n  getPruningValue(index: number): number {\n    return (this.table[index >> 3] >> ((index & 7) << 2)) & 0xf;\n  }\n\n  computePruningTable(moveTables: MoveTable[], moves: number[]): void {\n    const size = moveTables.reduce((acc, obj) => acc * obj.size, 1);\n\n    this.table.length = 0;\n\n    for (let i = 0; i < (size + 7) >> 3; i += 1) {\n      this.table.push(-1);\n    }\n\n    let depth = 0;\n    let done = 0;\n\n    const powers = [1];\n\n    for (let i = 1; i < moveTables.length; i += 1) {\n      powers.push(moveTables[i - 1].size * powers[i - 1]);\n    }\n\n    const permutations = cartesian(\n      moveTables.map((data) => data.solvedIndexes)\n    );\n\n    for (let i = 0; i < permutations.length; i += 1) {\n      let index = 0;\n\n      for (let j = 0; j < permutations[i].length; j += 1) {\n        index += powers[j] * permutations[i][j];\n      }\n\n      this.setPruningValue(index, 0);\n\n      done += 1;\n    }\n\n    // We generate the table using a BFS. Depth 0 contains all positions which\n    // are solved, and we loop through the correct indexes and apply all 18 moves\n    // to the correct states. Then we visit all positions at depth 2, and apply\n    // the 18 moves, and so on.\n    while (done !== size) {\n      // When half the table is generated, we switch to a backward search\n      // where we apply the 18 moves to all empty entries. If the result\n      // is a position which corresponds to the previous depth, we set the\n      // index to the current depth.\n      const inverse = done > size / 2;\n      const find = inverse ? 0xf : depth;\n      const check = inverse ? depth : 0xf;\n\n      depth += 1;\n\n      for (let index = 0; index < size; index += 1) {\n        if (this.getPruningValue(index) === find) {\n          for (let moveIndex = 0; moveIndex < moves.length; moveIndex += 1) {\n            const move = moves[moveIndex];\n\n            let currentIndex = index;\n            let position = 0;\n\n            for (let i = powers.length - 1; i >= 0; i -= 1) {\n              position +=\n                powers[i] *\n                moveTables[i].doMove(\n                  Math.floor(currentIndex / powers[i]),\n                  move\n                );\n              currentIndex %= powers[i];\n            }\n\n            if (this.getPruningValue(position) === check) {\n              done += 1;\n\n              if (inverse) {\n                this.setPruningValue(index, depth);\n                break;\n              }\n\n              this.setPruningValue(position, depth);\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nexport default PruningTable;\n","import { parseAlgorithm, formatAlgorithm, invertAlgorithm } from \"./algorithms\";\nimport PruningTable from \"./pruning-table\";\nimport { allMoves } from \"./cube\";\nimport { MoveTable } from \"./move-table\";\n\nexport interface CreateTableCallback {\n  (): {\n    moveTables: MoveTable[];\n    pruningTables: string[][];\n  };\n}\n\nexport interface SearchSolution {\n  indexes: number[];\n  solution: number[]; // array of move indexes\n}\n\ninterface BaseSearchSettings {\n  scramble?: string;\n  maxDepth?: number;\n  lastMove?: number;\n  format?: boolean;\n  indexes?: number[];\n}\n\nexport interface SearchSettingsWithoutFormat extends BaseSearchSettings {\n  format: false;\n}\n\nexport interface SearchSettingsWithFormat extends BaseSearchSettings {\n  format?: true;\n}\n\nexport type SearchSettings =\n  | SearchSettingsWithFormat\n  | SearchSettingsWithoutFormat;\n\ntype DefaultedSearchSettings = Required<\n  Pick<SearchSettings, \"maxDepth\" | \"lastMove\" | \"format\">\n> &\n  SearchSettings;\n\nclass Search {\n  moves: number[];\n  initialized!: boolean;\n  moveTables!: MoveTable[];\n  settings!: DefaultedSearchSettings;\n  pruningTables!: Array<{\n    pruningTable: PruningTable;\n    moveTableIndexes: number[];\n  }>;\n  createTables: CreateTableCallback;\n\n  constructor(createTables: CreateTableCallback, moves = allMoves) {\n    this.createTables = createTables;\n    this.moves = moves;\n  }\n\n  initialize(): void {\n    if (this.initialized) {\n      return;\n    }\n\n    this.initialized = true;\n\n    const { moveTables, pruningTables } = this.createTables();\n\n    this.moveTables = moveTables;\n\n    this.pruningTables = [];\n\n    pruningTables.forEach((moveTableNames) => {\n      const moveTableIndexes = moveTableNames.map((name) =>\n        this.moveTables.map((table) => table.name).indexOf(name)\n      );\n\n      moveTableIndexes.sort(\n        (a, b) => this.moveTables[a].size - this.moveTables[b].size\n      );\n\n      const mappedTables: MoveTable[] = [];\n\n      moveTableIndexes.forEach((i) => mappedTables.push(this.moveTables[i]));\n\n      const pruningTable = new PruningTable(mappedTables, this.moves);\n\n      this.pruningTables.push({\n        pruningTable,\n        moveTableIndexes,\n      });\n    });\n  }\n\n  handleSolution(\n    solution: number[],\n    indexes: number[]\n  ): SearchSolution | false {\n    return {\n      solution,\n      indexes,\n    };\n  }\n\n  search(\n    indexes: number[],\n    depth: number,\n    lastMove: number,\n    solution: number[]\n  ): SearchSolution | false {\n    let minimumDistance = 0;\n\n    for (let i = 0; i < this.pruningTables.length; i += 1) {\n      let index = indexes[this.pruningTables[i].moveTableIndexes[0]];\n      let power = 1;\n\n      for (\n        let j = 1;\n        j < this.pruningTables[i].moveTableIndexes.length;\n        j += 1\n      ) {\n        power *= this.moveTables[this.pruningTables[i].moveTableIndexes[j - 1]]\n          .size;\n        index += indexes[this.pruningTables[i].moveTableIndexes[j]] * power;\n      }\n\n      const distance = this.pruningTables[i].pruningTable.getPruningValue(\n        index\n      );\n\n      if (distance > depth) {\n        return false;\n      }\n\n      // The true minimum distance to the solved indexes is\n      // given by the pruning table with the largest distance.\n      if (distance > minimumDistance) {\n        minimumDistance = distance;\n      }\n    }\n\n    if (minimumDistance === 0) {\n      return this.handleSolution(solution, indexes);\n    }\n\n    if (depth > 0) {\n      for (let i = 0; i < this.moves.length; i += 1) {\n        const move = this.moves[i];\n\n        if (\n          Math.floor(move / 3) !== Math.floor(lastMove / 3) &&\n          Math.floor(move / 3) !== Math.floor(lastMove / 3) - 3\n        ) {\n          const updatedIndexes = [];\n\n          for (let j = 0; j < indexes.length; j += 1) {\n            updatedIndexes.push(this.moveTables[j].doMove(indexes[j], move));\n          }\n\n          const result = this.search(\n            updatedIndexes,\n            depth - 1,\n            move,\n            solution.concat([move])\n          );\n\n          if (result) {\n            return result;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  solve(settings: SearchSettingsWithFormat): string | false;\n  solve(settings: SearchSettingsWithoutFormat): SearchSolution | false;\n  solve(settings: SearchSettings): SearchSolution | string | false {\n    this.initialize();\n\n    this.settings = {\n      maxDepth: 22, // For the Kociemba solver.\n      lastMove: 0,\n      format: true,\n      ...settings,\n    };\n\n    const indexes = this.settings.indexes || [];\n\n    let solutionRotation;\n\n    if (this.settings.scramble) {\n      const [moves, totalRotation] = parseAlgorithm(\n        `x ${this.settings.scramble}`,\n        true\n      );\n\n      if (totalRotation.length > 0) {\n        solutionRotation = invertAlgorithm(totalRotation.join(\" \"));\n      }\n\n      for (let i = 0; i < this.moveTables.length; i += 1) {\n        indexes.push(this.moveTables[i].defaultIndex);\n      }\n\n      moves.forEach((move) => {\n        for (let i = 0; i < indexes.length; i += 1) {\n          indexes[i] = this.moveTables[i].doMove(indexes[i], move);\n        }\n      });\n    }\n\n    for (let depth = 0; depth <= this.settings.maxDepth; depth += 1) {\n      const solution = this.search(indexes, depth, this.settings.lastMove, []);\n\n      if (solution) {\n        if (this.settings.format) {\n          const formatted = formatAlgorithm(solution.solution);\n\n          if (solutionRotation) {\n            // If we have rotations in the scramble, apply them to the solution\n            // and then parse again to remove the rotations. This results in a\n            // solution that can be applied from the result scramble orientation.\n            return formatAlgorithm(\n              parseAlgorithm(`${solutionRotation} ${formatted}`)\n            );\n          }\n\n          return formatted;\n        }\n\n        return solution;\n      }\n    }\n\n    return false;\n  }\n}\n\nexport default Search;\n","import {\n  getPermutationFromIndex,\n  getOrientationFromIndex,\n  getParity,\n} from \"app/common/cube/libs/coordinates\";\n\nimport { getRandomInt, factorial } from \"app/common/cube/libs/tools\";\n\nimport { CubeIndexes } from \"app/common/cube/libs/cube\";\n\nimport {\n  solveCube,\n  fiveSideSolver,\n} from \"app/common/cube/solvers/five-side-solver\";\n\nconst getEdgeOrientation = (enabled: number[], orientLastLayer: boolean) => {\n  const pieces = getOrientationFromIndex(\n    getRandomInt(0, 2 ** (enabled.length - 1)),\n    enabled.length,\n    2\n  );\n\n  const orientation = Array(12).fill(0);\n\n  if (!orientLastLayer) {\n    enabled.forEach((piece, i) => {\n      orientation[piece] = pieces[i];\n    });\n  }\n\n  return orientation;\n};\n\nconst getCornerOrientation = (enabled: number[], orientLastLayer: boolean) => {\n  const pieces = getOrientationFromIndex(\n    getRandomInt(0, 3 ** (enabled.length - 1)),\n    enabled.length,\n    3\n  );\n\n  const orientation = Array(8).fill(0);\n\n  if (!orientLastLayer) {\n    enabled.forEach((piece, i) => {\n      orientation[piece] = pieces[i];\n    });\n  }\n\n  return orientation;\n};\n\n/**\n * Returns a permutation vector where all pieces are\n * solved, except for the given enabled pieces.\n */\nconst getPermutationFromEnabled = (enabled: number[], size: number) => {\n  const pieces = getPermutationFromIndex(\n    getRandomInt(0, factorial(enabled.length)),\n    enabled.slice(0),\n    enabled.length\n  );\n\n  const permutation = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11].slice(0, size);\n\n  enabled.forEach((piece, i) => {\n    permutation[piece] = pieces[i];\n  });\n\n  return permutation;\n};\n\n/**\n * Generates a random scramble where all pieces are solved, except\n * for the provided edges and corners, which will be scrambled randomly.\n */\nexport const getScrambleForPieces = (\n  scrambleEdges: number[],\n  scrambleCorners: number[],\n  isScrambleSolved: (state: CubeIndexes) => boolean,\n  orientLastLayer = false\n): string | false => {\n  let scrambleState;\n\n  do {\n    scrambleState = {\n      ep: getPermutationFromEnabled(scrambleEdges, 12),\n      eo: getEdgeOrientation(scrambleEdges, orientLastLayer),\n      cp: getPermutationFromEnabled(scrambleCorners, 8),\n      co: getCornerOrientation(scrambleCorners, orientLastLayer),\n    };\n  } while (\n    getParity(scrambleState.ep) !== getParity(scrambleState.cp) ||\n    isScrambleSolved(scrambleState)\n  );\n\n  // The first solve gets a set of moves to solve the current cube state\n  // We resolve the cube because this set of moves will contain U turns the\n  // robot isn't capable of. The resolve won't use U turns\n  const solution = solveCube(scrambleState);\n  if (solution) {\n    return fiveSideSolver(solution);\n  }\n  return false;\n};\n\nexport default getScrambleForPieces;\n","import {\n  createEdgePermutationTable,\n  createEdgeOrientationTable,\n} from \"app/common/cube/libs/move-table\";\n\nimport Search from \"app/common/cube/libs/search\";\n\nimport { fiveSideMoves, Edges } from \"app/common/cube/libs/cube\";\n\nexport const CrossSearch = new Search(\n  () => ({\n    moveTables: [\n      createEdgePermutationTable({\n        name: \"EdgePermutation\",\n        affected: [Edges.UB, Edges.DB, Edges.BL, Edges.BR],\n      }),\n\n      createEdgeOrientationTable({\n        name: \"EdgeOrientation\",\n        affected: [Edges.UB, Edges.DB, Edges.BL, Edges.BR],\n      }),\n    ],\n\n    pruningTables: [[\"EdgePermutation\"], [\"EdgeOrientation\"]],\n  }),\n  fiveSideMoves\n);\n\nexport const crossSolver = (scramble: string): string | false =>\n  CrossSearch.solve({ scramble });\n","import { CubeIndexes } from \"./cube\";\n\nconst centerFacelets = [\"U\", \"R\", \"F\", \"D\", \"L\", \"B\"];\n\nconst cornerFacelets = [\n  [\"U8\", \"R0\", \"F2\"],\n  [\"U6\", \"F0\", \"L2\"],\n  [\"U0\", \"L0\", \"B2\"],\n  [\"U2\", \"B0\", \"R2\"],\n  [\"D2\", \"F8\", \"R6\"],\n  [\"D0\", \"L8\", \"F6\"],\n  [\"D6\", \"B8\", \"L6\"],\n  [\"D8\", \"R8\", \"B6\"],\n];\n\nconst edgeFacelets = [\n  [\"U5\", \"R1\"],\n  [\"U7\", \"F1\"],\n  [\"U3\", \"L1\"],\n  [\"U1\", \"B1\"],\n  [\"D5\", \"R7\"],\n  [\"D1\", \"F7\"],\n  [\"D3\", \"L7\"],\n  [\"D7\", \"B7\"],\n  [\"F5\", \"R3\"],\n  [\"F3\", \"L5\"],\n  [\"B5\", \"L3\"],\n  [\"B3\", \"R5\"],\n];\n\nconst mod = (n: number, m: number) => ((n % m) + m) % m;\n\nconst getFaceletIndex = (facelet: string) =>\n  centerFacelets.indexOf(facelet[0]) * 9 + Number(facelet[1]);\nconst getCornerFacelet = (\n  cube: CubeIndexes,\n  cornerIndex: number,\n  orientationIndex: number\n) => {\n  return cornerFacelets[cube.cp[cornerIndex]][\n    mod(orientationIndex - cube.co[cornerIndex], 3)\n  ][0];\n};\n\nconst getEdgeFacelet = (\n  cube: CubeIndexes,\n  edgeIndex: number,\n  orientationIndex: number\n) =>\n  edgeFacelets[cube.ep[edgeIndex]][\n    mod(orientationIndex - cube.eo[edgeIndex], 2)\n  ][0];\n\nexport interface FaceletArrayFilter {\n  edges?: number[];\n  corners?: number[];\n  facelets?: string[];\n}\n\nexport interface FaceletArrayOptions {\n  filter?: FaceletArrayFilter;\n}\n\nexport const getFaceletArray = (\n  cube: CubeIndexes,\n  options: FaceletArrayOptions = {}\n): string[] => {\n  const facelets: string[] = [];\n\n  // add center facelets to array\n  centerFacelets.forEach((facelet, centerIndex) => {\n    facelets[9 * centerIndex + 4] = facelet;\n  });\n\n  // add corner cubie facelets\n  cornerFacelets.forEach((corner, cornerIndex) => {\n    corner.forEach((facelet, orientation) => {\n      const faceletIndex = getFaceletIndex(facelet);\n      const faceletValue = getCornerFacelet(cube, cornerIndex, orientation);\n\n      facelets[faceletIndex] =\n        !options.filter ||\n        options.filter.corners?.includes(cube.cp[cornerIndex]) ||\n        options.filter.facelets?.includes(faceletValue)\n          ? faceletValue\n          : \"G\";\n    });\n  });\n\n  // add edge cubie facelets\n  edgeFacelets.forEach((edge, edgeIndex) => {\n    edge.forEach((facelet, orientation) => {\n      const faceletIndex = getFaceletIndex(facelet);\n      const faceletValue = getEdgeFacelet(cube, edgeIndex, orientation);\n\n      facelets[faceletIndex] =\n        !options.filter ||\n        options.filter.edges?.includes(cube.ep[edgeIndex]) ||\n        options.filter.facelets?.includes(faceletValue)\n          ? faceletValue\n          : \"G\";\n    });\n  });\n\n  return facelets;\n};\n","import React from \"react\";\n\nimport { doAlgorithm } from \"app/common/cube/libs/cube\";\nimport {\n  getFaceletArray,\n  FaceletArrayFilter,\n} from \"app/common/cube/libs/cube-preview\";\n\ninterface CubePreviewProps {\n  scrambleCode: string;\n  filter?: FaceletArrayFilter;\n  colorMap?: Record<string, string>;\n}\n\nexport function CubePreview(props: CubePreviewProps): JSX.Element {\n  const cubeIndexes = doAlgorithm(props.scrambleCode);\n  const colorMap = props.colorMap ?? defaultColorMap;\n  const svgString = getFaceletArray(cubeIndexes, {\n    filter: props.filter,\n  })\n    .map((faceKey) => colorMap[faceKey])\n    .reduce((acc, color) => acc.replace(\"{}\", color), template);\n\n  return (\n    <div\n      className=\"computer:w-96 landscape:w-1/3 computer:self-start w-80 self-center\"\n      dangerouslySetInnerHTML={{ __html: svgString }}\n    ></div>\n  );\n}\n\nconst defaultColorMap: Record<string, string> = {\n  U: \"white\",\n  R: \"red\",\n  F: \"green\",\n  D: \"yellow\",\n  L: \"orange\",\n  B: \"blue\",\n  G: \"gray\",\n};\n\nconst template = `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"-5 -5 258 196\" style=\"stroke-linejoin:round;\">\n  <g>\n    <rect x=\"64\" y=\"2\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"84\" y=\"2\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"104\" y=\"2\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"64\" y=\"22\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"84\" y=\"22\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"104\" y=\"22\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"64\" y=\"42\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"84\" y=\"42\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"104\" y=\"42\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"126\" y=\"64\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"146\" y=\"64\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"166\" y=\"64\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"126\" y=\"84\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"146\" y=\"84\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"166\" y=\"84\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"126\" y=\"104\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"146\" y=\"104\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"166\" y=\"104\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"64\" y=\"64\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"84\" y=\"64\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"104\" y=\"64\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"64\" y=\"84\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"84\" y=\"84\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"104\" y=\"84\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"64\" y=\"104\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"84\" y=\"104\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"104\" y=\"104\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"64\" y=\"126\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"84\" y=\"126\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"104\" y=\"126\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"64\" y=\"146\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"84\" y=\"146\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"104\" y=\"146\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"64\" y=\"166\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"84\" y=\"166\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"104\" y=\"166\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"2\" y=\"64\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"22\" y=\"64\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"42\" y=\"64\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"2\" y=\"84\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"22\" y=\"84\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"42\" y=\"84\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"2\" y=\"104\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"22\" y=\"104\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"42\" y=\"104\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"188\" y=\"64\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"208\" y=\"64\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"228\" y=\"64\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"188\" y=\"84\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"208\" y=\"84\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"228\" y=\"84\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"188\" y=\"104\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"208\" y=\"104\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"228\" y=\"104\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n  </g>\n</svg>`;\n","import styled from \"styled-components/macro\";\n\nexport const ButtonRow = styled.div.attrs({\n  className:\n    \"flex flex-row w-full computer:children:flex-initial children:flex-1 children:ml-sm children:first:ml-0 children:w-40\",\n})``;\n\nexport const ContentContainer = styled.div.attrs({\n  className:\n    \"flex flex-col m-med children:mt-med children:first:mt-0 computer:items-start\",\n})``;\n","import React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button, FormControl, Select, MenuItem } from \"@material-ui/core\";\nimport { FormattedMessage } from \"react-intl\";\n\nimport { ApplicationState } from \"app/common/store\";\n\nimport { getRobotServer } from \"app/robot/store/selectors\";\n\nimport { generateScramble } from \"app/common/cube/scramblers/full\";\nimport {\n  generateOLLScramble,\n  generateFirstLookOLLScramble,\n  generateSecondLookOLLScramble,\n  generatePLLScramble,\n  generateFirstLookPLLScramble,\n  generateSecondLookPLLScramble,\n} from \"app/common/cube/scramblers/cfop\";\nimport { crossSolver } from \"app/common/cube/solvers/cross-solver\";\nimport { CubePreview } from \"app/cube-preview\";\nimport { executeScramble } from \"app/robot/bluetooth-utils\";\nimport { doAlgorithm, Edges, Corners } from \"app/common/cube/libs/cube\";\nimport { FaceletArrayFilter } from \"app/common/cube/libs/cube-preview\";\nimport {\n  isF2LSolved,\n  isCrossSolved,\n} from \"app/common/cube/scramblers/solve-criteria\";\nimport { ButtonRow, ContentContainer } from \"app/common/styled-components\";\n\ninterface CFOPScrambleProps {\n  robotServer: BluetoothRemoteGATTServer | null;\n}\n\ntype CFOPPhaseType =\n  | \"cross\"\n  | \"f2l\"\n  | \"oll\"\n  | \"firstLookOll\"\n  | \"secondLookOll\"\n  | \"pll\"\n  | \"firstLookPll\"\n  | \"secondLookPll\";\n\nconst invertedColorMap: Record<string, string> = {\n  U: \"yellow\",\n  R: \"red\",\n  F: \"blue\",\n  D: \"white\",\n  L: \"orange\",\n  B: \"green\",\n  G: \"gray\",\n};\n\nconst crossFilter = {\n  edges: [Edges.DB, Edges.DF, Edges.DR, Edges.DL],\n};\n\nconst f2lFilter = {\n  edges: [\n    Edges.DB,\n    Edges.DF,\n    Edges.DR,\n    Edges.DL,\n    Edges.BL,\n    Edges.BR,\n    Edges.FL,\n    Edges.FR,\n  ],\n  corners: [Corners.DBR, Corners.DLF, Corners.DBL, Corners.DFR],\n};\n\nconst ollFilter = {\n  ...f2lFilter,\n  facelets: [\"U\"],\n};\n\nconst filters: Record<string, FaceletArrayFilter> = {\n  cross: crossFilter,\n  f2l: f2lFilter,\n  firstLookOll: ollFilter,\n  secondLookOll: ollFilter,\n  oll: ollFilter,\n};\n\nexport function CFOPScramble(props: CFOPScrambleProps): JSX.Element {\n  const [cfopPhase, setCFOPPhase] = useState<CFOPPhaseType>(\"cross\");\n  const [scramble, setScramble] = useState<string>(\"\");\n\n  const onSendBtnClick = () => {\n    let scramble: string | false;\n    switch (cfopPhase) {\n      case \"cross\":\n        setScramble(generateScramble(26, isCrossSolved));\n        break;\n      case \"f2l\":\n        // faster to do cross solve than scrambling all pieces but the cross\n        // and completing a full solve\n        while (true) {\n          scramble = generateScramble();\n          const solveCode = crossSolver(scramble);\n          if (solveCode) {\n            if (!isF2LSolved(doAlgorithm(solveCode))) {\n              setScramble(`${scramble} ${solveCode}`);\n              break;\n            }\n          }\n        }\n        break;\n      case \"oll\":\n        scramble = generateOLLScramble();\n        if (scramble) {\n          setScramble(scramble);\n        }\n        break;\n      case \"firstLookOll\":\n        scramble = generateFirstLookOLLScramble();\n        if (scramble) {\n          setScramble(scramble);\n        }\n        break;\n      case \"secondLookOll\":\n        scramble = generateSecondLookOLLScramble();\n        if (scramble) {\n          setScramble(scramble);\n        }\n        break;\n      case \"pll\":\n        scramble = generatePLLScramble();\n        if (scramble) {\n          setScramble(scramble);\n        }\n        break;\n      case \"firstLookPll\":\n        scramble = generateFirstLookPLLScramble();\n        if (scramble) {\n          setScramble(scramble);\n        }\n        break;\n      case \"secondLookPll\":\n        scramble = generateSecondLookPLLScramble();\n        if (scramble) {\n          setScramble(scramble);\n        }\n        break;\n    }\n  };\n\n  return (\n    <ContentContainer>\n      <FormControl component=\"fieldset\">\n        <Select\n          className=\"computer:w-96\"\n          value={cfopPhase}\n          onChange={(e) => {\n            const phase = e.target.value as CFOPPhaseType;\n            if (phase !== cfopPhase) {\n              setScramble(\"\");\n            }\n            setCFOPPhase(phase);\n          }}\n        >\n          <MenuItem value=\"cross\">Cross</MenuItem>\n          <MenuItem value=\"f2l\">F2L</MenuItem>\n          <MenuItem value=\"firstLookOll\">First look OLL</MenuItem>\n          <MenuItem value=\"secondLookOll\">Second look OLL</MenuItem>\n          <MenuItem value=\"oll\">Full OLL</MenuItem>\n          <MenuItem value=\"firstLookPll\">First look PLL</MenuItem>\n          <MenuItem value=\"secondLookPll\">Second look PLL</MenuItem>\n          <MenuItem value=\"pll\">Full PLL</MenuItem>\n        </Select>\n      </FormControl>\n      <CubePreview\n        scrambleCode={scramble}\n        filter={filters[cfopPhase]}\n        colorMap={invertedColorMap}\n      />\n      <ButtonRow>\n        <Button variant=\"contained\" onClick={onSendBtnClick}>\n          <FormattedMessage id=\"scramble.actions.scramble\" />\n        </Button>\n        <Button\n          variant=\"contained\"\n          disabled={!Boolean(scramble) || !Boolean(props.robotServer)}\n          onClick={() => executeScramble(props.robotServer, scramble)}\n        >\n          <FormattedMessage id=\"scramble.actions.send\" />\n        </Button>\n      </ButtonRow>\n    </ContentContainer>\n  );\n}\n\nexport const ConnectedCFOPScramble = connect((state: ApplicationState) => ({\n  robotServer: getRobotServer(state),\n}))(CFOPScramble);\n","import getScrambleForPieces from \"app/common/cube/libs/scramble-pieces\";\nimport { Edges, Corners } from \"app/common/cube/libs/cube\";\nimport {\n  isOLLSolved,\n  isFirstLookOLLSolved,\n  isFirstLookPLLSolved,\n  isCubeSolved,\n} from \"app/common/cube/scramblers/solve-criteria\";\n\nexport const generateOLLScramble = (): string | false =>\n  getScrambleForPieces(\n    [Edges.UR, Edges.UF, Edges.UL, Edges.UB],\n    [Corners.URF, Corners.UFL, Corners.ULB, Corners.UBR],\n    isOLLSolved\n  );\n\nexport const generateFirstLookOLLScramble = (): string | false =>\n  getScrambleForPieces(\n    [Edges.UR, Edges.UF, Edges.UL, Edges.UB],\n    [Corners.URF, Corners.UFL, Corners.ULB, Corners.UBR],\n    isFirstLookOLLSolved\n  );\n\nexport const generateSecondLookOLLScramble = (): string | false =>\n  getScrambleForPieces(\n    [],\n    [Corners.URF, Corners.UFL, Corners.ULB, Corners.UBR],\n    isOLLSolved\n  );\n\nexport const generatePLLScramble = (): string | false =>\n  getScrambleForPieces(\n    [Edges.UR, Edges.UF, Edges.UL, Edges.UB],\n    [Corners.URF, Corners.UFL, Corners.ULB, Corners.UBR],\n    isCubeSolved,\n    true\n  );\n\nexport const generateFirstLookPLLScramble = (): string | false =>\n  getScrambleForPieces(\n    [Edges.UR, Edges.UF, Edges.UL, Edges.UB],\n    [Corners.URF, Corners.UFL, Corners.ULB, Corners.UBR],\n    isFirstLookPLLSolved,\n    true\n  );\n\nexport const generateSecondLookPLLScramble = (): string | false =>\n  getScrambleForPieces(\n    [Edges.UR, Edges.UF, Edges.UL, Edges.UB],\n    [],\n    isCubeSolved,\n    true\n  );\n","import React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button, InputLabel, OutlinedInput } from \"@material-ui/core\";\nimport { FormattedMessage } from \"react-intl\";\n\nimport { ApplicationState } from \"app/common/store\";\n\nimport { getRobotServer } from \"app/robot/store/selectors\";\n\nimport { generateScramble } from \"app/common/cube/scramblers/full\";\nimport { CubePreview } from \"app/cube-preview\";\nimport { executeScramble } from \"app/robot/bluetooth-utils\";\nimport { ButtonRow, ContentContainer } from \"app/common/styled-components\";\n\ninterface RandomScrambleProps {\n  robotServer: BluetoothRemoteGATTServer | null;\n}\n\nexport function RandomScramble(props: RandomScrambleProps): JSX.Element {\n  const [scramble, setScramble] = useState<string>(\"\");\n  return (\n    <ContentContainer>\n      <div className=\"flex flex-col w-full\">\n        <InputLabel htmlFor=\"scramble\" className=\"text-xs\">\n          Scramble\n        </InputLabel>\n        <OutlinedInput\n          id=\"scramble\"\n          value={scramble}\n          className=\"text-surface-txt py-4 children:cursor-text\"\n          multiline\n          fullWidth\n          disabled\n        />\n      </div>\n\n      <CubePreview scrambleCode={scramble} />\n\n      <ButtonRow>\n        <Button\n          variant=\"contained\"\n          onClick={() => {\n            setScramble(generateScramble());\n          }}\n        >\n          <FormattedMessage id=\"scramble.actions.scramble\" />\n        </Button>\n        <Button\n          variant=\"contained\"\n          size=\"large\"\n          disabled={!scramble || !Boolean(props.robotServer)}\n          onClick={() => executeScramble(props.robotServer, scramble)}\n        >\n          <FormattedMessage id=\"scramble.actions.send\" />\n        </Button>\n      </ButtonRow>\n    </ContentContainer>\n  );\n}\n\nexport const ConnectedRandomScramble = connect((state: ApplicationState) => ({\n  robotServer: getRobotServer(state),\n}))(RandomScramble);\n","import React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button, TextField } from \"@material-ui/core\";\nimport { FormattedMessage } from \"react-intl\";\n\nimport { ApplicationState } from \"app/common/store\";\n\nimport { getRobotServer } from \"app/robot/store/selectors\";\n\nimport { fiveSideSolver } from \"app/common/cube/solvers/five-side-solver\";\nimport { CubePreview } from \"app/cube-preview\";\nimport {\n  validateAlgorithm,\n  invertAlgorithm,\n} from \"app/common/cube/libs/algorithms\";\nimport { executeScramble } from \"app/robot/bluetooth-utils\";\nimport { ButtonRow, ContentContainer } from \"app/common/styled-components\";\n\ninterface ManualScrambleProps {\n  robotServer: BluetoothRemoteGATTServer | null;\n}\n\nexport function ManualScramble(props: ManualScrambleProps): JSX.Element {\n  const [scramble, setScramble] = useState<string>(\"\");\n  const [hasError, setHasError] = useState(false);\n  return (\n    <ContentContainer>\n      <form noValidate autoComplete=\"off\" className=\"container\">\n        <TextField\n          id=\"manual-scramble\"\n          label=\"Manual Scramble\"\n          multiline\n          rowsMax={4}\n          fullWidth\n          InputLabelProps={{\n            shrink: true,\n          }}\n          error={hasError}\n          helperText={hasError && \"Invalid Scramble Code\"}\n          onBlur={(event: React.FocusEvent<HTMLInputElement>) => {\n            const manualScrambleValue = event.target.value;\n            if (manualScrambleValue.length > 0) {\n              if (validateAlgorithm(manualScrambleValue)) {\n                const fiveSideSolve = fiveSideSolver(manualScrambleValue);\n                if (fiveSideSolve) {\n                  const fiveSideScramble = invertAlgorithm(fiveSideSolve);\n                  setScramble(fiveSideScramble);\n                }\n              } else {\n                setHasError(true);\n                setScramble(\"\");\n              }\n            } else {\n              setHasError(false);\n              setScramble(\"\");\n            }\n          }}\n        />\n      </form>\n      <CubePreview scrambleCode={scramble} />\n      <ButtonRow>\n        <Button\n          variant=\"contained\"\n          disabled={!Boolean(props.robotServer) && Boolean(scramble)}\n          onClick={() => executeScramble(props.robotServer, scramble)}\n        >\n          <FormattedMessage id=\"scramble.actions.send\" />\n        </Button>\n      </ButtonRow>\n    </ContentContainer>\n  );\n}\n\nexport const ConnectedManualScramble = connect((state: ApplicationState) => ({\n  robotServer: getRobotServer(state),\n}))(ManualScramble);\n","import React, { useEffect } from \"react\";\nimport {\n  AppBar,\n  Toolbar,\n  Typography,\n  BottomNavigation,\n  BottomNavigationAction,\n  Paper,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n} from \"@material-ui/core\";\nimport { Shuffle, Layers, Edit } from \"@material-ui/icons\";\nimport { FormattedMessage } from \"react-intl\";\nimport styled from \"styled-components/macro\";\nimport { useDispatch } from \"react-redux\";\n\nimport { RobotWidget } from \"app/robot/widget\";\nimport { ConnectedCFOPScramble } from \"app/cfop-scramble\";\nimport { fiveSideSearch } from \"app/common/cube/solvers/five-side-solver\";\nimport { ConnectedRandomScramble } from \"app/random-scramble\";\nimport { ConnectedManualScramble } from \"app/manual-scramble\";\nimport { appInitialized } from \"app/main-screen/actions\";\n\nconst Screen = styled.div.attrs({ className: \"flex flex-col h-screen\" })``;\n\nconst MenuItemContent = styled.div.attrs({\n  className: \"computer:flex hidden flex-row items-center\",\n})``;\n\nconst CompactMenuItemContent = styled.div.attrs({\n  className:\n    \"hidden landscape:inline-flex flex-col items-center justify-center text-bg-txt w-full\",\n})``;\n\nconst IconContainer = styled.div.attrs({\n  className: \"flex flex-row ml-auto\",\n})``;\n\nconst IconWrapper = styled.div.attrs({\n  className: \"text-bg-icon\",\n})``;\n\nexport const MainScreen = (): JSX.Element => {\n  const [navigationValue, setNavigation] = React.useState(\"random\");\n  const dispatch = useDispatch();\n  const handleChange = (_: React.ChangeEvent<unknown>, newValue: string) => {\n    setNavigation(newValue);\n  };\n\n  useEffect(() => {\n    fiveSideSearch.initialize();\n    dispatch(appInitialized());\n  }, []);\n\n  return (\n    <Screen>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h5\">\n            <FormattedMessage id=\"appTitle\" />\n          </Typography>\n          <IconContainer>\n            <RobotWidget />\n          </IconContainer>\n        </Toolbar>\n      </AppBar>\n\n      <div className=\"flex flex-row h-full w-full\">\n        <Paper className=\"hidden landscape:block computer:block w-24 computer:w-48\">\n          <List>\n            <ListItem\n              button\n              key=\"random\"\n              selected={navigationValue === \"random\"}\n              onClick={() => setNavigation(\"random\")}\n            >\n              <MenuItemContent>\n                <ListItemIcon>\n                  <Shuffle />\n                </ListItemIcon>\n                <ListItemText primary=\"RANDOM\" />\n              </MenuItemContent>\n\n              <CompactMenuItemContent>\n                <IconWrapper>\n                  <Shuffle />\n                </IconWrapper>\n                <span>RANDOM</span>\n              </CompactMenuItemContent>\n            </ListItem>\n\n            <ListItem\n              button\n              key=\"cfop\"\n              selected={navigationValue === \"cfop\"}\n              onClick={() => setNavigation(\"cfop\")}\n            >\n              <MenuItemContent>\n                <ListItemIcon>\n                  <Layers />\n                </ListItemIcon>\n                <ListItemText primary=\"CFOP\" />\n              </MenuItemContent>\n\n              <CompactMenuItemContent>\n                <IconWrapper>\n                  <Layers />\n                </IconWrapper>\n                <span>CFOP</span>\n              </CompactMenuItemContent>\n            </ListItem>\n\n            <ListItem\n              button\n              key=\"manual\"\n              selected={navigationValue === \"manual\"}\n              onClick={() => setNavigation(\"manual\")}\n            >\n              <MenuItemContent>\n                <ListItemIcon>\n                  <Edit />\n                </ListItemIcon>\n                <ListItemText primary=\"MANUAL\" />\n              </MenuItemContent>\n\n              <CompactMenuItemContent>\n                <IconWrapper>\n                  <Edit />\n                </IconWrapper>\n                <span>MANUAL</span>\n              </CompactMenuItemContent>\n            </ListItem>\n          </List>\n        </Paper>\n\n        <div className=\"flex flex-grow flex-col h-full\">\n          {navigationValue === \"random\" && <ConnectedRandomScramble />}\n          {navigationValue === \"cfop\" && <ConnectedCFOPScramble />}\n          {navigationValue === \"manual\" && <ConnectedManualScramble />}\n\n          <div className=\"landscape:hidden computer:hidden w-full mt-auto\">\n            <BottomNavigation\n              showLabels\n              value={navigationValue}\n              onChange={handleChange}\n              className=\"w-full\"\n            >\n              <BottomNavigationAction\n                icon={<Shuffle />}\n                value=\"random\"\n                label=\"RANDOM\"\n                aria-label=\"random\"\n              />\n              <BottomNavigationAction\n                icon={<Layers />}\n                value=\"cfop\"\n                label=\"CFOP\"\n                aria-label=\"cfop\"\n              />\n              <BottomNavigationAction\n                icon={<Edit />}\n                value=\"manual\"\n                label=\"MANUAL\"\n                aria-label=\"manual\"\n              />\n            </BottomNavigation>\n          </div>\n        </div>\n      </div>\n    </Screen>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config): void {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister(): void {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { IntlProvider } from \"react-intl\";\nimport { StylesProvider } from \"@material-ui/core/styles\";\nimport { IconButton } from \"@material-ui/core\";\nimport { Close } from \"@material-ui/icons\";\nimport { SnackbarProvider } from \"notistack\";\nimport { messages, locale } from \"translations\";\n\nimport { watchSnackbarActions } from \"app/common/snackbar/sagas\";\nimport { MainScreen } from \"app/main-screen\";\nimport { createStore } from \"app/common/store\";\n\nimport { importAll } from \"app/common/webpack\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\n// import fonts\nimport \"fontsource-roboto/300.css\";\nimport \"fontsource-roboto/400.css\";\nimport \"fontsource-roboto/500.css\";\nimport \"fontsource-roboto/700.css\";\n\n// inject any css files\nimportAll(require.context(\"./\", true, /\\.css$/));\n\n// import store init scripts\nimportAll(require.context(\"./\", true, /\\/init-store\\.(ts|tsx)$/));\n\nfunction renderApp() {\n  const snackbar = React.createRef<SnackbarProvider>();\n  const store = createStore();\n  store.runSaga(watchSnackbarActions, snackbar);\n\n  const onClickDismiss = (key: React.ReactText) => () => {\n    snackbar.current?.closeSnackbar(key);\n  };\n  ReactDOM.render(\n    <Provider store={store}>\n      <IntlProvider locale={locale} messages={messages}>\n        <StylesProvider injectFirst>\n          <SnackbarProvider\n            ref={snackbar}\n            maxSnack={1}\n            action={(key) => (\n              <IconButton\n                size=\"small\"\n                color=\"inherit\"\n                onClick={onClickDismiss(key)}\n              >\n                <Close fontSize=\"small\" />\n              </IconButton>\n            )}\n          >\n            <MainScreen />\n          </SnackbarProvider>\n        </StylesProvider>\n      </IntlProvider>\n    </Provider>,\n    document.getElementById(\"root\")\n  );\n}\nrenderApp();\n\n//register service worker\nserviceWorker.register();\n","import { PayloadAction } from \"@reduxjs/toolkit\";\n\nexport const payloadReducer = <S, P>(state: S, action: PayloadAction<P>): P => {\n  return action.payload;\n};\n\nexport const mergeReducer = <S, P extends Partial<S>>(\n  state: S,\n  action: PayloadAction<P>\n): S => {\n  return { ...state, ...action.payload };\n};\n\ninterface RegistryEntry<T, Tkey extends keyof T> {\n  key: Tkey;\n  value: T[Tkey];\n}\n\nexport const registryReducer = <S>(\n  state: S,\n  action: PayloadAction<RegistryEntry<S, keyof S>>\n): S => {\n  state[action.payload.key] = action.payload.value;\n  return state;\n};\n\nexport const valueReducer = <T>(value: T): (() => T) => () => value;\n","import { createReducer, combineReducers } from \"@reduxjs/toolkit\";\nimport { registerRobot, unregisterRobot } from \"app/robot/store/actions\";\nimport { RobotState } from \"app/robot/store/types\";\nimport { payloadReducer, valueReducer } from \"app/common/store-reducers\";\n\nexport default combineReducers<RobotState>({\n  device: createReducer<RobotState[\"device\"]>(null, (builder) => {\n    builder.addCase(registerRobot, payloadReducer);\n    builder.addCase(unregisterRobot, valueReducer(null));\n  }),\n});\n","import React from \"react\";\nimport { FormattedMessage } from \"react-intl\";\n\nexport function translate(\n  id: string,\n  values?: Record<string, string>\n): JSX.Element {\n  return <FormattedMessage id={id} values={values} />;\n}\n","import { call, put, take, race, takeEvery } from \"typed-redux-saga/macro\";\nimport { eventChannel, SagaIterator } from \"redux-saga\";\nimport { PayloadAction } from \"@reduxjs/toolkit\";\n\nimport { enqueueSnackbar } from \"app/common/snackbar/actions\";\nimport { translate } from \"app/common/translation-helpers\";\nimport {\n  unregisterRobot,\n  registerRobot,\n  bluetoothDeviceSelected,\n} from \"app/robot/store/actions\";\nimport { appInitialized } from \"app/main-screen/actions\";\nimport {\n  connectToGANRobot,\n  connectToKnownGANRobots,\n  GANDeviceTypeError,\n} from \"app/robot/bluetooth-utils\";\n\nfunction* bluetoothDeviceSelectedHandler({\n  payload: device,\n}: PayloadAction<BluetoothDevice>) {\n  try {\n    yield* call(connectToGANRobot, device);\n    yield* put(registerRobot(device));\n    yield* put(\n      enqueueSnackbar(\n        translate(\"robot.snackbar.connected\", {\n          deviceName: device.name as string,\n        }),\n        { variant: \"success\" }\n      )\n    );\n  } catch (e) {\n    if (e instanceof GANDeviceTypeError) {\n      yield* put(\n        enqueueSnackbar(\n          translate(\"robot.snackbar.wrongDevice\", {\n            deviceName: device.name as string,\n            modelNumber: e.modelNumber,\n          }),\n          {\n            variant: \"error\",\n          }\n        )\n      );\n    } else {\n      console.log(\"couldn't connect\");\n    }\n  }\n}\n\nexport function* watchForBluetoothDeviceSelected(): SagaIterator {\n  yield* takeEvery(bluetoothDeviceSelected, bluetoothDeviceSelectedHandler);\n}\n\nfunction* listenForDisconnect({\n  payload: device,\n}: PayloadAction<BluetoothDevice>) {\n  const disconnectChannel = eventChannel((emitter) => {\n    device.addEventListener(\"gattserverdisconnected\", emitter);\n    return () => {\n      device.removeEventListener(\"gattserverdisconnected\", emitter);\n    };\n  });\n\n  const result = yield* race({\n    disconnectEvent: take(disconnectChannel),\n    registerAction: take(registerRobot),\n    unregisterAction: take(unregisterRobot),\n  });\n\n  if (result.disconnectEvent) {\n    yield* put(unregisterRobot());\n    yield* put(\n      enqueueSnackbar(\n        translate(\"robot.snackbar.disconnected\", {\n          deviceName: device.name as string,\n        }),\n        {\n          variant: \"error\",\n        }\n      )\n    );\n  }\n  disconnectChannel.close();\n}\n\nexport function* watchForRegisterRobot(): SagaIterator {\n  yield* takeEvery(registerRobot, listenForDisconnect);\n}\n\nfunction* appInitializedHandler() {\n  try {\n    const device = yield* call(connectToKnownGANRobots);\n    if (device) {\n      yield* put(registerRobot(device));\n      yield* put(\n        enqueueSnackbar(\n          translate(\"robot.snackbar.connected\", {\n            deviceName: device.name as string,\n          }),\n          { variant: \"success\" }\n        )\n      );\n    }\n  } catch (e) {\n    console.error(e);\n  }\n}\n\nexport function* watchForAppInitialized(): SagaIterator {\n  yield* take(appInitialized);\n  yield* call(appInitializedHandler);\n}\n\nexport default [\n  watchForBluetoothDeviceSelected,\n  watchForRegisterRobot,\n  watchForAppInitialized,\n];\n","import { registerReducer, registerSagas } from \"app/common/store\";\nimport { RobotState } from \"app/robot/store/types\";\n\nimport reducer from \"app/robot/store/reducer\";\nimport sagas from \"app/robot/store/sagas\";\n\ndeclare module \"app/common/store\" {\n  interface ApplicationState {\n    robot: RobotState;\n  }\n}\n\nregisterReducer(\"robot\", reducer);\nregisterSagas(sagas);\n","interface Reducer<T, K> {\n  (acc: T, curr: K): T;\n}\n\nexport const chunkReducer = <T>(\n  chunckSize: number\n): Reducer<Array<Array<T>>, T> => {\n  let currentChunk: Array<T>;\n  return (accumulator: Array<Array<T>>, currentValue: T) => {\n    if (!currentChunk || currentChunk.length === chunckSize) {\n      currentChunk = [];\n      accumulator.push(currentChunk);\n    }\n    currentChunk.push(currentValue);\n    return accumulator;\n  };\n};\n","import { chunkReducer } from \"app/common/array-reducers\";\n\nexport const PRIMARY_SERVICE = 0xfff0;\nconst SCRAMBLE_CHARACTERISTIC = 0xfff3;\nconst ROBOT_STATUS_CHARACTERISTIC = 0xfff2;\n\nexport const DEVICE_INFO_SERVICE = 0x180a;\nconst MODEL_NUMBER_SERVICE = 0x2a24;\n\nconst moveMap: Record<string, number> = {\n  R: 0,\n  R2: 1,\n  \"R'\": 2,\n  F: 3,\n  F2: 4,\n  \"F'\": 5,\n  D: 6,\n  D2: 7,\n  \"D'\": 8,\n  L: 9,\n  L2: 10,\n  \"L'\": 11,\n  B: 12,\n  B2: 13,\n  \"B'\": 14,\n};\n\nexport function getGANEncoding(scramble: string): Uint8Array[] {\n  return scramble\n    .replace(/(\\w)2/gi, \"$1 $1\") // for some reason the gan robot sometimes fails on double turns, just convert to singles\n    .split(\" \")\n    .map((move) => moveMap[move])\n    .reduce(chunkReducer(2), [])\n    .map((moves) => moves[0] * 16 + (moves[1] ?? 15)) // encode every 2 moves to decimal representation of a hex value\n    .reduce(chunkReducer(16), []) // robot can only take in 18 hex characters, so chunk on this value and do multiple writes if necessary\n    .map((chunkedArr) => new Uint8Array(chunkedArr));\n}\n\nexport const executeScramble = async (\n  robotServer: BluetoothRemoteGATTServer | null,\n  scramble: string\n): Promise<void> => {\n  try {\n    if (robotServer) {\n      for (const scrambleChunk of getGANEncoding(scramble)) {\n        await executeChunk(robotServer, scrambleChunk);\n      }\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst executeChunk = (\n  robotServer: BluetoothRemoteGATTServer,\n  chunk: Uint8Array\n): Promise<void> => {\n  return new Promise(async (resolve) => {\n    const primaryService = await robotServer.getPrimaryService(PRIMARY_SERVICE);\n    const scrambleExecuteCharacteristic = await primaryService.getCharacteristic(\n      SCRAMBLE_CHARACTERISTIC\n    );\n    await scrambleExecuteCharacteristic.writeValue(chunk);\n    const statusCharacteristic = await primaryService.getCharacteristic(\n      ROBOT_STATUS_CHARACTERISTIC\n    );\n\n    const waitUntilSequenceFinished = async (hasHadNonZeroValue = false) => {\n      setTimeout(async () => {\n        const robotStatus = (await statusCharacteristic.readValue()).getUint8(\n          0\n        );\n        if (hasHadNonZeroValue && robotStatus === 0) {\n          resolve();\n          return;\n        }\n\n        if (!hasHadNonZeroValue && robotStatus !== 0) {\n          hasHadNonZeroValue = true;\n        }\n\n        waitUntilSequenceFinished(hasHadNonZeroValue);\n      }, 10);\n    };\n    waitUntilSequenceFinished(false);\n  });\n};\n\nexport class GANDeviceTypeError extends Error {\n  modelNumber: string;\n  constructor(message: string, modelNumber: string) {\n    super(message);\n    this.name = \"GANDeviceTypeError\";\n    this.modelNumber = modelNumber;\n  }\n}\n\nexport const requestBluetoothDevice = async (): Promise<BluetoothDevice> => {\n  const device = await navigator.bluetooth.requestDevice({\n    filters: [{ namePrefix: \"GAN-\" }],\n    optionalServices: [PRIMARY_SERVICE, DEVICE_INFO_SERVICE],\n  });\n  await connectToGANRobot(device);\n  return device;\n};\n\nexport const connectToGANRobot = async (\n  device: ExperimentalBluetoothDevice\n): Promise<void> => {\n  const server = await device.gatt?.connect();\n  if (!server) {\n    throw new Error(\"Could not connect to Bluetooth Server\");\n  }\n  const deviceInfoService = await server.getPrimaryService(DEVICE_INFO_SERVICE);\n  const modelCharacteristic = await deviceInfoService.getCharacteristic(\n    MODEL_NUMBER_SERVICE\n  );\n  const modelNumberValue = await modelCharacteristic.readValue();\n  const modelNumber = new TextDecoder().decode(modelNumberValue);\n  if (modelNumber.toUpperCase() !== \"GAN ROBOTCUBE\") {\n    throw new GANDeviceTypeError(\n      \"Requested device is not a GAN Robot\",\n      modelNumber\n    );\n  }\n};\n\ninterface ExperimentalBluetoothDevice\n  extends Omit<BluetoothDevice, \"addEventListener\"> {\n  watchAdvertisements: (options?: { signal: AbortSignal }) => Promise<void>;\n  addEventListener(\n    type: string,\n    listener: EventListenerOrEventListenerObject,\n    useCapture?: boolean | { once: boolean }\n  ): void;\n}\n\ninterface ExperimentalBluetooth extends Bluetooth {\n  getDevices?: () => ExperimentalBluetoothDevice[];\n}\n\nexport const connectToKnownGANRobots = (): Promise<\n  ExperimentalBluetoothDevice | false\n> => {\n  return new Promise(async (resolve) => {\n    const experimentalBluetooth = navigator.bluetooth as ExperimentalBluetooth;\n    if (!experimentalBluetooth.getDevices) {\n      resolve(false);\n      return;\n    }\n    const devices = await experimentalBluetooth.getDevices();\n    for (const device of devices) {\n      const abortController = new AbortController();\n      device.addEventListener(\n        \"advertisementreceived\",\n        async () => {\n          abortController.abort();\n          try {\n            await connectToGANRobot(device);\n            resolve(device);\n          } catch (e) {}\n        },\n        { once: true }\n      );\n      await device.watchAdvertisements({ signal: abortController.signal });\n    }\n  });\n};\n","import { createAction } from \"@reduxjs/toolkit\";\n\nconst actionPrefix = \"robot\";\n\nexport const registerRobot = createAction<BluetoothDevice>(\n  `${actionPrefix}/register_robot`\n);\n\nexport const unregisterRobot = createAction(`${actionPrefix}/unregister_robot`);\n\nexport const bluetoothDeviceSelected = createAction<BluetoothDevice>(\n  `${actionPrefix}/bluetooth_device_selected`\n);\n","import { createAction } from \"@reduxjs/toolkit\";\nimport { SnackbarMessage, OptionsObject, SnackbarKey } from \"notistack\";\n\nconst prefix = \"notisnackbar\";\n\nexport const enqueueSnackbar = createAction(\n  `${prefix}/enqueue-snackbar`,\n  (message: SnackbarMessage, options?: OptionsObject) => ({\n    payload: { message, options },\n  })\n);\n\nexport const closeSnackbar = createAction(\n  `${prefix}/close-snackbar`,\n  (key?: SnackbarKey) => ({\n    payload: { key },\n  })\n);\n","import { Reducer } from \"redux\";\nimport { configureStore, EnhancedStore } from \"@reduxjs/toolkit\";\nimport createSagaMiddleware, { Saga, Task, SagaIterator } from \"redux-saga\";\nimport { call, spawn, delay, all } from \"redux-saga/effects\";\n\n// ApplicationState will be dynamically populated from on-startup.ts scripts\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface ApplicationState {}\nconst reducerRegistry: Record<string, Reducer> = {};\n\nexport function registerReducer<TKey extends keyof ApplicationState>(\n  key: TKey,\n  reducer: Reducer<ApplicationState[TKey]>\n): void {\n  reducerRegistry[key] = reducer;\n}\n\nconst sagaRegistry: Saga[] = [];\n\nexport function registerSagas(sagas: Saga[]): void {\n  sagaRegistry.push(...sagas);\n}\n\nfunction* makeRestartable(saga: Saga): SagaIterator {\n  try {\n    yield call(saga);\n  } catch (e) {\n    console.error(\"Saga error, the saga will be restarted\", e);\n    yield delay(500);\n    yield call(makeRestartable, saga);\n  }\n}\n\nfunction* rootSaga() {\n  yield all(sagaRegistry.map((saga) => spawn(makeRestartable, saga)));\n}\n\ninterface AsyncStore extends EnhancedStore {\n  runSaga: <S extends Saga>(saga: S, ...args: Parameters<S>) => Task;\n}\n\nexport function createStore(): AsyncStore {\n  const sagaMiddleware = createSagaMiddleware();\n  const store = configureStore({\n    reducer: reducerRegistry,\n    middleware: [sagaMiddleware],\n  });\n  sagaMiddleware.run(rootSaga);\n  return {\n    ...store,\n    runSaga: sagaMiddleware.run,\n  };\n}\n","import { createAction } from \"@reduxjs/toolkit\";\n\nexport const appInitialized = createAction(\"app/initialized\");\n"],"sourceRoot":""}