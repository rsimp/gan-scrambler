{"version":3,"sources":["../src sync ///translations//.*/.json$","../src sync ///init-store/.(ts|tsx)$","core/snackbar/sagas.ts","core/utils/webpack.ts","core/cube/libs/tools.ts","core/cube/libs/coordinates.ts","core/cube/libs/algorithms.ts","core/cube/solvers/five-side-solver.ts","core/cube/libs/cube.ts","core/cube/libs/move-table.ts","core/cube/libs/pruning-table.ts","core/cube/libs/search.ts","core/utils/feature-detection.ts","core/hooks/useSessionStorage.ts","core/components/dialogs/error.tsx","app/incompatible-browser-dialoag/index.tsx","app/robot/widget/index.tsx","core/cube/scramblers/solve-criteria.ts","core/cube/scramblers/full.ts","core/cube/libs/scramble-pieces.ts","core/cube/solvers/cross-solver.ts","core/components/presentation.tsx","core/cube/libs/cube-preview.ts","app/cube-preview/index.tsx","app/cfop-scramble/index.tsx","core/cube/scramblers/cfop.ts","app/random-scramble/index.tsx","app/manual-scramble/index.tsx","app/main-screen/index.tsx","translations/index.ts","serviceWorker.ts","index.tsx","core/redux/reducer-helpers.ts","app/robot/store/reducer.ts","core/utils/translation.tsx","core/utils/arrays.ts","app/robot/store/sagas.ts","app/robot/store/init-store.ts","app/robot/store/actions.ts","app/robot/bluetooth.ts","app/robot/store/selectors.ts","core/snackbar/actions.ts","core/redux/store.ts","app/main-screen/actions.ts"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","processSnackbarActions","watchSnackbarActions","snackbar","action","enqueueSnackbar","match","current","payload","message","options","closeSnackbar","key","takeEvery","type","importAll","requireContext","importCache","forEach","moduleKey","factorials","factorial","n","binomials","choose","k","length","s","nextRow","i","prev","push","getRandomInt","min","max","Math","floor","random","rotateLeft","pieces","left","right","original","rotateRight","getIndexFromOrientation","flipCount","sum","getOrientationFromIndex","index","numPieces","numFlips","orientation","parity","ori","getParity","j","getIndexFromPermutation","affected","reversed","offset","position","edges","indexOf","unshift","permutation","getPermutationFromIndex","size","base","binomial","powers","2","validateAlgorithm","algorithm","test","wideMoves","f","r","u","b","l","d","M","S","E","rotations","x","y","z","normalize","moves","reduce","acc","move","axis","charAt","pow","concat","m","output","totalRotation","includes","outputMove","parseAlgorithm","returnTotalRotation","result","moveNum","URFToDLF","slice","merge","invertAlgorithm","reverse","inv","join","formatAlgorithm","sequence","trim","Edges","Corners","identity","ep","eo","cp","co","allMoves","fiveSideMoves","moveHelper","cube","moveIndex","fn","doEdgeMove","newCube","fromIndex","toIndex","Array","doCornerMove","doMove","doAlgorithm","MoveTable","settings","name","defaultIndex","solvedIndexes","table","this","cubieMove","getVector","getIndex","vector","createMoveHandler","createMoveTable","inverse","createEdgePermutationTable","getCorrectOrientations","numStates","indexes","target","every","piece","createEdgeOrientationTable","createCornerOrientationTable","PruningTable","moveTables","computePruningTable","value","obj","depth","done","permutations","arg","helper","arr","copy","cartesian","data","setPruningValue","find","check","getPruningValue","currentIndex","Search","createTables","initialized","pruningTables","moveTableNames","moveTableIndexes","sort","a","mappedTables","pruningTable","solution","lastMove","minimumDistance","power","distance","handleSolution","updatedIndexes","search","initialize","maxDepth","format","solutionRotation","scramble","formatted","phaseTwoMoves","phaseTwoSearch","getMergeCoord","fiveSideSearch","args","phaseTwoSolution","solve","fiveSideSolver","isArray","solveCube","cubeState","detectBluetoothSupport","Boolean","navigator","bluetooth","requestDevice","ErrorDialog","props","Dialog","open","isOpen","onClose","DialogTitle","disableTypography","classes","root","className","Warning","Typography","variant","title","DialogContent","DialogContentText","children","DialogActions","Button","onClick","color","IncompatibleBrowserDialog","href","RobotWidget","dispatch","useDispatch","robotDevice","useSelector","getRobotDevice","isBluetoothSupported","useState","isDialogOpen","setIsDialogOpen","handleBluetoothClick","useCallback","filters","namePrefix","optionalServices","PRIMARY_SERVICE","DEVICE_INFO_SERVICE","device","bluetoothDeviceSelected","DOMException","console","error","openDialog","closeDialog","IconButton","BluetoothConnected","Bluetooth","BluetoothDisabled","arePiecesPermutated","corners","edgeIdx","cornerIdx","arePiecesOriented","arePiecesPermutatedAndOriented","isCrossSolved","isTopCrossSolved","isF2LSolved","isFirstLookOLLSolved","isOLLSolved","isFirstLookPLLSolved","rotation","isCubeSolved","cubeFaces","moveModifiers","generateScramble","total","isSolved","previousCubeStates","Set","currentState","newState","stateHashCode","getStateHashCode","has","add","cpIndex","coIndex","epIndex","eoIndex","getEdgeOrientation","enabled","orientLastLayer","fill","getCornerOrientation","getPermutationFromEnabled","getScrambleForPieces","scrambleEdges","scrambleCorners","isScrambleSolved","scrambleState","CrossSearch","crossSolver","ButtonRow","tag","div","ContentContainer","Tooltip","centerFacelets","cornerFacelets","edgeFacelets","mod","getFaceletIndex","facelet","Number","getCornerFacelet","cornerIndex","orientationIndex","getEdgeFacelet","edgeIndex","CubePreview","cubeIndexes","scrambleCode","colorMap","defaultColorMap","svgString","facelets","centerIndex","corner","faceletIndex","faceletValue","filter","edge","getFaceletArray","faceKey","replace","template","dangerouslySetInnerHTML","__html","U","R","F","D","L","B","G","invertedColorMap","crossFilter","f2lFilter","ollFilter","cross","f2l","firstLookOll","secondLookOll","oll","CFOPScramble","cfopPhase","setCFOPPhase","setScramble","robotServer","getRobotServer","handleScrambleClick","solveCode","handleCFOPPhaseChange","phase","handleSendClick","scrambleSubmitted","tooltipText","FormControl","component","Select","onChange","MenuItem","arrow","disabled","RandomScramble","InputLabel","htmlFor","OutlinedInput","multiline","fullWidth","ManualScramble","previewCode","hasError","processScrambleInput","fiveSideSolve","fiveSideScramble","handleManualScrambleChange","event","currentTarget","handleManualScrambleKeyDown","preventDefault","stopPropagation","noValidate","autoComplete","TextField","label","rowsMax","InputLabelProps","shrink","helperText","onKeyDown","Screen","MenuItemContent","CompactMenuItemContent","IconContainer","IconWrapper","MainScreen","React","navigationValue","setNavigation","sessionStorageKey","defaultState","storageValue","sessionStorage","getItem","JSON","parse","setValue","useEffect","setItem","stringify","useSessionStorage","showIncompatibleDialog","setShowIncompatibleDialog","handleIncompatibleDialogClose","appInitialized","AppBar","Toolbar","Paper","List","ListItem","button","selected","ListItemIcon","Shuffle","ListItemText","primary","Layers","Edit","BottomNavigation","showLabels","_","newValue","BottomNavigationAction","icon","aria-label","translations","require","flattenTranslations","trans","currentKeys","messageMap","filepath","locale","pathParse","setLanguageDefault","languageCode","preferredLocale","languageMessages","toLocaleLowerCase","startsWith","language","messages","toLowerCase","isLocalhost","window","location","hostname","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","log","onUpdate","onSuccess","catch","createRef","store","createStore","runSaga","onClickDismiss","ReactDOM","render","StylesProvider","injectFirst","ref","maxSnack","Close","fontSize","document","getElementById","renderApp","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","ready","unregister","reload","checkValidServiceWorker","payloadReducer","combineReducers","createReducer","builder","addCase","robotConnected","robotDisconnected","translate","values","chunkReducer","chunckSize","currentChunk","accumulator","currentValue","executeScramble","executeChunk","watchForScrambleSubmitted","handleBluetoothDeviceSelected","connectToGANRobot","watchForBluetoothDeviceSelected","listenForDisconnect","watchForRobotConnected","connectToKnownGANRobots","handleAppInitialized","watchForAppInitialized","moveMap","R2","F2","D2","L2","B2","GANDeviceTypeError","modelNumber","getGANEncoding","split","chunkedArr","Uint8Array","select","scrambleChunk","call","chunk","getPrimaryService","primaryService","getCharacteristic","SCRAMBLE_CHARACTERISTIC","scrambleExecuteCharacteristic","writeValue","ROBOT_STATUS_CHARACTERISTIC","statusCharacteristic","hasHadNonZeroValue","readValue","robotStatus","getUint8","delay","put","deviceName","connect","server","deviceInfoService","MODEL_NUMBER_SERVICE","modelCharacteristic","modelNumberValue","TextDecoder","decode","toUpperCase","disconnectChannel","eventChannel","emitter","removeEventListener","race","disconnectEvent","take","robotConnectedAction","close","getDevices","devices","deviceChannel","abortController","AbortController","abort","once","watchAdvertisements","signal","connectableDevice","registerAction","registerReducer","reducer","registerSagas","sagas","actionPrefix","createAction","Promise","gatt","undefined","serviceId","service","characteristicId","characteristic","robot","connected","prefix","makeRestartable","rootSaga","reducerRegistry","sagaRegistry","saga","all","spawn","sagaMiddleware","createSagaMiddleware","configureStore","middleware","run"],"mappings":"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","file":"static/js/main.a92698dd.chunk.js","sourcesContent":["var map = {\n\t\"./translations/en-us.json\": 158\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 157;","var map = {\n\t\"./app/robot/store/init-store.ts\": 167\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 165;","import { ProviderContext } from \"notistack\";\nimport { takeEvery } from \"typed-redux-saga/macro\";\nimport { Action } from \"@reduxjs/toolkit\";\n\nimport { SagaIterator } from \"core/redux/types\";\nimport { enqueueSnackbar, closeSnackbar } from \"core/snackbar/actions\";\n\nfunction* processSnackbarActions(\n  snackbar: React.RefObject<ProviderContext>,\n  action: Action\n) {\n  if (enqueueSnackbar.match(action)) {\n    snackbar.current?.enqueueSnackbar(\n      action.payload.message,\n      action.payload.options\n    );\n  } else if (closeSnackbar.match(action)) {\n    snackbar.current?.closeSnackbar(action.payload.key);\n  }\n}\n\nexport function* watchSnackbarActions(\n  snackbar: React.RefObject<ProviderContext>\n): SagaIterator {\n  return yield* takeEvery(\n    [enqueueSnackbar.type, closeSnackbar.type],\n    processSnackbarActions,\n    snackbar\n  );\n}\n","export function importAll<T = unknown>(\n  requireContext: __WebpackModuleApi.RequireContext\n): Record<string, T> {\n  const importCache: Record<string, T> = {};\n  requireContext\n    .keys()\n    .forEach(\n      (moduleKey: string) =>\n        (importCache[moduleKey] = requireContext(moduleKey))\n    );\n  return importCache;\n}\n","const factorials: number[] = [];\n\n/**\n * Calculates n factorial and attempts to cache\n * as much information as possible.\n */\nexport const factorial = (n: number): number => {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n\n  if (factorials[n] > 0) {\n    return factorials[n];\n  }\n\n  factorials[n] = factorial(n - 1) * n;\n\n  return factorials[n];\n};\n\nconst binomials: number[][] = [];\n\n/**\n * Calculates n choose k using cached binomial numbers.\n */\nexport const choose = (n: number, k: number): number => {\n  if (k > n) {\n    return 0;\n  }\n\n  while (n >= binomials.length) {\n    const s = binomials.length;\n    const nextRow = [];\n\n    nextRow[0] = 1;\n\n    for (let i = 1, prev = s - 1; i < s; i += 1) {\n      nextRow[i] = binomials[prev][i - 1] + binomials[prev][i];\n    }\n\n    nextRow[s] = 1;\n\n    binomials.push(nextRow);\n  }\n\n  return binomials[n][k];\n};\n\n/**\n * Cartesian product of a given nested array.\n */\nexport const cartesian = (arg: number[][]): number[][] => {\n  const result: number[][] = [];\n  const max = arg.length - 1;\n\n  const helper = (arr: number[], i: number) => {\n    for (let j = 0; j < arg[i].length; j += 1) {\n      const copy = arr.slice(0);\n\n      copy.push(arg[i][j]);\n\n      if (i === max) {\n        result.push(copy);\n      } else {\n        helper(copy, i + 1);\n      }\n    }\n  };\n\n  helper([], 0);\n\n  return result;\n};\n\n// Ger a random integer in the provided range, inclusive.\nexport const getRandomInt = (min: number, max: number): number =>\n  Math.floor(Math.random() * (max - min + 1)) + min;\n\nexport const permute = (n: number, r: number): number =>\n  factorial(n) / factorial(n - r);\n\n/**\n * Rotates the subarray containing the affected pieces\n * to the right by one.\n */\nexport const rotateParts = (pieces: number[], affected: number[]): number[] => {\n  const updatedPieces = pieces.slice(0);\n\n  updatedPieces[affected[0]] = pieces[affected[affected.length - 1]];\n\n  for (let i = 1; i < affected.length; i += 1) {\n    updatedPieces[affected[i]] = pieces[affected[i - 1]];\n  }\n\n  return updatedPieces;\n};\n","import { factorial, choose } from \"core/cube/libs/tools\";\n\n/**\n * In-place rotation of the subarray determined by the two\n * indexes left and right to the left by one.\n */\nconst rotateLeft = (pieces: number[], left: number, right: number): void => {\n  const original = pieces[left];\n\n  for (let i = left; i < right; i += 1) {\n    pieces[i] = pieces[i + 1];\n  }\n\n  pieces[right] = original;\n};\n\n/**\n * In-place rotation of the subarray determined by the two\n * indexes left and right to the right by one.\n */\nconst rotateRight = (pieces: number[], left: number, right: number): void => {\n  const original = pieces[right];\n\n  for (let i = right; i > left; i -= 1) {\n    pieces[i] = pieces[i - 1];\n  }\n\n  pieces[left] = original;\n};\n\n/**\n * Bijection which encodes a given orientation vector to an unique index.\n * The flip count is the number of ways in which a single piece in the\n * orientation vector may be oriented. For edges, this number is 2 flips,\n * and for corners there are 3 possible twists. Thus, edges are encoded\n * using a binary number system, and corners using a trinary number system.\n */\nexport const getIndexFromOrientation = (\n  pieces: number[],\n  flipCount: number\n): number => {\n  let sum = 0;\n\n  // Note that we do not include the last element in the vector here.\n  // This is because the orientation of the last piece if determined\n  // by the orientation of all the other pieces - when you rotate any\n  // axis on the cube, only an even number of pieces is affected.\n  for (let i = 0; i < pieces.length - 1; i += 1) {\n    sum = flipCount * sum + pieces[i];\n  }\n\n  return sum;\n};\n\n/**\n * Returns the original orientation vector given the number which\n * describes it, the number of pieces in the vector, and the number\n * of ways in which an individual piece may be oriented.\n */\nexport const getOrientationFromIndex = (\n  index: number,\n  numPieces: number,\n  numFlips: number\n): number[] => {\n  const orientation = [];\n\n  let parity = 0;\n\n  for (let i = numPieces - 2; i >= 0; i -= 1) {\n    const ori = index % numFlips;\n    index = Math.floor(index / numFlips);\n    orientation[i] = ori;\n    parity += ori;\n  }\n\n  // Restore the last piece based on the orientation of the other pieces.\n  orientation[numPieces - 1] = (numFlips - (parity % numFlips)) % numFlips;\n\n  return orientation;\n};\n\n/**\n * Each move on a cube perform an even number of swaps when considering\n * both edges and corner pieces at the same time. Thus, only half of all\n * cube states are reachable using legal moves. This also implies that\n * for a cube to be solvable, the parity of both corners and edges must\n * both be either even or odd. We use this to verify that a cube is\n * solvable when generating random state scrambles, and also to\n * describe the overall cube permutation using only 10 edges, 6 corners\n * and the parity of either the corners or the edges.\n */\nexport const getParity = (pieces: number[]): number => {\n  let sum = 0;\n\n  for (let i = pieces.length - 1; i > 0; i -= 1) {\n    for (let j = i - 1; j >= 0; j -= 1) {\n      if (pieces[j] > pieces[i]) {\n        sum += 1;\n      }\n    }\n  }\n\n  return sum % 2;\n};\n\n/**\n * Encodes the permutation of the affected pieces within the entire\n * permutation vector, by encoding both their position and then the\n * permutation of the affected pieces within the permutation vector\n * using a variable-base number system. If reversed is true, the\n * values are assigned right-to-left. This is used in the Kociemba\n * solver, so that 0 is used as the solved coordinate for the move\n * table describing the UD-slice edges.\n */\nexport const getIndexFromPermutation = (\n  pieces: number[],\n  affected: number[],\n  reversed = false\n): number => {\n  let offset = pieces.length - 1;\n  let position = 0;\n  let k = 1;\n\n  // Store the permutation of the subarray containing\n  // only the affected pieces.\n  const edges = [];\n\n  // Encode the position of the affected pieces in a number\n  // from 0 up to n choose k, where n is the number of pieces\n  // in the permutation vector and k is the number of affected pieces.\n  if (reversed) {\n    for (let n = pieces.length - 1; n >= 0; n -= 1) {\n      if (affected.indexOf(pieces[n]) >= 0) {\n        offset = Math.min(offset, pieces[n]);\n        position += choose(pieces.length - 1 - n, k);\n        edges.unshift(pieces[n]);\n        k += 1;\n      }\n    }\n  } else {\n    for (let n = 0; n < pieces.length; n += 1) {\n      if (affected.indexOf(pieces[n]) >= 0) {\n        offset = Math.min(offset, pieces[n]);\n        position += choose(n, k);\n        edges.push(pieces[n]);\n        k += 1;\n      }\n    }\n  }\n\n  let permutation = 0;\n\n  // Encode the position of the subarray as a number from 0 and up\n  // to n factorial, where n is the number of affected pieces.\n  for (let i = edges.length - 1; i > 0; i -= 1) {\n    let s = 0;\n\n    while (edges[i] !== affected[i]) {\n      rotateLeft(edges, 0, i);\n      s += 1;\n    }\n\n    permutation = (i + 1) * permutation + s;\n  }\n\n  // Encode both the position and the permutation\n  // as a number using a variable base.\n  return factorial(affected.length) * position + permutation;\n};\n\n/**\n * Restores the permutation described by an index, number of affected\n * pieces and the permutation vector size. If reversed is true, the\n * indexes have been assigned right-to-left.\n */\nexport const getPermutationFromIndex = (\n  index: number,\n  affected: number[],\n  size: number,\n  reversed = false\n): number[] => {\n  const base = factorial(affected.length);\n\n  let position = Math.floor(index / base);\n  let permutation = index % base;\n\n  const pieces = [];\n\n  for (let i = 0; i < size; i += 1) {\n    pieces.push(-1);\n  }\n\n  for (let i = 1; i < affected.length; i += 1) {\n    let s = permutation % (i + 1);\n    permutation = Math.floor(permutation / (i + 1));\n\n    while (s > 0) {\n      rotateRight(affected, 0, i);\n      s -= 1;\n    }\n  }\n\n  let k = affected.length - 1;\n\n  if (reversed) {\n    for (let n = 0; n < size; n += 1) {\n      const binomial = choose(size - 1 - n, k + 1);\n\n      if (position - binomial >= 0) {\n        pieces[n] = affected[affected.length - 1 - k];\n        position -= binomial;\n        k -= 1;\n      }\n    }\n  } else {\n    for (let n = size - 1; n >= 0; n -= 1) {\n      const binomial = choose(n, k + 1);\n\n      if (position - binomial >= 0) {\n        pieces[n] = affected[k];\n        position -= binomial;\n        k -= 1;\n      }\n    }\n  }\n\n  return pieces;\n};\n","// Numeric representation of the different powers of moves.\nconst powers: Record<string, number> = {\n  \"\": 0,\n  2: 1,\n  \"'\": 2,\n};\n\n/**\n * Check whether or not we are able to parse the given algorithm string.\n */\nexport const validateAlgorithm = (algorithm: string): boolean =>\n  /^([FRUBLDfrubldxyzMSE][2']?\\s*)+$/.test(algorithm);\n\n// Map single-power wide moves to a rotation + moves.\nconst wideMoves: Record<string, string[]> = {\n  f: [\"z\", \"B\"],\n  r: [\"x\", \"L\"],\n  u: [\"y\", \"D\"],\n  b: [\"z'\", \"F\"],\n  l: [\"x'\", \"R\"],\n  d: [\"y'\", \"U\"],\n  M: [\"x'\", \"R\", \"L'\"],\n  S: [\"z\", \"F'\", \"B\"],\n  E: [\"y'\", \"U\", \"D'\"],\n};\n\n// Specifies the translation of FRUBLD as performed by rotations.\nconst rotations: Record<string, string> = {\n  x: \"DRFULB\",\n  y: \"RBULFD\",\n  z: \"FULBDR\",\n};\n\n/**\n * Strip rotations and wide moves from an algorithm. Returns\n * an array of moves as strings.\n */\nconst normalize = (moves: string[]) => {\n  // Replace wide moves with rotations + moves.\n  moves = moves.reduce((acc: string[], move: string) => {\n    const axis: keyof typeof wideMoves = move.charAt(0);\n    const pow = move.charAt(1);\n\n    if (wideMoves[axis]) {\n      return acc.concat(wideMoves[axis].map((m) => m + pow));\n    }\n\n    return acc.concat(move);\n  }, []);\n\n  let output: string[] = [];\n\n  // We store all rotations that were encountered, to map the\n  // solution to the same final rotation as the scramble.\n  const totalRotation: string[] = [];\n\n  // Remove rotations by mapping all moves to the right of the rotation.\n  for (let i = moves.length - 1; i >= 0; i -= 1) {\n    const axis = moves[i].charAt(0);\n    const pow = powers[moves[i].charAt(1)];\n\n    if (\"xyz\".includes(axis)) {\n      totalRotation.unshift(moves[i]);\n\n      for (let j = 0; j <= pow; j += 1) {\n        output = output.map(\n          (outputMove) =>\n            rotations[axis][\"FRUBLD\".indexOf(outputMove[0])] +\n            outputMove.charAt(1)\n        );\n      }\n    } else {\n      output.unshift(moves[i]);\n    }\n  }\n\n  return [output, totalRotation];\n};\n\n/**\n * Parses a scramble, returning an array of integers describing the moves.\n */\nexport function parseAlgorithm(algorithm: string): number[];\nexport function parseAlgorithm(\n  algorithm: string,\n  returnTotalRotation: boolean\n): [number[], string[]];\nexport function parseAlgorithm(\n  algorithm: string,\n  returnTotalRotation = false\n): number[] | [number[], string[]] {\n  if (!validateAlgorithm(algorithm)) {\n    throw new Error(\"Invalid algorithm provided to algorithm parser\");\n  }\n\n  const result: number[] = [];\n\n  const [moves, totalRotation] = normalize(\n    algorithm.match(/[FRUBLDfrubldxyzMSE][2']?/g) || []\n  );\n\n  moves.forEach((move) => {\n    const moveNum = \"FRUBLD\".indexOf(move.charAt(0));\n    const pow = powers[move.charAt(1)];\n    result.push(moveNum * 3 + pow);\n  });\n\n  if (returnTotalRotation) {\n    return [result, totalRotation];\n  }\n\n  return result;\n}\n\n/**\n * Computes the inverse of a given algorithm. Rotations are supported.\n */\nexport const invertAlgorithm = (algorithm: string): string => {\n  if (!validateAlgorithm(algorithm)) {\n    throw new Error(\"Invalid algorithm provided to algorithm parser\");\n  }\n\n  const moves = algorithm.match(/[FRUBLDfrubldxyzMSE][2']?/g) || [];\n\n  const inverted = moves.reverse().map((move) => {\n    const axis = move.charAt(0);\n    const pow = powers[move.charAt(1)];\n    const inv = pow - 2 * (pow % 3) + 2;\n\n    if (inv === 1) {\n      return `${axis}2`;\n    }\n\n    if (inv === 2) {\n      return `${axis}'`;\n    }\n\n    return axis;\n  });\n\n  return inverted.join(\" \");\n};\n\n/**\n * Convert an array of integers to a human-readable representation.\n */\nexport const formatAlgorithm = (moves: number[]): string => {\n  let sequence = \"\";\n\n  moves.forEach((move) => {\n    sequence += \" \";\n    sequence += \"FRUBLD\".charAt(Math.floor(move / 3));\n\n    switch (move % 3) {\n      case 1:\n        sequence += \"2\";\n        break;\n\n      case 2:\n        sequence += \"'\";\n        break;\n\n      default:\n    }\n  });\n\n  // Trim extra spaces.\n  return sequence.trim();\n};\n","import {\n  getIndexFromPermutation,\n  getPermutationFromIndex,\n  getIndexFromOrientation,\n  getParity,\n} from \"core/cube/libs/coordinates\";\n\nimport {\n  MoveTable,\n  createEdgePermutationTable,\n  createCornerPermutationTable,\n  createEdgeOrientationTable,\n  createCornerOrientationTable,\n} from \"core/cube/libs/move-table\";\n\nimport Search, { SearchSolution } from \"core/cube/libs/search\";\n\nimport { fiveSideMoves, CubeIndexes } from \"core/cube/libs/cube\";\n\n// In phase two, only quarter moves of U and D and double turns of\n// all the other faces are allowed, in order to keep the cube in\n// the phase two group G1.\nconst phaseTwoMoves = [10, 4, 13, 6, 7, 8, 15, 16, 17];\n\n// The following tables are being used in both phases.\nlet parity: MoveTable;\nlet URFToDLF: MoveTable;\nlet slice: MoveTable;\nlet merge: number[][];\n\nconst phaseTwoSearch = new Search(() => {\n  // In order to start phase two, we need to know the positions\n  // in which the pieces landed after solving the cube into G1.\n  // Since returning to the cubie level to perform the solution\n  // would be slow, we use two helper tables in phase one which\n  // later are merged into the final phase two coordinate.\n  const getMergeCoord = (x: number, y: number) => {\n    const a = getPermutationFromIndex(x, [0, 1, 2], 12);\n    const b = getPermutationFromIndex(y, [3, 4, 5], 12);\n\n    for (let i = 0; i < 8; i += 1) {\n      if (a[i] !== -1) {\n        if (b[i] !== -1) {\n          return -1;\n        }\n        b[i] = a[i];\n      }\n    }\n\n    return getIndexFromPermutation(b, [0, 1, 2, 3, 4, 5]);\n  };\n\n  merge = [];\n\n  // Due to the sorted nature of our coordinate definitions, the\n  // index of both the coordinates will be less than 336 when phase\n  // one is finished. This allows for a pretty small merging table.\n  for (let i = 0; i < 336; i += 1) {\n    merge.push([]);\n\n    for (let j = 0; j < 336; j += 1) {\n      merge[i][j] = getMergeCoord(i, j);\n    }\n  }\n\n  return {\n    moveTables: [\n      // The permutation of the slice pices, which already\n      // are in the correct positions on the cube.\n      new MoveTable({\n        name: \"slicePermutation\",\n        size: 24,\n        table: slice.table,\n      }),\n\n      parity,\n      URFToDLF,\n\n      createEdgePermutationTable({\n        name: \"URToDF\",\n        size: 20160,\n        moves: phaseTwoMoves,\n        affected: [0, 1, 2, 3, 4, 5],\n      }),\n    ],\n\n    pruningTables: [\n      [\"slicePermutation\", \"parity\", \"URFToDLF\"],\n      [\"slicePermutation\", \"parity\", \"URToDF\"],\n    ],\n  };\n}, phaseTwoMoves);\n\nclass TwoPhaseSearch extends Search {\n  maxDepth: number;\n  solution: number[];\n\n  constructor(...args: ConstructorParameters<typeof Search>) {\n    super(...args);\n\n    this.maxDepth = 40;\n    this.solution = [];\n  }\n\n  handleSolution(\n    solution: number[],\n    indexes: number[]\n  ): SearchSolution | false {\n    const lastMove = solution.slice(-1)[0];\n\n    // We do not allow solutions which end in a phase two move, as we then\n    // would end up duplicating work.\n    if (\n      lastMove % 2 === 0 &&\n      Math.floor(lastMove / 3) === 6 &&\n      Math.floor(lastMove / 3) === 15\n    ) {\n      return false;\n    }\n\n    const phaseTwoSolution = phaseTwoSearch.solve({\n      indexes: [\n        indexes[3],\n        indexes[4],\n        indexes[5],\n        merge[indexes[6]][indexes[7]],\n      ],\n      maxDepth: this.maxDepth - solution.length,\n      lastMove,\n      format: false,\n    });\n\n    if (phaseTwoSolution) {\n      this.solution = solution.concat(phaseTwoSolution.solution);\n\n      if (this.maxDepth <= this.settings.maxDepth) {\n        return {\n          solution: this.solution,\n          indexes,\n        };\n      }\n\n      this.maxDepth = this.solution.length - 1;\n    }\n\n    return false;\n  }\n}\n\nexport const fiveSideSearch = new TwoPhaseSearch(() => {\n  // The parity move table is so small that we inline it. It\n  // describes the parity of both the edge and corner pieces,\n  // which must be equal for the cube to be solvable. The\n  // coordinate is included in both phases, but only used\n  // in phase two.\n  parity = new MoveTable({\n    name: \"parity\",\n\n    size: 2,\n\n    table: [\n      [1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1],\n      [0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0],\n    ],\n  });\n\n  URFToDLF = createCornerPermutationTable({\n    name: \"URFToDLF\",\n    affected: [0, 1, 2, 3, 4, 5],\n  });\n\n  // This table is not used directly. This coordinate modulo 24 gives the\n  // permutation of the subarray containing the UD-slice pieces, while this\n  // coordinate divided by 24 gives the position of the UD-slice pieces.\n  // Two smaller move tables are created using this table, one to solve the\n  // position of the UD-slice pieces in phase one, and one to solve the\n  // pieces in phase two. Due to the reduced move set in phase two, the pruning\n  // table for this coordinate is smaller than it would normally be.\n  slice = createEdgePermutationTable({\n    name: \"slice\",\n    affected: [8, 9, 10, 11],\n    reversed: true,\n  });\n\n  // Initialize phase two, since it now is guaranteed that the\n  // heper move tables have finished generating.\n  phaseTwoSearch.initialize();\n\n  return {\n    moveTables: [\n      new MoveTable({\n        // The position of the slice edges. When this coordinate is\n        // solved, the UD-slice pieces are in the UD-slice, but they\n        // are not necessarily permuted.\n        name: \"slicePosition\",\n        size: 495,\n        table: slice.table,\n        doMove: (table, index, move) =>\n          Math.floor(table[index * 24][move] / 24),\n      }),\n\n      createCornerOrientationTable({\n        name: \"twist\",\n        affected: [0, 1, 2, 3, 4, 5, 6, 7],\n      }),\n\n      createEdgeOrientationTable({\n        name: \"flip\",\n        affected: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],\n      }),\n\n      slice,\n      parity,\n      URFToDLF,\n\n      createEdgePermutationTable({\n        name: \"URToUL\",\n        affected: [0, 1, 2],\n      }),\n\n      createEdgePermutationTable({\n        name: \"UBToDF\",\n        affected: [3, 4, 5],\n      }),\n    ],\n\n    pruningTables: [\n      [\"slicePosition\", \"flip\"],\n      [\"slicePosition\", \"twist\"],\n    ],\n  };\n}, fiveSideMoves);\n\nexport const fiveSideSolver = (\n  scramble: string | number[],\n  maxDepth = 40\n): false | string => {\n  if (Array.isArray(scramble)) {\n    return fiveSideSearch.solve({\n      indexes: scramble,\n      maxDepth,\n    });\n  }\n\n  return fiveSideSearch.solve({\n    scramble,\n    maxDepth,\n  });\n};\n\nexport const solveCube = (\n  cubeState: CubeIndexes\n): ReturnType<typeof fiveSideSolver> =>\n  fiveSideSolver([\n    Math.floor(\n      getIndexFromPermutation(cubeState.ep, [8, 9, 10, 11], true) / 24\n    ),\n    getIndexFromOrientation(cubeState.co, 3),\n    getIndexFromOrientation(cubeState.eo, 2),\n    getIndexFromPermutation(cubeState.ep, [8, 9, 10, 11], true),\n    getParity(cubeState.cp),\n    getIndexFromPermutation(cubeState.cp, [0, 1, 2, 3, 4, 5]),\n    getIndexFromPermutation(cubeState.ep, [0, 1, 2]),\n    getIndexFromPermutation(cubeState.ep, [3, 4, 5]),\n  ]);\n","import { parseAlgorithm } from \"./algorithms\";\n\nexport const Centers = {\n  U: 0,\n  R: 1,\n  F: 2,\n  D: 3,\n  L: 4,\n  B: 5,\n};\n\nexport const Edges = {\n  UR: 0,\n  UF: 1,\n  UL: 2,\n  UB: 3,\n  DR: 4,\n  DF: 5,\n  DL: 6,\n  DB: 7,\n  FR: 8,\n  FL: 9,\n  BL: 10,\n  BR: 11,\n};\n\nexport const Corners = {\n  URF: 0,\n  UFL: 1,\n  ULB: 2,\n  UBR: 3,\n  DFR: 4,\n  DLF: 5,\n  DBL: 6,\n  DBR: 7,\n};\n\nconst { UR, UF, UL, UB, DR, DF, DL, DB, FR, FL, BL, BR } = Edges;\nconst { URF, UFL, ULB, UBR, DFR, DLF, DBL, DBR } = Corners;\n\nexport interface CubeIndexes {\n  ep: number[];\n  eo: number[];\n  cp: number[];\n  co: number[];\n}\n\n// The identity cube.\nexport const identity: CubeIndexes = {\n  ep: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],\n  eo: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n  cp: [0, 1, 2, 3, 4, 5, 6, 7],\n  co: [0, 0, 0, 0, 0, 0, 0, 0],\n};\n\nexport const moves = [\n  // F\n  {\n    cp: [UFL, DLF, 2, 3, URF, DFR, 6, 7],\n    co: [1, 2, 0, 0, 2, 1, 0, 0],\n    ep: [0, FL, 2, 3, 4, FR, 6, 7, UF, DF, 10, 11],\n    eo: [0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0],\n  },\n\n  // R\n  {\n    cp: [DFR, 1, 2, URF, DBR, 5, 6, UBR],\n    co: [2, 0, 0, 1, 1, 0, 0, 2],\n    ep: [FR, 1, 2, 3, BR, 5, 6, 7, DR, 9, 10, UR],\n    eo: identity.eo,\n  },\n\n  // U\n  {\n    cp: [UBR, URF, UFL, ULB, 4, 5, 6, 7],\n    co: identity.co,\n    ep: [UB, UR, UF, UL, 4, 5, 6, 7, 8, 9, 10, 11],\n    eo: identity.eo,\n  },\n\n  // B\n  {\n    cp: [0, 1, UBR, DBR, 4, 5, ULB, DBL],\n    co: [0, 0, 1, 2, 0, 0, 2, 1],\n    ep: [0, 1, 2, BR, 4, 5, 6, BL, 8, 9, UB, DB],\n    eo: [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1],\n  },\n\n  // L\n  {\n    cp: [0, ULB, DBL, 3, 4, UFL, DLF, 7],\n    co: [0, 1, 2, 0, 0, 2, 1, 0],\n    ep: [0, 1, BL, 3, 4, 5, FL, 7, 8, UL, DL, 11],\n    eo: identity.eo,\n  },\n\n  // D\n  {\n    cp: [0, 1, 2, 3, DLF, DBL, DBR, DFR],\n    co: identity.co,\n    ep: [0, 1, 2, 3, DF, DL, DB, DR, 8, 9, 10, 11],\n    eo: identity.eo,\n  },\n];\n\nexport const allMoves = [\n  0, // F\n  1,\n  2,\n  3, // R\n  4,\n  5,\n  6, // U\n  7,\n  8,\n  9, // B\n  10,\n  11,\n  12, // L\n  13,\n  14,\n  15, // D\n  16,\n  17,\n];\n\nexport const fiveSideMoves = [\n  3,\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  10,\n  11,\n  12,\n  13,\n  14,\n  15,\n  16,\n  17,\n];\n\nexport const moveHelper = <T>(\n  cube: T,\n  moveIndex: number,\n  fn: (cube: T, move: CubeIndexes) => T\n): T => {\n  const move = moves[Math.floor(moveIndex / 3)];\n  const pow = (moveIndex % 3) + 1;\n  for (let i = 0; i < pow; i++) {\n    cube = fn(cube, move);\n  }\n  return cube;\n};\n\nexport const doEdgeMove = (\n  cube: Pick<CubeIndexes, \"eo\" | \"ep\">,\n  move: CubeIndexes\n): typeof cube =>\n  move.ep.reduce(\n    (newCube, fromIndex, toIndex) => {\n      newCube.ep[toIndex] = cube.ep[fromIndex];\n      newCube.eo[toIndex] = (cube.eo[fromIndex] + move.eo[toIndex]) % 2;\n      return newCube;\n    },\n    {\n      ep: new Array(12),\n      eo: new Array(12),\n    }\n  );\n\nexport const doCornerMove = (\n  cube: Pick<CubeIndexes, \"co\" | \"cp\">,\n  move: CubeIndexes\n): typeof cube =>\n  move.cp.reduce(\n    (newCube, fromIndex, toIndex) => {\n      newCube.cp[toIndex] = cube.cp[fromIndex];\n      newCube.co[toIndex] = (cube.co[fromIndex] + move.co[toIndex]) % 3;\n      return newCube;\n    },\n    {\n      cp: new Array(8),\n      co: new Array(8),\n    }\n  );\n\nexport const doMove = (cube: CubeIndexes, moveIndex: number): CubeIndexes => {\n  return {\n    ...moveHelper(cube, moveIndex, doCornerMove),\n    ...moveHelper(cube, moveIndex, doEdgeMove),\n  };\n};\n\nexport const doAlgorithm = (algorithm: string, cube = identity): CubeIndexes =>\n  !algorithm ? cube : parseAlgorithm(algorithm).reduce(doMove, cube);\n","import {\n  getPermutationFromIndex,\n  getIndexFromPermutation,\n  getOrientationFromIndex,\n  getIndexFromOrientation,\n} from \"./coordinates\";\n\nimport {\n  doEdgeMove,\n  doCornerMove,\n  moveHelper,\n  allMoves,\n  identity,\n} from \"./cube\";\n\nimport { factorial } from \"./tools\";\n\n/**\n * Create a function which performs a move on a coordinate.\n */\nconst createMoveHandler = (\n  getVector: GetVectorCallback,\n  cubieMove: CubieMoveCallback,\n  getIndex: GetIndexCallback\n) => (index: number, move: number) => {\n  let vector = getVector(index);\n  vector = cubieMove(vector, move);\n  return getIndex(vector);\n};\n\ntype GetVectorCallback = (index: number) => number[];\ntype CubieMoveCallback = (pieces: number[], moveIndex: number) => number[];\ntype GetIndexCallback = (pieces: number[]) => number;\n\ninterface BaseMoveTableSettings {\n  name: string;\n  size: number;\n  defaultIndex?: number;\n  solvedIndexes?: number[];\n  doMove?: (table: number[][], index: number, move: number) => number;\n}\n\ninterface MoveTableSettingsWithTable extends BaseMoveTableSettings {\n  table: number[][];\n}\n\nexport interface MoveTableSettingsWithoutTable extends BaseMoveTableSettings {\n  moves?: number[];\n  getVector: GetVectorCallback;\n  cubieMove: (pieces: number[], moveIndex: number) => number[];\n  getIndex: GetIndexCallback;\n}\n\nexport type MoveTableSettings =\n  | MoveTableSettingsWithTable\n  | MoveTableSettingsWithoutTable;\n\nexport class MoveTable {\n  name: string;\n  size: number;\n  defaultIndex: number;\n  solvedIndexes: number[];\n  table: number[][];\n\n  constructor(settings: MoveTableSettings) {\n    // A name must be provided if the generic solver is being used, as\n    // we use them to create the pruning tables.\n    this.name = settings.name;\n\n    // Some tables in the Kociemba solver define their own size, as\n    // they are a subset of another already generated helper table.\n    this.size = settings.size;\n\n    this.defaultIndex = settings.defaultIndex || 0;\n    this.solvedIndexes = settings.solvedIndexes || [this.defaultIndex];\n\n    // We allow defining a custom function that returns the updated\n    // index. This is useful for helper tables which are subsets\n    // of already generated tables.\n    const doMove = settings.doMove;\n    if (doMove) {\n      this.doMove = (index, move) => doMove(this.table, index, move);\n    }\n\n    if (\"table\" in settings) {\n      this.table = settings.table;\n\n      // If a pre-generated table is provide, do not generate another one.\n      return;\n    }\n\n    const cubieMove = createMoveHandler(\n      settings.getVector,\n      settings.cubieMove,\n      settings.getIndex\n    );\n\n    this.table = this.createMoveTable(settings.size, cubieMove, settings.moves);\n  }\n\n  doMove(index: number, move: number): number {\n    return this.table[index][move];\n  }\n\n  createMoveTable(\n    size: number,\n    cubieMove: ReturnType<typeof createMoveHandler>,\n    moves = allMoves\n  ): number[][] {\n    const table: number[][] = [];\n\n    for (let i = 0; i < size; i += 1) {\n      table.push([]);\n    }\n\n    // Create a matrix which stores the result after\n    // applying a move to a coordinate.\n    for (let i = 0; i < size; i += 1) {\n      for (let j = 0; j < moves.length; j += 1) {\n        const move = moves[j];\n\n        if (!table[i][move]) {\n          // Assign both the value and its inverse at once\n          // to avoid exess computing on the cubie level.\n          const result = cubieMove(i, move);\n          const inverse = move - 2 * (move % 3) + 2;\n          table[i][move] = result;\n          table[result][inverse] = i;\n        }\n      }\n    }\n\n    return table;\n  }\n}\n\nexport interface PermutationTableSettings {\n  name: string;\n  moves?: number[];\n  affected: number[];\n  reversed?: boolean;\n  size?: number;\n}\n\nexport const createCornerPermutationTable = (\n  settings: PermutationTableSettings\n): MoveTable =>\n  new MoveTable({\n    name: settings.name,\n    moves: settings.moves,\n    defaultIndex: getIndexFromPermutation(\n      [0, 1, 2, 3, 4, 5, 6, 7],\n      settings.affected,\n      settings.reversed\n    ),\n    size:\n      settings.size || factorial(8) / factorial(8 - settings.affected.length),\n    getVector: (index) =>\n      getPermutationFromIndex(\n        index,\n        settings.affected.slice(),\n        8,\n        settings.reversed\n      ),\n    cubieMove: (pieces, moveIndex) =>\n      moveHelper({ cp: pieces, co: identity.co }, moveIndex, doCornerMove).cp,\n    getIndex: (pieces) =>\n      getIndexFromPermutation(pieces, settings.affected, settings.reversed),\n  });\n\nexport const createEdgePermutationTable = (\n  settings: PermutationTableSettings\n): MoveTable =>\n  new MoveTable({\n    name: settings.name,\n    moves: settings.moves,\n    defaultIndex: getIndexFromPermutation(\n      [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],\n      settings.affected,\n      settings.reversed\n    ),\n    size:\n      settings.size || factorial(12) / factorial(12 - settings.affected.length),\n    getVector: (index) =>\n      getPermutationFromIndex(\n        index,\n        settings.affected.slice(),\n        12,\n        settings.reversed\n      ),\n    cubieMove: (pieces, moveIndex) =>\n      moveHelper({ ep: pieces, eo: identity.eo }, moveIndex, doEdgeMove).ep,\n    getIndex: (pieces) =>\n      getIndexFromPermutation(pieces, settings.affected, settings.reversed),\n  });\n\nconst getCorrectOrientations = (\n  affected: number[],\n  numPieces: number,\n  numStates: number\n) => {\n  const indexes = [];\n\n  const size = numStates ** (numPieces - 1);\n\n  const target = numStates ** (numPieces - affected.length - 1);\n\n  for (let i = 0; i < size && indexes.length < target; i += 1) {\n    const orientation = getOrientationFromIndex(i, numPieces, numStates);\n\n    if (affected.every((piece) => orientation[piece] === 0)) {\n      indexes.push(i);\n    }\n  }\n\n  return indexes;\n};\n\nexport interface OrientationTableSettings {\n  name: string;\n  affected: number[];\n}\n\nexport const createEdgeOrientationTable = (\n  settings: OrientationTableSettings\n): MoveTable =>\n  new MoveTable({\n    name: settings.name,\n    size: 2048,\n    solvedIndexes: getCorrectOrientations(settings.affected, 12, 2),\n    getVector: (index) => getOrientationFromIndex(index, 12, 2),\n    cubieMove: (pieces, moveIndex) =>\n      moveHelper({ ep: identity.ep, eo: pieces }, moveIndex, doEdgeMove).eo,\n    getIndex: (pieces) => getIndexFromOrientation(pieces, 2),\n  });\n\nexport const createCornerOrientationTable = (\n  settings: OrientationTableSettings\n): MoveTable =>\n  new MoveTable({\n    name: settings.name,\n    size: 2187,\n    solvedIndexes: getCorrectOrientations(settings.affected, 8, 3),\n    getVector: (index) => getOrientationFromIndex(index, 8, 3),\n    cubieMove: (pieces, moveIndex) =>\n      moveHelper({ cp: identity.cp, co: pieces }, moveIndex, doCornerMove).co,\n    getIndex: (pieces) => getIndexFromOrientation(pieces, 3),\n  });\n","import { cartesian } from \"./tools\";\nimport { MoveTable } from \"./move-table\";\n\n/**\n * A pruning table gives a lower bound on the number of moves\n * required to reach a target state.\n */\nclass PruningTable {\n  table: number[];\n  constructor(moveTables: MoveTable[], moves: number[]) {\n    this.table = [];\n    this.computePruningTable(moveTables, moves);\n  }\n\n  setPruningValue(index: number, value: number): void {\n    this.table[index >> 3] ^= (0xf ^ value) << ((index & 7) << 2);\n  }\n\n  getPruningValue(index: number): number {\n    return (this.table[index >> 3] >> ((index & 7) << 2)) & 0xf;\n  }\n\n  computePruningTable(moveTables: MoveTable[], moves: number[]): void {\n    const size = moveTables.reduce((acc, obj) => acc * obj.size, 1);\n\n    this.table.length = 0;\n\n    for (let i = 0; i < (size + 7) >> 3; i += 1) {\n      this.table.push(-1);\n    }\n\n    let depth = 0;\n    let done = 0;\n\n    const powers = [1];\n\n    for (let i = 1; i < moveTables.length; i += 1) {\n      powers.push(moveTables[i - 1].size * powers[i - 1]);\n    }\n\n    const permutations = cartesian(\n      moveTables.map((data) => data.solvedIndexes)\n    );\n\n    for (let i = 0; i < permutations.length; i += 1) {\n      let index = 0;\n\n      for (let j = 0; j < permutations[i].length; j += 1) {\n        index += powers[j] * permutations[i][j];\n      }\n\n      this.setPruningValue(index, 0);\n\n      done += 1;\n    }\n\n    // We generate the table using a BFS. Depth 0 contains all positions which\n    // are solved, and we loop through the correct indexes and apply all 18 moves\n    // to the correct states. Then we visit all positions at depth 2, and apply\n    // the 18 moves, and so on.\n    while (done !== size) {\n      // When half the table is generated, we switch to a backward search\n      // where we apply the 18 moves to all empty entries. If the result\n      // is a position which corresponds to the previous depth, we set the\n      // index to the current depth.\n      const inverse = done > size / 2;\n      const find = inverse ? 0xf : depth;\n      const check = inverse ? depth : 0xf;\n\n      depth += 1;\n\n      for (let index = 0; index < size; index += 1) {\n        if (this.getPruningValue(index) === find) {\n          for (let moveIndex = 0; moveIndex < moves.length; moveIndex += 1) {\n            const move = moves[moveIndex];\n\n            let currentIndex = index;\n            let position = 0;\n\n            for (let i = powers.length - 1; i >= 0; i -= 1) {\n              position +=\n                powers[i] *\n                moveTables[i].doMove(\n                  Math.floor(currentIndex / powers[i]),\n                  move\n                );\n              currentIndex %= powers[i];\n            }\n\n            if (this.getPruningValue(position) === check) {\n              done += 1;\n\n              if (inverse) {\n                this.setPruningValue(index, depth);\n                break;\n              }\n\n              this.setPruningValue(position, depth);\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nexport default PruningTable;\n","import { parseAlgorithm, formatAlgorithm, invertAlgorithm } from \"./algorithms\";\nimport PruningTable from \"./pruning-table\";\nimport { allMoves } from \"./cube\";\nimport { MoveTable } from \"./move-table\";\n\nexport interface CreateTableCallback {\n  (): {\n    moveTables: MoveTable[];\n    pruningTables: string[][];\n  };\n}\n\nexport interface SearchSolution {\n  indexes: number[];\n  solution: number[]; // array of move indexes\n}\n\ninterface BaseSearchSettings {\n  scramble?: string;\n  maxDepth?: number;\n  lastMove?: number;\n  format?: boolean;\n  indexes?: number[];\n}\n\nexport interface SearchSettingsWithoutFormat extends BaseSearchSettings {\n  format: false;\n}\n\nexport interface SearchSettingsWithFormat extends BaseSearchSettings {\n  format?: true;\n}\n\nexport type SearchSettings =\n  | SearchSettingsWithFormat\n  | SearchSettingsWithoutFormat;\n\ntype DefaultedSearchSettings = Required<\n  Pick<SearchSettings, \"maxDepth\" | \"lastMove\" | \"format\">\n> &\n  SearchSettings;\n\nclass Search {\n  moves: number[];\n  initialized!: boolean;\n  moveTables!: MoveTable[];\n  settings!: DefaultedSearchSettings;\n  pruningTables!: Array<{\n    pruningTable: PruningTable;\n    moveTableIndexes: number[];\n  }>;\n  createTables: CreateTableCallback;\n\n  constructor(createTables: CreateTableCallback, moves = allMoves) {\n    this.createTables = createTables;\n    this.moves = moves;\n  }\n\n  initialize(): void {\n    if (this.initialized) {\n      return;\n    }\n\n    this.initialized = true;\n\n    const { moveTables, pruningTables } = this.createTables();\n\n    this.moveTables = moveTables;\n\n    this.pruningTables = [];\n\n    pruningTables.forEach((moveTableNames) => {\n      const moveTableIndexes = moveTableNames.map((name) =>\n        this.moveTables.map((table) => table.name).indexOf(name)\n      );\n\n      moveTableIndexes.sort(\n        (a, b) => this.moveTables[a].size - this.moveTables[b].size\n      );\n\n      const mappedTables: MoveTable[] = [];\n\n      moveTableIndexes.forEach((i) => mappedTables.push(this.moveTables[i]));\n\n      const pruningTable = new PruningTable(mappedTables, this.moves);\n\n      this.pruningTables.push({\n        pruningTable,\n        moveTableIndexes,\n      });\n    });\n  }\n\n  handleSolution(\n    solution: number[],\n    indexes: number[]\n  ): SearchSolution | false {\n    return {\n      solution,\n      indexes,\n    };\n  }\n\n  search(\n    indexes: number[],\n    depth: number,\n    lastMove: number,\n    solution: number[]\n  ): SearchSolution | false {\n    let minimumDistance = 0;\n\n    for (let i = 0; i < this.pruningTables.length; i += 1) {\n      let index = indexes[this.pruningTables[i].moveTableIndexes[0]];\n      let power = 1;\n\n      for (\n        let j = 1;\n        j < this.pruningTables[i].moveTableIndexes.length;\n        j += 1\n      ) {\n        power *= this.moveTables[this.pruningTables[i].moveTableIndexes[j - 1]]\n          .size;\n        index += indexes[this.pruningTables[i].moveTableIndexes[j]] * power;\n      }\n\n      const distance = this.pruningTables[i].pruningTable.getPruningValue(\n        index\n      );\n\n      if (distance > depth) {\n        return false;\n      }\n\n      // The true minimum distance to the solved indexes is\n      // given by the pruning table with the largest distance.\n      if (distance > minimumDistance) {\n        minimumDistance = distance;\n      }\n    }\n\n    if (minimumDistance === 0) {\n      return this.handleSolution(solution, indexes);\n    }\n\n    if (depth > 0) {\n      for (let i = 0; i < this.moves.length; i += 1) {\n        const move = this.moves[i];\n\n        if (\n          Math.floor(move / 3) !== Math.floor(lastMove / 3) &&\n          Math.floor(move / 3) !== Math.floor(lastMove / 3) - 3\n        ) {\n          const updatedIndexes = [];\n\n          for (let j = 0; j < indexes.length; j += 1) {\n            updatedIndexes.push(this.moveTables[j].doMove(indexes[j], move));\n          }\n\n          const result = this.search(\n            updatedIndexes,\n            depth - 1,\n            move,\n            solution.concat([move])\n          );\n\n          if (result) {\n            return result;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  solve(settings: SearchSettingsWithFormat): string | false;\n  solve(settings: SearchSettingsWithoutFormat): SearchSolution | false;\n  solve(settings: SearchSettings): SearchSolution | string | false {\n    this.initialize();\n\n    this.settings = {\n      maxDepth: 22, // For the Kociemba solver.\n      lastMove: 0,\n      format: true,\n      ...settings,\n    };\n\n    const indexes = this.settings.indexes || [];\n\n    let solutionRotation;\n\n    if (this.settings.scramble) {\n      const [moves, totalRotation] = parseAlgorithm(\n        `x ${this.settings.scramble}`,\n        true\n      );\n\n      if (totalRotation.length > 0) {\n        solutionRotation = invertAlgorithm(totalRotation.join(\" \"));\n      }\n\n      for (let i = 0; i < this.moveTables.length; i += 1) {\n        indexes.push(this.moveTables[i].defaultIndex);\n      }\n\n      moves.forEach((move) => {\n        for (let i = 0; i < indexes.length; i += 1) {\n          indexes[i] = this.moveTables[i].doMove(indexes[i], move);\n        }\n      });\n    }\n\n    for (let depth = 0; depth <= this.settings.maxDepth; depth += 1) {\n      const solution = this.search(indexes, depth, this.settings.lastMove, []);\n\n      if (solution) {\n        if (this.settings.format) {\n          const formatted = formatAlgorithm(solution.solution);\n\n          if (solutionRotation) {\n            // If we have rotations in the scramble, apply them to the solution\n            // and then parse again to remove the rotations. This results in a\n            // solution that can be applied from the result scramble orientation.\n            return formatAlgorithm(\n              parseAlgorithm(`${solutionRotation} ${formatted}`)\n            );\n          }\n\n          return formatted;\n        }\n\n        return solution;\n      }\n    }\n\n    return false;\n  }\n}\n\nexport default Search;\n","export function detectBluetoothSupport(): boolean {\n  return Boolean(navigator.bluetooth && navigator.bluetooth.requestDevice);\n}\n","import React from \"react\";\n\nexport const useSessionStorage = <T>(\n  sessionStorageKey: string,\n  defaultState: T\n): [T, React.Dispatch<React.SetStateAction<T>>] => {\n  const storageValue = sessionStorage.getItem(sessionStorageKey);\n  const [value, setValue] = React.useState<T>(\n    storageValue ? JSON.parse(storageValue) : defaultState\n  );\n\n  React.useEffect(() => {\n    sessionStorage.setItem(sessionStorageKey, JSON.stringify(value));\n  }, [value]);\n\n  return [value, setValue];\n};\n","import React from \"react\";\nimport {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n  Typography,\n} from \"@material-ui/core\";\nimport { Warning } from \"@material-ui/icons\";\n\nimport { DialogProps } from \"core/components/dialogs/types\";\n\nexport interface ErrorDialogProps extends DialogProps {\n  title: React.ReactChild;\n  children: React.ReactChild;\n}\n\nexport const ErrorDialog = (props: ErrorDialogProps): JSX.Element => (\n  <Dialog open={props.isOpen} onClose={props.onClose}>\n    <DialogTitle\n      disableTypography={true}\n      classes={{ root: \"bg-error text-on-error\" }}\n    >\n      <div className=\"flex items-center\">\n        <Warning className=\"mr-lg\" />\n        <Typography variant=\"h6\">{props.title}</Typography>\n      </div>\n    </DialogTitle>\n    <DialogContent>\n      <DialogContentText>{props.children}</DialogContentText>\n    </DialogContent>\n    <DialogActions>\n      <Button onClick={props.onClose} color=\"primary\">\n        Close\n      </Button>\n    </DialogActions>\n  </Dialog>\n);\n","import React from \"react\";\n\nimport { DialogProps } from \"core/components/dialogs/types\";\n\nimport { ErrorDialog } from \"core/components/dialogs/error\";\n\nexport const IncompatibleBrowserDialog = (props: DialogProps): JSX.Element => (\n  <ErrorDialog {...props} title={\"Incompatible Browser\"}>\n    <>\n      This browser does not support connecting to bluetooth devices. Please\n      check the list of supported browswers{\" \"}\n      <a href=\"https://caniuse.com/web-bluetooth\">here</a>\n    </>\n  </ErrorDialog>\n);\n","import React, { useCallback, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { IconButton } from \"@material-ui/core\";\nimport {\n  BluetoothConnected,\n  Bluetooth,\n  BluetoothDisabled,\n} from \"@material-ui/icons\";\n\nimport { detectBluetoothSupport } from \"core/utils/feature-detection\";\n\nimport { bluetoothDeviceSelected } from \"app/robot/store/actions\";\nimport { getRobotDevice } from \"app/robot/store/selectors\";\nimport { PRIMARY_SERVICE, DEVICE_INFO_SERVICE } from \"app/robot/bluetooth\";\nimport { IncompatibleBrowserDialog } from \"app/incompatible-browser-dialoag\";\n\nexport function RobotWidget(): JSX.Element {\n  const dispatch = useDispatch();\n  const robotDevice = useSelector(getRobotDevice);\n  const isBluetoothSupported = detectBluetoothSupport();\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n\n  const handleBluetoothClick = useCallback(async () => {\n    try {\n      const device = await navigator.bluetooth.requestDevice({\n        filters: [{ namePrefix: \"GAN-\" }],\n        optionalServices: [PRIMARY_SERVICE, DEVICE_INFO_SERVICE],\n      });\n      dispatch(bluetoothDeviceSelected(device));\n    } catch (e) {\n      // throws DOMException if user cancels device request\n      if (!(e instanceof DOMException)) console.error(e);\n    }\n  }, []);\n\n  const openDialog = useCallback(() => setIsDialogOpen(true), []);\n  const closeDialog = useCallback(() => setIsDialogOpen(false), []);\n\n  return (\n    <>\n      {isBluetoothSupported ? (\n        <IconButton color=\"inherit\" onClick={handleBluetoothClick}>\n          {robotDevice ? <BluetoothConnected /> : <Bluetooth />}\n        </IconButton>\n      ) : (\n        <IconButton className=\"text-error\" onClick={openDialog}>\n          <BluetoothDisabled />\n        </IconButton>\n      )}\n      <IncompatibleBrowserDialog isOpen={isDialogOpen} onClose={closeDialog} />\n    </>\n  );\n}\n","import { CubeIndexes, Corners, Edges, doAlgorithm } from \"core/cube/libs/cube\";\n\nconst arePiecesPermutated = (\n  cubeState: CubeIndexes,\n  edges: number[],\n  corners: number[]\n) => {\n  for (const edgeIdx of edges)\n    if (cubeState.ep[edgeIdx] !== edgeIdx) return false;\n  for (const cornerIdx of corners)\n    if (cubeState.cp[cornerIdx] !== cornerIdx) return false;\n  return true;\n};\n\nconst arePiecesOriented = (\n  cubeState: CubeIndexes,\n  edges: number[],\n  corners: number[]\n) => {\n  for (const edgeIdx of edges) if (cubeState.eo[edgeIdx] !== 0) return false;\n  for (const cornerIdx of corners)\n    if (cubeState.co[cornerIdx] !== 0) return false;\n  return true;\n};\n\nconst arePiecesPermutatedAndOriented = (\n  cubeState: CubeIndexes,\n  edges: number[],\n  corners: number[]\n) =>\n  arePiecesOriented(cubeState, edges, corners) &&\n  arePiecesPermutated(cubeState, edges, corners);\n\nexport const isCrossSolved = (cubeState: CubeIndexes): boolean =>\n  arePiecesPermutatedAndOriented(\n    cubeState,\n    [Edges.DB, Edges.DF, Edges.DL, Edges.DR],\n    []\n  );\n\nexport const isTopCrossSolved = (cubeState: CubeIndexes): boolean =>\n  arePiecesPermutatedAndOriented(\n    cubeState,\n    [Edges.DB, Edges.DF, Edges.DL, Edges.DR],\n    []\n  );\n\nexport const isF2LSolved = (cubeState: CubeIndexes): boolean =>\n  isCrossSolved(cubeState) &&\n  arePiecesPermutatedAndOriented(\n    cubeState,\n    [Edges.BL, Edges.BR, Edges.FL, Edges.FR],\n    [Corners.DBL, Corners.DBR, Corners.DFR, Corners.DLF]\n  );\n\nexport const isFirstLookOLLSolved = (cubeState: CubeIndexes): boolean =>\n  isF2LSolved(cubeState) &&\n  arePiecesOriented(cubeState, [Edges.UB, Edges.UF, Edges.UL, Edges.UR], []);\n\nexport const isOLLSolved = (cubeState: CubeIndexes): boolean =>\n  isF2LSolved(cubeState) &&\n  arePiecesOriented(\n    cubeState,\n    [Edges.UB, Edges.UF, Edges.UL, Edges.UR],\n    [Corners.UBR, Corners.UFL, Corners.ULB, Corners.URF]\n  );\n\nexport const isFirstLookPLLSolved = (cubeState: CubeIndexes): boolean => {\n  let rotation = 0;\n  do {\n    if (\n      isOLLSolved(cubeState) &&\n      arePiecesPermutated(\n        cubeState,\n        [],\n        [Corners.UBR, Corners.UFL, Corners.ULB, Corners.URF]\n      )\n    )\n      return true;\n    cubeState = doAlgorithm(\"U\", cubeState);\n    rotation += 90;\n  } while (rotation < 360);\n  return false;\n};\n\nexport const isCubeSolved = (cubeState: CubeIndexes): boolean =>\n  isF2LSolved(cubeState) &&\n  arePiecesPermutatedAndOriented(\n    cubeState,\n    [Edges.UB, Edges.UF, Edges.UL, Edges.UR],\n    [Corners.UBR, Corners.UFL, Corners.ULB, Corners.URF]\n  );\n","import { doAlgorithm, identity, CubeIndexes } from \"core/cube/libs/cube\";\nimport {\n  getIndexFromOrientation,\n  getIndexFromPermutation,\n} from \"core/cube/libs/coordinates\";\nimport { isTopCrossSolved } from \"core/cube/scramblers/solve-criteria\";\n\nconst cubeFaces = [\"D\", \"L\", \"B\", \"U\", \"R\", \"F\"];\nconst moveModifiers = [\"\", \"2\", \"'\"];\n\nexport function generateScramble(\n  total = 24,\n  isSolved: (state: CubeIndexes) => boolean = isTopCrossSolved\n): string {\n  return scramble(total, isSolved).join(\" \");\n}\n\nconst scramble = (\n  total: number,\n  isSolved: (state: CubeIndexes) => boolean\n): string[] => {\n  const previousCubeStates = new Set();\n  let currentState = identity;\n  const moves = [];\n\n  while (moves.length < total) {\n    // Generate a random move\n    const move =\n      cubeFaces[Math.floor(Math.random() * 6)] +\n      moveModifiers[Math.floor(Math.random() * 3)];\n    if (move.charAt(0) === \"U\") {\n      continue;\n    }\n    // Don't move the same face twice in a row\n    if (\n      moves.length > 0 &&\n      move.charAt(0) === moves[moves.length - 1].charAt(0)\n    ) {\n      continue;\n    }\n    // Avoid move sequences like \"R L R\", which is the same as \"R2 L\"\n    if (\n      moves.length > 1 &&\n      move.charAt(0) === moves[moves.length - 2].charAt(0) &&\n      moves[moves.length - 1].charAt(0) ===\n        cubeFaces[(cubeFaces.indexOf(move.charAt(0)) + 3) % 6]\n    ) {\n      continue;\n    }\n\n    // ensure state has not been repeated earlier in the scramble\n    const newState = doAlgorithm(move, currentState);\n    const stateHashCode = getStateHashCode(newState);\n    if (!previousCubeStates.has(stateHashCode)) {\n      moves.push(move);\n      previousCubeStates.add(stateHashCode);\n      currentState = newState;\n    }\n  }\n  return isSolved(currentState) ? scramble(total, isSolved) : moves;\n};\n\nconst getStateHashCode = (cubeState: CubeIndexes) => {\n  const cpIndex = getIndexFromPermutation(cubeState.cp, identity.cp);\n  const coIndex = getIndexFromOrientation(cubeState.co, 3);\n  const epIndex = getIndexFromPermutation(cubeState.ep, identity.ep);\n  const eoIndex = getIndexFromOrientation(cubeState.co, 2);\n  return `${cpIndex}:${coIndex}:${epIndex}:${eoIndex}`;\n};\n","import {\n  getPermutationFromIndex,\n  getOrientationFromIndex,\n  getParity,\n} from \"core/cube/libs/coordinates\";\n\nimport { getRandomInt, factorial } from \"core/cube/libs/tools\";\n\nimport { CubeIndexes } from \"core/cube/libs/cube\";\n\nimport { solveCube, fiveSideSolver } from \"core/cube/solvers/five-side-solver\";\n\nconst getEdgeOrientation = (enabled: number[], orientLastLayer: boolean) => {\n  const pieces = getOrientationFromIndex(\n    getRandomInt(0, 2 ** (enabled.length - 1)),\n    enabled.length,\n    2\n  );\n\n  const orientation = Array(12).fill(0);\n\n  if (!orientLastLayer) {\n    enabled.forEach((piece, i) => {\n      orientation[piece] = pieces[i];\n    });\n  }\n\n  return orientation;\n};\n\nconst getCornerOrientation = (enabled: number[], orientLastLayer: boolean) => {\n  const pieces = getOrientationFromIndex(\n    getRandomInt(0, 3 ** (enabled.length - 1)),\n    enabled.length,\n    3\n  );\n\n  const orientation = Array(8).fill(0);\n\n  if (!orientLastLayer) {\n    enabled.forEach((piece, i) => {\n      orientation[piece] = pieces[i];\n    });\n  }\n\n  return orientation;\n};\n\n/**\n * Returns a permutation vector where all pieces are\n * solved, except for the given enabled pieces.\n */\nconst getPermutationFromEnabled = (enabled: number[], size: number) => {\n  const pieces = getPermutationFromIndex(\n    getRandomInt(0, factorial(enabled.length)),\n    enabled.slice(0),\n    enabled.length\n  );\n\n  const permutation = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11].slice(0, size);\n\n  enabled.forEach((piece, i) => {\n    permutation[piece] = pieces[i];\n  });\n\n  return permutation;\n};\n\n/**\n * Generates a random scramble where all pieces are solved, except\n * for the provided edges and corners, which will be scrambled randomly.\n */\nexport const getScrambleForPieces = (\n  scrambleEdges: number[],\n  scrambleCorners: number[],\n  isScrambleSolved: (state: CubeIndexes) => boolean,\n  orientLastLayer = false\n): string | false => {\n  let scrambleState;\n\n  do {\n    scrambleState = {\n      ep: getPermutationFromEnabled(scrambleEdges, 12),\n      eo: getEdgeOrientation(scrambleEdges, orientLastLayer),\n      cp: getPermutationFromEnabled(scrambleCorners, 8),\n      co: getCornerOrientation(scrambleCorners, orientLastLayer),\n    };\n  } while (\n    getParity(scrambleState.ep) !== getParity(scrambleState.cp) ||\n    isScrambleSolved(scrambleState)\n  );\n\n  // The first solve gets a set of moves to solve the current cube state\n  // We resolve the cube because this set of moves will contain U turns the\n  // robot isn't capable of. The resolve won't use U turns\n  const solution = solveCube(scrambleState);\n  if (solution) {\n    return fiveSideSolver(solution);\n  }\n  return false;\n};\n\nexport default getScrambleForPieces;\n","import {\n  createEdgePermutationTable,\n  createEdgeOrientationTable,\n} from \"core/cube/libs/move-table\";\n\nimport Search from \"core/cube/libs/search\";\n\nimport { fiveSideMoves, Edges } from \"core/cube/libs/cube\";\n\nexport const CrossSearch = new Search(\n  () => ({\n    moveTables: [\n      createEdgePermutationTable({\n        name: \"EdgePermutation\",\n        affected: [Edges.UB, Edges.DB, Edges.BL, Edges.BR],\n      }),\n\n      createEdgeOrientationTable({\n        name: \"EdgeOrientation\",\n        affected: [Edges.UB, Edges.DB, Edges.BL, Edges.BR],\n      }),\n    ],\n\n    pruningTables: [[\"EdgePermutation\"], [\"EdgeOrientation\"]],\n  }),\n  fiveSideMoves\n);\n\nexport const crossSolver = (scramble: string): string | false =>\n  CrossSearch.solve({ scramble });\n","import tag from \"classed.macro\";\n\nexport const ButtonRow = tag.div`\n  flex flex-row w-full \n  children:flex computer:children:flex-initial children:flex-1 \n  children:ml-med children:first:ml-0 \n  children:w-10 children:px-0\n`;\n\nexport const ContentContainer = tag.div`\n  flex flex-col m-lg children:mt-lg children:first:mt-0 computer:items-start\n`;\n\nexport const Tooltip = tag.div`tooltip bg-tooltip text-on-tooltip round`;\n","import { CubeIndexes } from \"./cube\";\n\nconst centerFacelets = [\"U\", \"R\", \"F\", \"D\", \"L\", \"B\"];\n\nconst cornerFacelets = [\n  [\"U8\", \"R0\", \"F2\"],\n  [\"U6\", \"F0\", \"L2\"],\n  [\"U0\", \"L0\", \"B2\"],\n  [\"U2\", \"B0\", \"R2\"],\n  [\"D2\", \"F8\", \"R6\"],\n  [\"D0\", \"L8\", \"F6\"],\n  [\"D6\", \"B8\", \"L6\"],\n  [\"D8\", \"R8\", \"B6\"],\n];\n\nconst edgeFacelets = [\n  [\"U5\", \"R1\"],\n  [\"U7\", \"F1\"],\n  [\"U3\", \"L1\"],\n  [\"U1\", \"B1\"],\n  [\"D5\", \"R7\"],\n  [\"D1\", \"F7\"],\n  [\"D3\", \"L7\"],\n  [\"D7\", \"B7\"],\n  [\"F5\", \"R3\"],\n  [\"F3\", \"L5\"],\n  [\"B5\", \"L3\"],\n  [\"B3\", \"R5\"],\n];\n\nconst mod = (n: number, m: number) => ((n % m) + m) % m;\n\nconst getFaceletIndex = (facelet: string) =>\n  centerFacelets.indexOf(facelet[0]) * 9 + Number(facelet[1]);\nconst getCornerFacelet = (\n  cube: CubeIndexes,\n  cornerIndex: number,\n  orientationIndex: number\n) => {\n  return cornerFacelets[cube.cp[cornerIndex]][\n    mod(orientationIndex - cube.co[cornerIndex], 3)\n  ][0];\n};\n\nconst getEdgeFacelet = (\n  cube: CubeIndexes,\n  edgeIndex: number,\n  orientationIndex: number\n) =>\n  edgeFacelets[cube.ep[edgeIndex]][\n    mod(orientationIndex - cube.eo[edgeIndex], 2)\n  ][0];\n\nexport interface FaceletArrayFilter {\n  edges?: number[];\n  corners?: number[];\n  facelets?: string[];\n}\n\nexport interface FaceletArrayOptions {\n  filter?: FaceletArrayFilter;\n}\n\nexport const getFaceletArray = (\n  cube: CubeIndexes,\n  options: FaceletArrayOptions = {}\n): string[] => {\n  const facelets: string[] = [];\n\n  // add center facelets to array\n  centerFacelets.forEach((facelet, centerIndex) => {\n    facelets[9 * centerIndex + 4] = facelet;\n  });\n\n  // add corner cubie facelets\n  cornerFacelets.forEach((corner, cornerIndex) => {\n    corner.forEach((facelet, orientation) => {\n      const faceletIndex = getFaceletIndex(facelet);\n      const faceletValue = getCornerFacelet(cube, cornerIndex, orientation);\n\n      facelets[faceletIndex] =\n        !options.filter ||\n        options.filter.corners?.includes(cube.cp[cornerIndex]) ||\n        options.filter.facelets?.includes(faceletValue)\n          ? faceletValue\n          : \"G\";\n    });\n  });\n\n  // add edge cubie facelets\n  edgeFacelets.forEach((edge, edgeIndex) => {\n    edge.forEach((facelet, orientation) => {\n      const faceletIndex = getFaceletIndex(facelet);\n      const faceletValue = getEdgeFacelet(cube, edgeIndex, orientation);\n\n      facelets[faceletIndex] =\n        !options.filter ||\n        options.filter.edges?.includes(cube.ep[edgeIndex]) ||\n        options.filter.facelets?.includes(faceletValue)\n          ? faceletValue\n          : \"G\";\n    });\n  });\n\n  return facelets;\n};\n","import React from \"react\";\n\nimport { doAlgorithm } from \"core/cube/libs/cube\";\nimport {\n  getFaceletArray,\n  FaceletArrayFilter,\n} from \"core/cube/libs/cube-preview\";\n\ninterface CubePreviewProps {\n  scrambleCode: string;\n  filter?: FaceletArrayFilter;\n  colorMap?: Record<string, string>;\n}\n\nexport function CubePreview(props: CubePreviewProps): JSX.Element {\n  const cubeIndexes = doAlgorithm(props.scrambleCode);\n  const colorMap = props.colorMap ?? defaultColorMap;\n  const svgString = getFaceletArray(cubeIndexes, {\n    filter: props.filter,\n  })\n    .map((faceKey) => colorMap[faceKey])\n    .reduce((acc, color) => acc.replace(\"{}\", color), template);\n\n  return (\n    <div\n      className=\"computer:w-24 landscape:w-1/3 computer:self-start w-20 self-center\"\n      dangerouslySetInnerHTML={{ __html: svgString }}\n    ></div>\n  );\n}\n\nconst defaultColorMap: Record<string, string> = {\n  U: \"white\",\n  R: \"red\",\n  F: \"green\",\n  D: \"yellow\",\n  L: \"orange\",\n  B: \"blue\",\n  G: \"gray\",\n};\n\nconst template = `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"-5 -5 258 196\" style=\"stroke-linejoin:round;\">\n  <g>\n    <rect x=\"64\" y=\"2\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"84\" y=\"2\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"104\" y=\"2\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"64\" y=\"22\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"84\" y=\"22\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"104\" y=\"22\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"64\" y=\"42\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"84\" y=\"42\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"104\" y=\"42\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"126\" y=\"64\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"146\" y=\"64\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"166\" y=\"64\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"126\" y=\"84\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"146\" y=\"84\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"166\" y=\"84\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"126\" y=\"104\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"146\" y=\"104\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"166\" y=\"104\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"64\" y=\"64\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"84\" y=\"64\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"104\" y=\"64\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"64\" y=\"84\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"84\" y=\"84\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"104\" y=\"84\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"64\" y=\"104\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"84\" y=\"104\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"104\" y=\"104\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"64\" y=\"126\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"84\" y=\"126\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"104\" y=\"126\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"64\" y=\"146\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"84\" y=\"146\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"104\" y=\"146\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"64\" y=\"166\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"84\" y=\"166\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"104\" y=\"166\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"2\" y=\"64\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"22\" y=\"64\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"42\" y=\"64\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"2\" y=\"84\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"22\" y=\"84\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"42\" y=\"84\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"2\" y=\"104\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"22\" y=\"104\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"42\" y=\"104\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"188\" y=\"64\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"208\" y=\"64\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"228\" y=\"64\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"188\" y=\"84\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"208\" y=\"84\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"228\" y=\"84\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"188\" y=\"104\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"208\" y=\"104\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n    <rect x=\"228\" y=\"104\" width=\"20\" height=\"20\" fill=\"{}\" stroke=\"black\"></rect>\n  </g>\n</svg>`;\n","import React, { useState, useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  Button,\n  FormControl,\n  Select,\n  MenuItem,\n  Tooltip,\n} from \"@material-ui/core\";\nimport { FormattedMessage } from \"react-intl\";\n\nimport { generateScramble } from \"core/cube/scramblers/full\";\nimport {\n  generateOLLScramble,\n  generateFirstLookOLLScramble,\n  generateSecondLookOLLScramble,\n  generatePLLScramble,\n  generateFirstLookPLLScramble,\n  generateSecondLookPLLScramble,\n} from \"core/cube/scramblers/cfop\";\nimport { crossSolver } from \"core/cube/solvers/cross-solver\";\nimport { doAlgorithm, Edges, Corners } from \"core/cube/libs/cube\";\nimport { FaceletArrayFilter } from \"core/cube/libs/cube-preview\";\nimport {\n  isF2LSolved,\n  isCrossSolved,\n} from \"core/cube/scramblers/solve-criteria\";\nimport { ButtonRow, ContentContainer } from \"core/components/presentation\";\n\nimport { getRobotServer } from \"app/robot/store/selectors\";\nimport { CubePreview } from \"app/cube-preview\";\nimport { scrambleSubmitted } from \"app/robot/store/actions\";\n\ntype CFOPPhaseType =\n  | \"cross\"\n  | \"f2l\"\n  | \"oll\"\n  | \"firstLookOll\"\n  | \"secondLookOll\"\n  | \"pll\"\n  | \"firstLookPll\"\n  | \"secondLookPll\";\n\nconst invertedColorMap: Record<string, string> = {\n  U: \"yellow\",\n  R: \"red\",\n  F: \"blue\",\n  D: \"white\",\n  L: \"orange\",\n  B: \"green\",\n  G: \"gray\",\n};\n\nconst crossFilter = {\n  edges: [Edges.DB, Edges.DF, Edges.DR, Edges.DL],\n};\n\nconst f2lFilter = {\n  edges: [\n    Edges.DB,\n    Edges.DF,\n    Edges.DR,\n    Edges.DL,\n    Edges.BL,\n    Edges.BR,\n    Edges.FL,\n    Edges.FR,\n  ],\n  corners: [Corners.DBR, Corners.DLF, Corners.DBL, Corners.DFR],\n};\n\nconst ollFilter = {\n  ...f2lFilter,\n  facelets: [\"U\"],\n};\n\nconst filters: Record<string, FaceletArrayFilter> = {\n  cross: crossFilter,\n  f2l: f2lFilter,\n  firstLookOll: ollFilter,\n  secondLookOll: ollFilter,\n  oll: ollFilter,\n};\n\nexport const CFOPScramble = (): JSX.Element => {\n  const [cfopPhase, setCFOPPhase] = useState<CFOPPhaseType>(\"cross\");\n  const [scramble, setScramble] = useState<string>(\"\");\n  const robotServer = useSelector(getRobotServer);\n  const dispatch = useDispatch();\n\n  const handleScrambleClick = useCallback(() => {\n    let scramble: string | false;\n    switch (cfopPhase) {\n      case \"cross\":\n        setScramble(generateScramble(26, isCrossSolved));\n        break;\n      case \"f2l\":\n        // faster to do cross solve than scrambling all pieces but the cross\n        // and completing a full solve\n        while (true) {\n          scramble = generateScramble();\n          const solveCode = crossSolver(scramble);\n          if (solveCode) {\n            if (!isF2LSolved(doAlgorithm(solveCode))) {\n              setScramble(`${scramble} ${solveCode}`);\n              break;\n            }\n          }\n        }\n        break;\n      case \"oll\":\n        scramble = generateOLLScramble();\n        if (scramble) {\n          setScramble(scramble);\n        }\n        break;\n      case \"firstLookOll\":\n        scramble = generateFirstLookOLLScramble();\n        if (scramble) {\n          setScramble(scramble);\n        }\n        break;\n      case \"secondLookOll\":\n        scramble = generateSecondLookOLLScramble();\n        if (scramble) {\n          setScramble(scramble);\n        }\n        break;\n      case \"pll\":\n        scramble = generatePLLScramble();\n        if (scramble) {\n          setScramble(scramble);\n        }\n        break;\n      case \"firstLookPll\":\n        scramble = generateFirstLookPLLScramble();\n        if (scramble) {\n          setScramble(scramble);\n        }\n        break;\n      case \"secondLookPll\":\n        scramble = generateSecondLookPLLScramble();\n        if (scramble) {\n          setScramble(scramble);\n        }\n        break;\n    }\n  }, [scramble]);\n\n  const handleCFOPPhaseChange = useCallback(\n    (e: React.ChangeEvent<{ value: unknown }>) => {\n      const phase = e.target.value as CFOPPhaseType;\n      if (phase !== cfopPhase) {\n        setScramble(\"\");\n      }\n      setCFOPPhase(phase);\n    },\n    []\n  );\n\n  const handleSendClick = useCallback(() => {\n    dispatch(scrambleSubmitted(scramble));\n  }, [scramble]);\n\n  const tooltipText = !Boolean(robotServer)\n    ? \"Robot not connected\"\n    : !scramble\n    ? \"Scramble required\"\n    : \"\";\n\n  return (\n    <ContentContainer>\n      <FormControl component=\"fieldset\">\n        <Select\n          className=\"computer:w-24\"\n          value={cfopPhase}\n          onChange={handleCFOPPhaseChange}\n        >\n          <MenuItem value=\"cross\">Cross</MenuItem>\n          <MenuItem value=\"f2l\">F2L</MenuItem>\n          <MenuItem value=\"firstLookOll\">First look OLL</MenuItem>\n          <MenuItem value=\"secondLookOll\">Second look OLL</MenuItem>\n          <MenuItem value=\"oll\">Full OLL</MenuItem>\n          <MenuItem value=\"firstLookPll\">First look PLL</MenuItem>\n          <MenuItem value=\"secondLookPll\">Second look PLL</MenuItem>\n          <MenuItem value=\"pll\">Full PLL</MenuItem>\n        </Select>\n      </FormControl>\n      <CubePreview\n        scrambleCode={scramble}\n        filter={filters[cfopPhase]}\n        colorMap={invertedColorMap}\n      />\n      <ButtonRow>\n        <Button variant=\"contained\" onClick={handleScrambleClick}>\n          <FormattedMessage id=\"scramble.actions.scramble\" />\n        </Button>\n\n        <Tooltip arrow title={tooltipText}>\n          <span>\n            <Button\n              variant=\"contained\"\n              disabled={!Boolean(scramble) || !Boolean(robotServer)}\n              onClick={handleSendClick}\n              className=\"flex flex-grow\"\n            >\n              <FormattedMessage id=\"scramble.actions.send\" />\n            </Button>\n          </span>\n        </Tooltip>\n      </ButtonRow>\n    </ContentContainer>\n  );\n};\n","import getScrambleForPieces from \"core/cube/libs/scramble-pieces\";\nimport { Edges, Corners } from \"core/cube/libs/cube\";\nimport {\n  isOLLSolved,\n  isFirstLookOLLSolved,\n  isFirstLookPLLSolved,\n  isCubeSolved,\n} from \"core/cube/scramblers/solve-criteria\";\n\nexport const generateOLLScramble = (): string | false =>\n  getScrambleForPieces(\n    [Edges.UR, Edges.UF, Edges.UL, Edges.UB],\n    [Corners.URF, Corners.UFL, Corners.ULB, Corners.UBR],\n    isOLLSolved\n  );\n\nexport const generateFirstLookOLLScramble = (): string | false =>\n  getScrambleForPieces(\n    [Edges.UR, Edges.UF, Edges.UL, Edges.UB],\n    [Corners.URF, Corners.UFL, Corners.ULB, Corners.UBR],\n    isFirstLookOLLSolved\n  );\n\nexport const generateSecondLookOLLScramble = (): string | false =>\n  getScrambleForPieces(\n    [],\n    [Corners.URF, Corners.UFL, Corners.ULB, Corners.UBR],\n    isOLLSolved\n  );\n\nexport const generatePLLScramble = (): string | false =>\n  getScrambleForPieces(\n    [Edges.UR, Edges.UF, Edges.UL, Edges.UB],\n    [Corners.URF, Corners.UFL, Corners.ULB, Corners.UBR],\n    isCubeSolved,\n    true\n  );\n\nexport const generateFirstLookPLLScramble = (): string | false =>\n  getScrambleForPieces(\n    [Edges.UR, Edges.UF, Edges.UL, Edges.UB],\n    [Corners.URF, Corners.UFL, Corners.ULB, Corners.UBR],\n    isFirstLookPLLSolved,\n    true\n  );\n\nexport const generateSecondLookPLLScramble = (): string | false =>\n  getScrambleForPieces(\n    [Edges.UR, Edges.UF, Edges.UL, Edges.UB],\n    [],\n    isCubeSolved,\n    true\n  );\n","import React, { useState, useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Button, InputLabel, OutlinedInput, Tooltip } from \"@material-ui/core\";\nimport { FormattedMessage } from \"react-intl\";\n\nimport { generateScramble } from \"core/cube/scramblers/full\";\nimport { ButtonRow, ContentContainer } from \"core/components/presentation\";\n\nimport { getRobotServer } from \"app/robot/store/selectors\";\nimport { CubePreview } from \"app/cube-preview\";\nimport { scrambleSubmitted } from \"app/robot/store/actions\";\n\nexport const RandomScramble = (): JSX.Element => {\n  const [scramble, setScramble] = useState<string>(\"\");\n  const robotServer = useSelector(getRobotServer);\n  const dispatch = useDispatch();\n\n  const handleSendClick = useCallback(\n    () => dispatch(scrambleSubmitted(scramble)),\n    [scramble]\n  );\n\n  const handleScrambleClick = useCallback(\n    () => setScramble(generateScramble()),\n    []\n  );\n\n  const tooltipText = !Boolean(robotServer)\n    ? \"Robot not connected\"\n    : !scramble\n    ? \"Scramble required\"\n    : \"\";\n\n  return (\n    <ContentContainer>\n      <div className=\"flex flex-col w-full\">\n        <InputLabel htmlFor=\"scramble\" className=\"text-xs\">\n          Scramble\n        </InputLabel>\n        <OutlinedInput\n          id=\"scramble\"\n          value={scramble}\n          className=\"text-on-surface py-med children:cursor-text\"\n          multiline\n          fullWidth\n          disabled\n        />\n      </div>\n\n      <CubePreview scrambleCode={scramble} />\n\n      <ButtonRow>\n        <Button variant=\"contained\" onClick={handleScrambleClick}>\n          <FormattedMessage id=\"scramble.actions.scramble\" />\n        </Button>\n\n        <Tooltip arrow title={tooltipText}>\n          <span>\n            <Button\n              variant=\"contained\"\n              size=\"large\"\n              disabled={!scramble || !Boolean(robotServer)}\n              onClick={handleSendClick}\n              className=\"flex flex-grow\"\n            >\n              <FormattedMessage id=\"scramble.actions.send\" />\n            </Button>\n          </span>\n        </Tooltip>\n      </ButtonRow>\n    </ContentContainer>\n  );\n};\n","import React, { useState, useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Button, TextField, Tooltip } from \"@material-ui/core\";\nimport { FormattedMessage } from \"react-intl\";\n\nimport { fiveSideSolver } from \"core/cube/solvers/five-side-solver\";\nimport { validateAlgorithm, invertAlgorithm } from \"core/cube/libs/algorithms\";\nimport { ButtonRow, ContentContainer } from \"core/components/presentation\";\n\nimport { getRobotServer } from \"app/robot/store/selectors\";\nimport { CubePreview } from \"app/cube-preview\";\nimport { scrambleSubmitted } from \"app/robot/store/actions\";\n\ninterface ScrambleState {\n  previewCode: string;\n  hasError: boolean;\n}\n\nexport const ManualScramble = (): JSX.Element => {\n  const [scramble, setScramble] = useState<ScrambleState>({\n    previewCode: \"\",\n    hasError: false,\n  });\n  const robotServer = useSelector(getRobotServer);\n  const dispatch = useDispatch();\n\n  const processScrambleInput = useCallback((scramble: string) => {\n    if (scramble.length > 0) {\n      if (validateAlgorithm(scramble)) {\n        const fiveSideSolve = fiveSideSolver(scramble);\n        if (fiveSideSolve) {\n          const fiveSideScramble = invertAlgorithm(fiveSideSolve);\n          setScramble({\n            previewCode: fiveSideScramble,\n            hasError: false,\n          });\n        }\n      } else {\n        setScramble({\n          previewCode: \"\",\n          hasError: true,\n        });\n      }\n    } else {\n      setScramble({\n        previewCode: \"\",\n        hasError: false,\n      });\n    }\n  }, []);\n\n  const handleManualScrambleChange = useCallback(\n    (event: React.FocusEvent<HTMLInputElement>) =>\n      processScrambleInput(event.currentTarget.value),\n    []\n  );\n\n  const handleManualScrambleKeyDown = useCallback((e: React.KeyboardEvent) => {\n    const target = e.target as HTMLInputElement;\n    if (e.key === \"’\") {\n      target.value += \"'\";\n      e.preventDefault();\n      e.stopPropagation();\n    }\n  }, []);\n\n  const handleSendClick = useCallback(\n    () => dispatch(scrambleSubmitted(scramble.previewCode)),\n    [scramble]\n  );\n\n  const tooltipText = !Boolean(robotServer)\n    ? \"Robot not connected\"\n    : !scramble\n    ? \"Scramble required\"\n    : \"\";\n\n  return (\n    <ContentContainer>\n      <form noValidate autoComplete=\"off\" className=\"container\">\n        <TextField\n          id=\"manual-scramble\"\n          label=\"Manual Scramble\"\n          multiline\n          rowsMax={4}\n          fullWidth\n          InputLabelProps={{\n            shrink: true,\n          }}\n          error={scramble.hasError}\n          helperText={scramble.hasError && \"Invalid Scramble Code\"}\n          onChange={handleManualScrambleChange}\n          onKeyDown={handleManualScrambleKeyDown}\n        />\n      </form>\n      <CubePreview scrambleCode={scramble.previewCode} />\n      <ButtonRow>\n        <Tooltip arrow title={tooltipText}>\n          <span>\n            <Button\n              variant=\"contained\"\n              disabled={!Boolean(robotServer) || !Boolean(scramble)}\n              onClick={handleSendClick}\n              className=\"flex flex-grow\"\n            >\n              <FormattedMessage id=\"scramble.actions.send\" />\n            </Button>\n          </span>\n        </Tooltip>\n      </ButtonRow>\n    </ContentContainer>\n  );\n};\n","import React, { useEffect, useCallback } from \"react\";\nimport {\n  AppBar,\n  Toolbar,\n  Typography,\n  BottomNavigation,\n  BottomNavigationAction,\n  Paper,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n} from \"@material-ui/core\";\nimport { Shuffle, Layers, Edit } from \"@material-ui/icons\";\nimport { FormattedMessage } from \"react-intl\";\nimport { useDispatch } from \"react-redux\";\nimport tag from \"classed.macro\";\n\nimport { detectBluetoothSupport } from \"core/utils/feature-detection\";\nimport { useSessionStorage } from \"core/hooks/useSessionStorage\";\n\nimport { RobotWidget } from \"app/robot/widget\";\nimport { CFOPScramble } from \"app/cfop-scramble\";\nimport { RandomScramble } from \"app/random-scramble\";\nimport { ManualScramble } from \"app/manual-scramble\";\nimport { appInitialized } from \"app/main-screen/actions\";\nimport { IncompatibleBrowserDialog } from \"app/incompatible-browser-dialoag\";\n\nconst Screen = tag.div`flex flex-col h-full`;\n\nconst MenuItemContent = tag.div`computer:flex hidden flex-row items-center`;\n\nconst CompactMenuItemContent = tag.div`\n  hidden landscape:inline-flex flex-col items-center justify-center text-on-background w-full\n`;\n\nconst IconContainer = tag.div`flex flex-row ml-auto`;\n\nconst IconWrapper = tag.div`text-icon-on-background`;\n\nexport const MainScreen = (): JSX.Element => {\n  const [navigationValue, setNavigation] = React.useState(\"random\");\n  const dispatch = useDispatch();\n  const handleChange = (_: React.ChangeEvent<unknown>, newValue: string) => {\n    setNavigation(newValue);\n  };\n\n  const [showIncompatibleDialog, setShowIncompatibleDialog] = useSessionStorage(\n    \"showIncompatibleBrowserDialog\",\n    true\n  );\n  const isBluetoothSupported = detectBluetoothSupport();\n  const handleIncompatibleDialogClose = useCallback(() => {\n    setShowIncompatibleDialog(false);\n  }, []);\n\n  useEffect(() => {\n    dispatch(appInitialized());\n  }, []);\n\n  return (\n    <Screen>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h5\">\n            <FormattedMessage id=\"appTitle\" />\n          </Typography>\n          <IconContainer>\n            <RobotWidget />\n          </IconContainer>\n        </Toolbar>\n      </AppBar>\n\n      <div className=\"flex flex-row h-full w-full\">\n        <Paper className=\"hidden landscape:block computer:block w-6 computer:w-12\">\n          <List>\n            <ListItem\n              button\n              key=\"random\"\n              selected={navigationValue === \"random\"}\n              onClick={() => setNavigation(\"random\")}\n            >\n              <MenuItemContent>\n                <ListItemIcon>\n                  <Shuffle />\n                </ListItemIcon>\n                <ListItemText primary=\"RANDOM\" />\n              </MenuItemContent>\n\n              <CompactMenuItemContent>\n                <IconWrapper>\n                  <Shuffle />\n                </IconWrapper>\n                <span>RANDOM</span>\n              </CompactMenuItemContent>\n            </ListItem>\n\n            <ListItem\n              button\n              key=\"cfop\"\n              selected={navigationValue === \"cfop\"}\n              onClick={() => setNavigation(\"cfop\")}\n            >\n              <MenuItemContent>\n                <ListItemIcon>\n                  <Layers />\n                </ListItemIcon>\n                <ListItemText primary=\"CFOP\" />\n              </MenuItemContent>\n\n              <CompactMenuItemContent>\n                <IconWrapper>\n                  <Layers />\n                </IconWrapper>\n                <span>CFOP</span>\n              </CompactMenuItemContent>\n            </ListItem>\n\n            <ListItem\n              button\n              key=\"manual\"\n              selected={navigationValue === \"manual\"}\n              onClick={() => setNavigation(\"manual\")}\n            >\n              <MenuItemContent>\n                <ListItemIcon>\n                  <Edit />\n                </ListItemIcon>\n                <ListItemText primary=\"MANUAL\" />\n              </MenuItemContent>\n\n              <CompactMenuItemContent>\n                <IconWrapper>\n                  <Edit />\n                </IconWrapper>\n                <span>MANUAL</span>\n              </CompactMenuItemContent>\n            </ListItem>\n          </List>\n        </Paper>\n\n        <div className=\"flex flex-grow flex-col h-full\">\n          {navigationValue === \"random\" && <RandomScramble />}\n          {navigationValue === \"cfop\" && <CFOPScramble />}\n          {navigationValue === \"manual\" && <ManualScramble />}\n\n          <div className=\"landscape:hidden computer:hidden w-full mt-auto\">\n            <BottomNavigation\n              showLabels\n              value={navigationValue}\n              onChange={handleChange}\n              className=\"w-full\"\n            >\n              <BottomNavigationAction\n                icon={<Shuffle />}\n                value=\"random\"\n                label=\"RANDOM\"\n                aria-label=\"random\"\n              />\n              <BottomNavigationAction\n                icon={<Layers />}\n                value=\"cfop\"\n                label=\"CFOP\"\n                aria-label=\"cfop\"\n              />\n              <BottomNavigationAction\n                icon={<Edit />}\n                value=\"manual\"\n                label=\"MANUAL\"\n                aria-label=\"manual\"\n              />\n            </BottomNavigation>\n          </div>\n        </div>\n      </div>\n      {!isBluetoothSupported && showIncompatibleDialog && (\n        <IncompatibleBrowserDialog\n          isOpen={true}\n          onClose={handleIncompatibleDialogClose}\n        />\n      )}\n    </Screen>\n  );\n};\n","import pathParse from \"path-parse\";\nimport { importAll } from \"core/utils/webpack\";\n\ninterface Translations {\n  [key: string]: string | Translations;\n}\n\n// import json translations\nconst translations = importAll<Translations>(\n  require.context(\"../\", true, /\\/translations\\/.*\\.json$/)\n);\n\nconst flattenTranslations = (trans: Translations, keys: string[] = []) =>\n  Object.keys(trans).reduce((acc, key) => {\n    const currentKeys = [...keys, key];\n    const value = trans[key];\n    if (typeof value === \"object\")\n      acc = { ...acc, ...flattenTranslations(value, currentKeys) };\n    else acc[currentKeys.join(\".\")] = value;\n    return acc;\n  }, {} as Record<string, string>);\n\n// merge translation files with the same locale\nconst messageMap = Object.keys(translations).reduce((acc, filepath) => {\n  const locale = pathParse(filepath).name;\n  acc[locale] = {\n    ...acc[locale],\n    ...flattenTranslations(translations[filepath]),\n  };\n  return acc;\n}, {} as Record<string, Record<string, string>>);\n\nconst setLanguageDefault = (languageCode: string, preferredLocale: string) => {\n  const languageMessages = Object.keys(messageMap).filter((locale) =>\n    locale.toLocaleLowerCase().startsWith(languageCode)\n  );\n  if (languageMessages.length > 0 && !messageMap[languageCode]) {\n    if (languageMessages.includes(preferredLocale)) {\n      messageMap[languageCode] = messageMap[preferredLocale];\n    } else {\n      messageMap[languageCode] = messageMap[languageMessages[0]];\n    }\n  }\n};\n\nsetLanguageDefault(\"en\", \"en-us\");\nsetLanguageDefault(\"es\", \"es-mx\");\n\nlet locale = navigator.language;\nlet messages = messageMap[locale.toLowerCase()];\nif (!messages) {\n  locale = \"en-US\";\n  messages = messageMap[locale.toLowerCase()];\n}\n\nexport { locale, messages };\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config): void {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister(): void {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { IntlProvider } from \"react-intl\";\nimport { StylesProvider } from \"@material-ui/core/styles\";\nimport { IconButton } from \"@material-ui/core\";\nimport { Close } from \"@material-ui/icons\";\nimport { SnackbarProvider } from \"notistack\";\n\nimport { watchSnackbarActions } from \"core/snackbar/sagas\";\nimport { createStore } from \"core/redux/store\";\nimport { importAll } from \"core/utils/webpack\";\n\nimport { fiveSideSearch } from \"core/cube/solvers/five-side-solver\";\nimport { MainScreen } from \"app/main-screen\";\n\nimport { messages, locale } from \"./translations\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\n// import fonts\nimport \"fontsource-roboto/300.css\";\nimport \"fontsource-roboto/400.css\";\nimport \"fontsource-roboto/500.css\";\nimport \"fontsource-roboto/700.css\";\n\n// global css\nimport \"./styles/tailwind.css\";\nimport \"./styles/main.css\";\n\n// import store init scripts\nimportAll(require.context(\"./\", true, /\\/init-store\\.(ts|tsx)$/));\n\nfunction renderApp() {\n  fiveSideSearch.initialize();\n  const snackbar = React.createRef<SnackbarProvider>();\n  const store = createStore();\n  store.runSaga(watchSnackbarActions, snackbar);\n\n  const onClickDismiss = (key: React.ReactText) => () => {\n    snackbar.current?.closeSnackbar(key);\n  };\n  ReactDOM.render(\n    <Provider store={store}>\n      <IntlProvider locale={locale} messages={messages}>\n        <StylesProvider injectFirst>\n          <SnackbarProvider\n            ref={snackbar}\n            maxSnack={1}\n            className=\"mb-3 landscape:mb-0 computer:mb-0\"\n            action={(key) => (\n              <IconButton\n                size=\"small\"\n                color=\"inherit\"\n                onClick={onClickDismiss(key)}\n              >\n                <Close fontSize=\"small\" />\n              </IconButton>\n            )}\n          >\n            <MainScreen />\n          </SnackbarProvider>\n        </StylesProvider>\n      </IntlProvider>\n    </Provider>,\n    document.getElementById(\"root\")\n  );\n}\nrenderApp();\n\n//register service worker\nserviceWorker.register();\n","import { PayloadAction } from \"@reduxjs/toolkit\";\n\nexport const payloadReducer = <S, P>(state: S, action: PayloadAction<P>): P => {\n  return action.payload;\n};\n\nexport const mergeReducer = <S, P extends Partial<S>>(\n  state: S,\n  action: PayloadAction<P>\n): S => {\n  return { ...state, ...action.payload };\n};\n\ninterface SetEntry<T> {\n  key: string;\n  value: T;\n}\n\nexport const setReducer = <T>(\n  state: Record<string, T>,\n  action: PayloadAction<SetEntry<T>>\n): Record<string, T> => {\n  state[action.payload.key] = action.payload.value;\n  return state;\n};\n\nexport const valueReducer = <T>(value: T): (() => T) => () => value;\n","import { createReducer, combineReducers } from \"@reduxjs/toolkit\";\nimport { robotConnected, robotDisconnected } from \"app/robot/store/actions\";\nimport { RobotState } from \"app/robot/store/types\";\nimport { payloadReducer, valueReducer } from \"core/redux/reducer-helpers\";\n\nexport default combineReducers<RobotState>({\n  device: createReducer<RobotState[\"device\"]>(null, (builder) => {\n    builder.addCase(robotConnected, payloadReducer);\n    builder.addCase(robotDisconnected, valueReducer(null));\n  }),\n});\n","import React from \"react\";\nimport { FormattedMessage } from \"react-intl\";\n\nexport function translate(\n  id: string,\n  values?: Record<string, string>\n): JSX.Element {\n  return <FormattedMessage id={id} values={values} />;\n}\n","interface Reducer<T, K> {\n  (acc: T, curr: K): T;\n}\n\nexport const chunkReducer = <T>(\n  chunckSize: number\n): Reducer<Array<Array<T>>, T> => {\n  let currentChunk: Array<T>;\n  return (accumulator: Array<Array<T>>, currentValue: T) => {\n    if (!currentChunk || currentChunk.length === chunckSize) {\n      currentChunk = [];\n      accumulator.push(currentChunk);\n    }\n    currentChunk.push(currentValue);\n    return accumulator;\n  };\n};\n","import {\n  call,\n  put,\n  take,\n  takeEvery,\n  select,\n  race,\n  delay,\n} from \"typed-redux-saga/macro\";\nimport { eventChannel } from \"redux-saga\";\nimport { PayloadAction } from \"@reduxjs/toolkit\";\n\nimport { SagaIterator } from \"core/redux/types\";\nimport { enqueueSnackbar } from \"core/snackbar/actions\";\nimport { translate } from \"core/utils/translation\";\nimport { chunkReducer } from \"core/utils/arrays\";\n\nimport {\n  robotDisconnected,\n  robotConnected,\n  bluetoothDeviceSelected,\n  scrambleSubmitted,\n} from \"app/robot/store/actions\";\nimport { appInitialized } from \"app/main-screen/actions\";\nimport { getRobotServer } from \"app/robot/store/selectors\";\nimport { ExperimentalBluetoothDevice } from \"app/robot/types\";\n\nimport {\n  PRIMARY_SERVICE,\n  SCRAMBLE_CHARACTERISTIC,\n  ROBOT_STATUS_CHARACTERISTIC,\n  DEVICE_INFO_SERVICE,\n  MODEL_NUMBER_SERVICE,\n  getDevices,\n  connect,\n  getPrimaryService,\n  getCharacteristic,\n  readValue,\n  writeValue,\n} from \"app/robot/bluetooth\";\n\nconst moveMap: Record<string, number> = {\n  R: 0,\n  R2: 1,\n  \"R'\": 2,\n  F: 3,\n  F2: 4,\n  \"F'\": 5,\n  D: 6,\n  D2: 7,\n  \"D'\": 8,\n  L: 9,\n  L2: 10,\n  \"L'\": 11,\n  B: 12,\n  B2: 13,\n  \"B'\": 14,\n};\nexport class GANDeviceTypeError extends Error {\n  modelNumber: string;\n  constructor(message: string, modelNumber: string) {\n    super(message);\n    this.name = \"GANDeviceTypeError\";\n    this.modelNumber = modelNumber;\n  }\n}\n\nexport function getGANEncoding(scramble: string): Uint8Array[] {\n  return scramble\n    .replace(/(\\w)2/gi, \"$1 $1\") // for some reason the gan robot sometimes fails on double turns, just convert to singles\n    .split(\" \")\n    .map((move) => moveMap[move])\n    .reduce(chunkReducer(2), [])\n    .map((moves) => moves[0] * 16 + (moves[1] ?? 15)) // encode every 2 moves to decimal representation of a hex value\n    .reduce(chunkReducer(16), []) // robot can only take in 18 hex characters, so chunk on this value and do multiple writes if necessary\n    .map((chunkedArr) => new Uint8Array(chunkedArr));\n}\n\nfunction* executeScramble({ payload: scramble }: PayloadAction<string>) {\n  try {\n    const robotServer = yield* select(getRobotServer);\n    if (robotServer) {\n      for (const scrambleChunk of getGANEncoding(scramble)) {\n        yield* call(executeChunk, robotServer, scrambleChunk);\n      }\n    }\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nfunction* executeChunk(\n  robotServer: BluetoothRemoteGATTServer,\n  chunk: Uint8Array\n) {\n  const primaryService = yield* call(\n    getPrimaryService,\n    robotServer,\n    PRIMARY_SERVICE\n  );\n  const scrambleExecuteCharacteristic = yield* call(\n    getCharacteristic,\n    primaryService,\n    SCRAMBLE_CHARACTERISTIC\n  );\n  yield* call(writeValue, scrambleExecuteCharacteristic, chunk);\n  const statusCharacteristic = yield* call(\n    getCharacteristic,\n    primaryService,\n    ROBOT_STATUS_CHARACTERISTIC\n  );\n\n  let hasHadNonZeroValue = false;\n  while (true) {\n    const robotStatus = (yield* call(readValue, statusCharacteristic)).getUint8(\n      0\n    );\n    if (hasHadNonZeroValue && robotStatus === 0) {\n      break;\n    }\n\n    if (!hasHadNonZeroValue && robotStatus !== 0) {\n      hasHadNonZeroValue = true;\n    }\n    yield* delay(10);\n  }\n}\n\nexport function* watchForScrambleSubmitted(): SagaIterator {\n  yield* takeEvery(scrambleSubmitted, executeScramble);\n}\n\nfunction* handleBluetoothDeviceSelected({\n  payload: device,\n}: PayloadAction<BluetoothDevice>) {\n  try {\n    yield* call(connectToGANRobot, device);\n    yield* put(robotConnected(device));\n    yield* put(\n      enqueueSnackbar(\n        translate(\"robot.snackbar.connected\", {\n          deviceName: device.name as string,\n        }),\n        { variant: \"success\" }\n      )\n    );\n  } catch (e) {\n    if (e instanceof GANDeviceTypeError) {\n      yield* put(\n        enqueueSnackbar(\n          translate(\"robot.snackbar.wrongDevice\", {\n            deviceName: device.name as string,\n            modelNumber: e.modelNumber,\n          }),\n          {\n            variant: \"error\",\n          }\n        )\n      );\n    } else {\n      console.log(\"bluetooth device couldn't connect\");\n      console.log(e);\n    }\n  }\n}\n\nfunction* connectToGANRobot(device: ExperimentalBluetoothDevice) {\n  const server = yield* call(connect, device);\n  if (!server) {\n    throw new Error(\"Could not connect to Bluetooth Server\");\n  }\n  const deviceInfoService = yield* call(\n    getPrimaryService,\n    server,\n    DEVICE_INFO_SERVICE\n  );\n  const modelCharacteristic = yield* call(\n    getCharacteristic,\n    deviceInfoService,\n    MODEL_NUMBER_SERVICE\n  );\n  const modelNumberValue = yield* call(readValue, modelCharacteristic);\n  const modelNumber = new TextDecoder().decode(modelNumberValue);\n  if (modelNumber.toUpperCase() !== \"GAN ROBOTCUBE\") {\n    throw new GANDeviceTypeError(\n      \"Requested device is not a GAN Robot\",\n      modelNumber\n    );\n  }\n}\n\nexport function* watchForBluetoothDeviceSelected(): SagaIterator {\n  yield* takeEvery(bluetoothDeviceSelected, handleBluetoothDeviceSelected);\n}\n\nfunction* listenForDisconnect({\n  payload: device,\n}: PayloadAction<BluetoothDevice>) {\n  const disconnectChannel = eventChannel((emitter) => {\n    device.addEventListener(\"gattserverdisconnected\", emitter);\n    return () => {\n      device.removeEventListener(\"gattserverdisconnected\", emitter);\n    };\n  });\n\n  const result = yield* race({\n    disconnectEvent: take(disconnectChannel),\n    robotConnectedAction: take(robotConnected),\n  });\n\n  if (result.disconnectEvent) {\n    yield* put(robotDisconnected());\n    yield* put(\n      enqueueSnackbar(\n        translate(\"robot.snackbar.disconnected\", {\n          deviceName: device.name as string,\n        }),\n        {\n          variant: \"error\",\n        }\n      )\n    );\n  }\n  disconnectChannel.close();\n}\n\nexport function* watchForRobotConnected(): SagaIterator {\n  yield* takeEvery(robotConnected, listenForDisconnect);\n}\n\nfunction* connectToKnownGANRobots(): SagaIterator<\n  ExperimentalBluetoothDevice | false\n> {\n  const devices = yield* call(getDevices, navigator.bluetooth);\n  if (devices.length === 0) {\n    return false;\n  }\n  const deviceChannel = eventChannel<ExperimentalBluetoothDevice>((emitter) => {\n    for (const device of devices) {\n      const abortController = new AbortController();\n      device.addEventListener(\n        \"advertisementreceived\",\n        () => {\n          abortController.abort();\n          emitter(device);\n        },\n        { once: true }\n      );\n      device.watchAdvertisements({ signal: abortController.signal });\n    }\n    return () => {}; //eslint-disable-line\n  });\n\n  while (true) {\n    const result = yield* race({\n      connectableDevice: take(deviceChannel),\n      registerAction: take(robotConnected),\n    });\n\n    if (result.registerAction) {\n      deviceChannel.close();\n      return false;\n    } else if (result.connectableDevice) {\n      try {\n        yield* call(connectToGANRobot, result.connectableDevice);\n        deviceChannel.close();\n        return result.connectableDevice;\n      } catch (e) {\n        console.log(e);\n      }\n    }\n  }\n}\n\nfunction* handleAppInitialized() {\n  try {\n    const device = yield* call(connectToKnownGANRobots);\n    if (device) {\n      yield* put(robotConnected(device));\n      yield* put(\n        enqueueSnackbar(\n          translate(\"robot.snackbar.connected\", {\n            deviceName: device.name as string,\n          }),\n          { variant: \"success\" }\n        )\n      );\n    }\n  } catch (e) {\n    console.error(e);\n  }\n}\n\nexport function* watchForAppInitialized(): SagaIterator {\n  yield* take(appInitialized);\n  yield* call(handleAppInitialized);\n}\n\nexport default [\n  watchForScrambleSubmitted,\n  watchForBluetoothDeviceSelected,\n  watchForRobotConnected,\n  watchForAppInitialized,\n];\n","import { registerReducer, registerSagas } from \"core/redux/store\";\nimport { RobotState } from \"app/robot/store/types\";\n\nimport reducer from \"app/robot/store/reducer\";\nimport sagas from \"app/robot/store/sagas\";\n\ndeclare module \"core/redux/store\" {\n  interface ApplicationState {\n    robot: RobotState;\n  }\n}\n\nregisterReducer(\"robot\", reducer);\nregisterSagas(sagas);\n","import { createAction } from \"@reduxjs/toolkit\";\n\nconst actionPrefix = \"bluetooth\";\n\nexport const robotConnected = createAction<BluetoothDevice>(\n  `${actionPrefix}/robot/connected`\n);\n\nexport const robotDisconnected = createAction(\n  `${actionPrefix}/robot/disconnected`\n);\n\nexport const bluetoothDeviceSelected = createAction<BluetoothDevice>(\n  `${actionPrefix}/device_selected`\n);\n\nexport const scrambleSubmitted = createAction<string>(\n  `${actionPrefix}/robot/scramble_submitted`\n);\n","import {\n  ExperimentalBluetooth,\n  ExperimentalBluetoothDevice,\n} from \"app/robot/types\";\n\nexport const PRIMARY_SERVICE = 0xfff0;\nexport const SCRAMBLE_CHARACTERISTIC = 0xfff3;\nexport const ROBOT_STATUS_CHARACTERISTIC = 0xfff2;\n\nexport const DEVICE_INFO_SERVICE = 0x180a;\nexport const MODEL_NUMBER_SERVICE = 0x2a24;\n\n// These are needed as chrome will not allow the saga to call directly\nexport function getDevices(\n  bluetooth: ExperimentalBluetooth\n): Promise<ExperimentalBluetoothDevice[]> {\n  return bluetooth.getDevices ? bluetooth.getDevices() : Promise.resolve([]);\n}\n\nexport function connect(\n  device: ExperimentalBluetoothDevice\n): Promise<BluetoothRemoteGATTServer | undefined> {\n  return device.gatt ? device.gatt.connect() : Promise.resolve(undefined);\n}\n\nexport function getPrimaryService(\n  server: BluetoothRemoteGATTServer,\n  serviceId: number\n): Promise<BluetoothRemoteGATTService> {\n  return server.getPrimaryService(serviceId);\n}\n\nexport function getCharacteristic(\n  service: BluetoothRemoteGATTService,\n  characteristicId: number\n): Promise<BluetoothRemoteGATTCharacteristic> {\n  return service.getCharacteristic(characteristicId);\n}\n\nexport function readValue(\n  characteristic: BluetoothRemoteGATTCharacteristic\n): Promise<DataView> {\n  return characteristic.readValue();\n}\n\nexport function writeValue(\n  characteristic: BluetoothRemoteGATTCharacteristic,\n  value: BufferSource\n): Promise<void> {\n  return characteristic.writeValue(value);\n}\n","import { ApplicationState } from \"core/redux/store\";\nimport { RobotState } from \"app/robot/store/types\";\n\nexport const getRobotDevice = (state: ApplicationState): RobotState[\"device\"] =>\n  state.robot.device;\n\nexport const getRobotServer = (\n  state: ApplicationState\n): BluetoothRemoteGATTServer | null => {\n  const robotDevice = getRobotDevice(state);\n  return robotDevice && robotDevice.gatt?.connected ? robotDevice.gatt : null;\n};\n","import { createAction } from \"@reduxjs/toolkit\";\nimport { SnackbarMessage, OptionsObject, SnackbarKey } from \"notistack\";\n\nconst prefix = \"notisnackbar\";\n\nexport const enqueueSnackbar = createAction(\n  `${prefix}/enqueue-snackbar`,\n  (message: SnackbarMessage, options?: OptionsObject) => ({\n    payload: { message, options },\n  })\n);\n\nexport const closeSnackbar = createAction(\n  `${prefix}/close-snackbar`,\n  (key?: SnackbarKey) => ({\n    payload: { key },\n  })\n);\n","import { Reducer } from \"redux\";\nimport { configureStore, EnhancedStore } from \"@reduxjs/toolkit\";\nimport createSagaMiddleware, { Saga, Task, SagaIterator } from \"redux-saga\";\nimport { call, spawn, delay, all } from \"redux-saga/effects\";\n\n// ApplicationState will be dynamically populated from on-startup.ts scripts\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface ApplicationState {}\nconst reducerRegistry: Record<string, Reducer> = {};\n\nexport function registerReducer<TKey extends keyof ApplicationState>(\n  key: TKey,\n  reducer: Reducer<ApplicationState[TKey]>\n): void {\n  reducerRegistry[key] = reducer;\n}\n\nconst sagaRegistry: Saga[] = [];\n\nexport function registerSagas(sagas: Saga[]): void {\n  sagaRegistry.push(...sagas);\n}\n\nfunction* makeRestartable(saga: Saga): SagaIterator {\n  try {\n    yield call(saga);\n  } catch (e) {\n    console.error(\"Saga error, the saga will be restarted\", e);\n    yield delay(500);\n    yield call(makeRestartable, saga);\n  }\n}\n\nfunction* rootSaga() {\n  yield all(sagaRegistry.map((saga) => spawn(makeRestartable, saga)));\n}\n\ninterface AsyncStore extends EnhancedStore {\n  runSaga: <S extends Saga>(saga: S, ...args: Parameters<S>) => Task;\n}\n\nexport function createStore(): AsyncStore {\n  const sagaMiddleware = createSagaMiddleware();\n  const store = configureStore({\n    reducer: reducerRegistry,\n    middleware: [sagaMiddleware],\n  });\n  sagaMiddleware.run(rootSaga);\n  return {\n    ...store,\n    runSaga: sagaMiddleware.run,\n  };\n}\n","import { createAction } from \"@reduxjs/toolkit\";\n\nexport const appInitialized = createAction(\"app/initialized\");\n"],"sourceRoot":""}